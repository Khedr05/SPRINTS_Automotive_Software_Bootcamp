
led_sequance_v1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000538  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000538  000005ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000191d  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009cc  00000000  00000000  00002065  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a8e  00000000  00000000  00002a31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000214  00000000  00000000  000034c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000869  00000000  00000000  000036d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c1a  00000000  00000000  00003f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00004b57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <main>
  7a:	0c 94 9a 02 	jmp	0x534	; 0x534 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <appmain>:




void appmain(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	1f 92       	push	r1
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
	Uint8_t pressCounterFlag = ZERO_PRESS;
	EN_PUSH_BTN_state_t btnState = PUSH_BTN_STATE_RELEASED;
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	89 83       	std	Y+1, r24	; 0x01

	LED_initialize(&led0);
  90:	86 e6       	ldi	r24, 0x66	; 102
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 1d 01 	call	0x23a	; 0x23a <LED_initialize>
	LED_initialize(&led1);
  98:	85 e6       	ldi	r24, 0x65	; 101
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 1d 01 	call	0x23a	; 0x23a <LED_initialize>
	LED_initialize(&led2);
  a0:	84 e6       	ldi	r24, 0x64	; 100
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 1d 01 	call	0x23a	; 0x23a <LED_initialize>
	LED_initialize(&led3);
  a8:	83 e6       	ldi	r24, 0x63	; 99
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 1d 01 	call	0x23a	; 0x23a <LED_initialize>

	PUSH_BTN_intialize(&btn0);
  b0:	80 e6       	ldi	r24, 0x60	; 96
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 9a 01 	call	0x334	; 0x334 <PUSH_BTN_intialize>



void appmain(void)
{
	Uint8_t pressCounterFlag = ZERO_PRESS;
  b8:	10 e0       	ldi	r17, 0x00	; 0

	PUSH_BTN_intialize(&btn0);

	while(1)
	{
		PUSH_BTN_read_state(&btn0,&btnState);
  ba:	be 01       	movw	r22, r28
  bc:	6f 5f       	subi	r22, 0xFF	; 255
  be:	7f 4f       	sbci	r23, 0xFF	; 255
  c0:	80 e6       	ldi	r24, 0x60	; 96
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 a1 01 	call	0x342	; 0x342 <PUSH_BTN_read_state>

		if(btnState == PUSH_BTN_STATE_PRESSED)
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	88 23       	and	r24, r24
  cc:	41 f0       	breq	.+16     	; 0xde <appmain+0x5c>
  ce:	0b c0       	rjmp	.+22     	; 0xe6 <appmain+0x64>
		{
			while(btnState == PUSH_BTN_STATE_PRESSED)
			{
				PUSH_BTN_read_state(&btn0,&btnState);
  d0:	be 01       	movw	r22, r28
  d2:	6f 5f       	subi	r22, 0xFF	; 255
  d4:	7f 4f       	sbci	r23, 0xFF	; 255
  d6:	80 e6       	ldi	r24, 0x60	; 96
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 a1 01 	call	0x342	; 0x342 <PUSH_BTN_read_state>
	{
		PUSH_BTN_read_state(&btn0,&btnState);

		if(btnState == PUSH_BTN_STATE_PRESSED)
		{
			while(btnState == PUSH_BTN_STATE_PRESSED)
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	88 23       	and	r24, r24
  e2:	b1 f3       	breq	.-20     	; 0xd0 <appmain+0x4e>
			{
				PUSH_BTN_read_state(&btn0,&btnState);
			}
			pressCounterFlag++;
  e4:	1f 5f       	subi	r17, 0xFF	; 255
		}

		if(pressCounterFlag == ONE_PRESS)
  e6:	11 30       	cpi	r17, 0x01	; 1
  e8:	89 f4       	brne	.+34     	; 0x10c <appmain+0x8a>
		{
			LED_turn_on(&led0);
  ea:	86 e6       	ldi	r24, 0x66	; 102
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 46 01 	call	0x28c	; 0x28c <LED_turn_on>
			LED_turn_off(&led1);
  f2:	85 e6       	ldi	r24, 0x65	; 101
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_turn_off>
			LED_turn_off(&led2);
  fa:	84 e6       	ldi	r24, 0x64	; 100
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_turn_off>
			LED_turn_off(&led3);
 102:	83 e6       	ldi	r24, 0x63	; 99
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_turn_off>
 10a:	d7 cf       	rjmp	.-82     	; 0xba <appmain+0x38>
		}
		else if(pressCounterFlag == TWO_PRESS)
 10c:	12 30       	cpi	r17, 0x02	; 2
 10e:	89 f4       	brne	.+34     	; 0x132 <appmain+0xb0>
		{
			LED_turn_on(&led0);
 110:	86 e6       	ldi	r24, 0x66	; 102
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 46 01 	call	0x28c	; 0x28c <LED_turn_on>
			LED_turn_on(&led1);
 118:	85 e6       	ldi	r24, 0x65	; 101
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 46 01 	call	0x28c	; 0x28c <LED_turn_on>
			LED_turn_off(&led2);
 120:	84 e6       	ldi	r24, 0x64	; 100
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_turn_off>
			LED_turn_off(&led3);
 128:	83 e6       	ldi	r24, 0x63	; 99
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_turn_off>
 130:	c4 cf       	rjmp	.-120    	; 0xba <appmain+0x38>
		}
		else if(pressCounterFlag == THREE_PRESS)
 132:	13 30       	cpi	r17, 0x03	; 3
 134:	89 f4       	brne	.+34     	; 0x158 <appmain+0xd6>
		{
			LED_turn_on(&led0);
 136:	86 e6       	ldi	r24, 0x66	; 102
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 46 01 	call	0x28c	; 0x28c <LED_turn_on>
			LED_turn_on(&led1);
 13e:	85 e6       	ldi	r24, 0x65	; 101
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 46 01 	call	0x28c	; 0x28c <LED_turn_on>
			LED_turn_on(&led2);
 146:	84 e6       	ldi	r24, 0x64	; 100
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 46 01 	call	0x28c	; 0x28c <LED_turn_on>
			LED_turn_off(&led3);
 14e:	83 e6       	ldi	r24, 0x63	; 99
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_turn_off>
 156:	b1 cf       	rjmp	.-158    	; 0xba <appmain+0x38>
		}
		else if(pressCounterFlag == FOUR_PRESS)
 158:	14 30       	cpi	r17, 0x04	; 4
 15a:	89 f4       	brne	.+34     	; 0x17e <appmain+0xfc>
		{

			LED_turn_on(&led0);
 15c:	86 e6       	ldi	r24, 0x66	; 102
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 46 01 	call	0x28c	; 0x28c <LED_turn_on>
			LED_turn_on(&led1);
 164:	85 e6       	ldi	r24, 0x65	; 101
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 46 01 	call	0x28c	; 0x28c <LED_turn_on>
			LED_turn_on(&led2);
 16c:	84 e6       	ldi	r24, 0x64	; 100
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 46 01 	call	0x28c	; 0x28c <LED_turn_on>
			LED_turn_on(&led3);
 174:	83 e6       	ldi	r24, 0x63	; 99
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 46 01 	call	0x28c	; 0x28c <LED_turn_on>
 17c:	9e cf       	rjmp	.-196    	; 0xba <appmain+0x38>
		}
		else if(pressCounterFlag == FIVE_PRESS)
 17e:	15 30       	cpi	r17, 0x05	; 5
 180:	89 f4       	brne	.+34     	; 0x1a4 <appmain+0x122>
		{

			LED_turn_off(&led0);
 182:	86 e6       	ldi	r24, 0x66	; 102
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_turn_off>
			LED_turn_on(&led1);
 18a:	85 e6       	ldi	r24, 0x65	; 101
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 46 01 	call	0x28c	; 0x28c <LED_turn_on>
			LED_turn_on(&led2);
 192:	84 e6       	ldi	r24, 0x64	; 100
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 46 01 	call	0x28c	; 0x28c <LED_turn_on>
			LED_turn_on(&led3);
 19a:	83 e6       	ldi	r24, 0x63	; 99
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 46 01 	call	0x28c	; 0x28c <LED_turn_on>
 1a2:	8b cf       	rjmp	.-234    	; 0xba <appmain+0x38>
		}
		else if(pressCounterFlag == SIX_PRESS)
 1a4:	16 30       	cpi	r17, 0x06	; 6
 1a6:	89 f4       	brne	.+34     	; 0x1ca <appmain+0x148>
		{
			LED_turn_off(&led0);
 1a8:	86 e6       	ldi	r24, 0x66	; 102
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_turn_off>
			LED_turn_off(&led1);
 1b0:	85 e6       	ldi	r24, 0x65	; 101
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_turn_off>
			LED_turn_on(&led2);
 1b8:	84 e6       	ldi	r24, 0x64	; 100
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 46 01 	call	0x28c	; 0x28c <LED_turn_on>
			LED_turn_on(&led3);
 1c0:	83 e6       	ldi	r24, 0x63	; 99
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 46 01 	call	0x28c	; 0x28c <LED_turn_on>
 1c8:	78 cf       	rjmp	.-272    	; 0xba <appmain+0x38>
		}
		else if(pressCounterFlag == SEVEN_PRESS)
 1ca:	17 30       	cpi	r17, 0x07	; 7
 1cc:	89 f4       	brne	.+34     	; 0x1f0 <appmain+0x16e>
		{
			LED_turn_off(&led0);
 1ce:	86 e6       	ldi	r24, 0x66	; 102
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_turn_off>
			LED_turn_off(&led1);
 1d6:	85 e6       	ldi	r24, 0x65	; 101
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_turn_off>
			LED_turn_off(&led2);
 1de:	84 e6       	ldi	r24, 0x64	; 100
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_turn_off>
			LED_turn_on(&led3);
 1e6:	83 e6       	ldi	r24, 0x63	; 99
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 46 01 	call	0x28c	; 0x28c <LED_turn_on>
 1ee:	65 cf       	rjmp	.-310    	; 0xba <appmain+0x38>
		}
		else if(pressCounterFlag == EIGHT_PRESS)
 1f0:	18 30       	cpi	r17, 0x08	; 8
 1f2:	91 f4       	brne	.+36     	; 0x218 <appmain+0x196>
		{
			LED_turn_off(&led0);
 1f4:	86 e6       	ldi	r24, 0x66	; 102
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_turn_off>
			LED_turn_off(&led1);
 1fc:	85 e6       	ldi	r24, 0x65	; 101
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_turn_off>
			LED_turn_off(&led2);
 204:	84 e6       	ldi	r24, 0x64	; 100
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_turn_off>
			LED_turn_off(&led3);
 20c:	83 e6       	ldi	r24, 0x63	; 99
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_turn_off>
			pressCounterFlag = ZERO_PRESS;
 214:	10 e0       	ldi	r17, 0x00	; 0
 216:	51 cf       	rjmp	.-350    	; 0xba <appmain+0x38>
		}
		else
		{
			LED_turn_off(&led0);
 218:	86 e6       	ldi	r24, 0x66	; 102
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_turn_off>
			LED_turn_off(&led1);
 220:	85 e6       	ldi	r24, 0x65	; 101
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_turn_off>
			LED_turn_off(&led2);
 228:	84 e6       	ldi	r24, 0x64	; 100
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_turn_off>
			LED_turn_off(&led3);
 230:	83 e6       	ldi	r24, 0x63	; 99
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_turn_off>
 238:	40 cf       	rjmp	.-384    	; 0xba <appmain+0x38>

0000023a <LED_initialize>:
 */

#include"LED_interface.h"

Std_ReturnType LED_initialize(const ST_led_t *led)
{
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	1f 92       	push	r1
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == led)
 244:	00 97       	sbiw	r24, 0x00	; 0
 246:	e9 f0       	breq	.+58     	; 0x282 <LED_initialize+0x48>
 248:	fc 01       	movw	r30, r24
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
		{
			.port = led->port_name,
 24a:	20 81       	ld	r18, Z
 24c:	92 2f       	mov	r25, r18
 24e:	97 70       	andi	r25, 0x07	; 7
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	88 7f       	andi	r24, 0xF8	; 248
 254:	89 2b       	or	r24, r25
		{
			.port = led->port_name,
			.pin = led->pin,
 256:	92 2f       	mov	r25, r18
 258:	96 95       	lsr	r25
 25a:	96 95       	lsr	r25
 25c:	96 95       	lsr	r25
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 25e:	97 70       	andi	r25, 0x07	; 7
 260:	99 0f       	add	r25, r25
 262:	99 0f       	add	r25, r25
 264:	99 0f       	add	r25, r25
 266:	87 7c       	andi	r24, 0xC7	; 199
 268:	89 2b       	or	r24, r25
		{
			.port = led->port_name,
			.pin = led->pin,
			.direction = GPIO_DIRECTION_OUTPUT,
			.logic = led->led_status
 26a:	26 fb       	bst	r18, 6
 26c:	22 27       	eor	r18, r18
 26e:	20 f9       	bld	r18, 0
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 270:	80 64       	ori	r24, 0x40	; 64
 272:	20 fb       	bst	r18, 0
 274:	87 f9       	bld	r24, 7
 276:	89 83       	std	Y+1, r24	; 0x01
			.port = led->port_name,
			.pin = led->pin,
			.direction = GPIO_DIRECTION_OUTPUT,
			.logic = led->led_status
		};
		ret = GPIO_pin_intialize(&LED_pin_obj);
 278:	ce 01       	movw	r24, r28
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	0e 94 87 02 	call	0x50e	; 0x50e <GPIO_pin_intialize>
 280:	01 c0       	rjmp	.+2      	; 0x284 <LED_initialize+0x4a>
Std_ReturnType LED_initialize(const ST_led_t *led)
{
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == led)
	{
		ret = E_NOT_OK;
 282:	80 e0       	ldi	r24, 0x00	; 0
			.logic = led->led_status
		};
		ret = GPIO_pin_intialize(&LED_pin_obj);
	}
	return ret;
}
 284:	0f 90       	pop	r0
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <LED_turn_on>:
Std_ReturnType LED_turn_on(const ST_led_t *led)
{
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	1f 92       	push	r1
 292:	cd b7       	in	r28, 0x3d	; 61
 294:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == led)
 296:	00 97       	sbiw	r24, 0x00	; 0
 298:	f1 f0       	breq	.+60     	; 0x2d6 <LED_turn_on+0x4a>
 29a:	fc 01       	movw	r30, r24
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
		{
				.port = led->port_name,
 29c:	20 81       	ld	r18, Z
 29e:	92 2f       	mov	r25, r18
 2a0:	97 70       	andi	r25, 0x07	; 7
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
 2a4:	88 7f       	andi	r24, 0xF8	; 248
 2a6:	89 2b       	or	r24, r25
		{
				.port = led->port_name,
				.pin = led->pin,
 2a8:	92 2f       	mov	r25, r18
 2aa:	96 95       	lsr	r25
 2ac:	96 95       	lsr	r25
 2ae:	96 95       	lsr	r25
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 2b0:	97 70       	andi	r25, 0x07	; 7
 2b2:	99 0f       	add	r25, r25
 2b4:	99 0f       	add	r25, r25
 2b6:	99 0f       	add	r25, r25
 2b8:	87 7c       	andi	r24, 0xC7	; 199
 2ba:	89 2b       	or	r24, r25
		{
				.port = led->port_name,
				.pin = led->pin,
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = led->led_status
 2bc:	26 fb       	bst	r18, 6
 2be:	22 27       	eor	r18, r18
 2c0:	20 f9       	bld	r18, 0
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 2c2:	80 64       	ori	r24, 0x40	; 64
 2c4:	20 fb       	bst	r18, 0
 2c6:	87 f9       	bld	r24, 7
 2c8:	89 83       	std	Y+1, r24	; 0x01
				.port = led->port_name,
				.pin = led->pin,
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = led->led_status
		};
		ret = GPIO_pin_write_logic(&LED_pin_obj , GPIO_LOGIC_HIGH);
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	ce 01       	movw	r24, r28
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	0e 94 22 02 	call	0x444	; 0x444 <GPIO_pin_write_logic>
 2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <LED_turn_on+0x4c>
Std_ReturnType LED_turn_on(const ST_led_t *led)
{
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == led)
	{
		ret = E_NOT_OK;
 2d6:	80 e0       	ldi	r24, 0x00	; 0
				.logic = led->led_status
		};
		ret = GPIO_pin_write_logic(&LED_pin_obj , GPIO_LOGIC_HIGH);
	}
	return ret;
}
 2d8:	0f 90       	pop	r0
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <LED_turn_off>:
Std_ReturnType LED_turn_off(const ST_led_t *led)
{
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	1f 92       	push	r1
 2e6:	cd b7       	in	r28, 0x3d	; 61
 2e8:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == led)
 2ea:	00 97       	sbiw	r24, 0x00	; 0
 2ec:	f1 f0       	breq	.+60     	; 0x32a <LED_turn_off+0x4a>
 2ee:	fc 01       	movw	r30, r24
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
		{
				.port = led->port_name,
 2f0:	20 81       	ld	r18, Z
 2f2:	92 2f       	mov	r25, r18
 2f4:	97 70       	andi	r25, 0x07	; 7
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 2f6:	89 81       	ldd	r24, Y+1	; 0x01
 2f8:	88 7f       	andi	r24, 0xF8	; 248
 2fa:	89 2b       	or	r24, r25
		{
				.port = led->port_name,
				.pin = led->pin,
 2fc:	92 2f       	mov	r25, r18
 2fe:	96 95       	lsr	r25
 300:	96 95       	lsr	r25
 302:	96 95       	lsr	r25
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 304:	97 70       	andi	r25, 0x07	; 7
 306:	99 0f       	add	r25, r25
 308:	99 0f       	add	r25, r25
 30a:	99 0f       	add	r25, r25
 30c:	87 7c       	andi	r24, 0xC7	; 199
 30e:	89 2b       	or	r24, r25
		{
				.port = led->port_name,
				.pin = led->pin,
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = led->led_status
 310:	26 fb       	bst	r18, 6
 312:	22 27       	eor	r18, r18
 314:	20 f9       	bld	r18, 0
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 316:	80 64       	ori	r24, 0x40	; 64
 318:	20 fb       	bst	r18, 0
 31a:	87 f9       	bld	r24, 7
 31c:	89 83       	std	Y+1, r24	; 0x01
				.port = led->port_name,
				.pin = led->pin,
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = led->led_status
		};
		ret = GPIO_pin_write_logic(&LED_pin_obj , GPIO_LOGIC_LOW);
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	ce 01       	movw	r24, r28
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	0e 94 22 02 	call	0x444	; 0x444 <GPIO_pin_write_logic>
 328:	01 c0       	rjmp	.+2      	; 0x32c <LED_turn_off+0x4c>
Std_ReturnType LED_turn_off(const ST_led_t *led)
{
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == led)
	{
		ret = E_NOT_OK;
 32a:	80 e0       	ldi	r24, 0x00	; 0
				.logic = led->led_status
		};
		ret = GPIO_pin_write_logic(&LED_pin_obj , GPIO_LOGIC_LOW);
	}
	return ret;
}
 32c:	0f 90       	pop	r0
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <PUSH_BTN_intialize>:
#include"PB_interface.h"

Std_ReturnType PUSH_BTN_intialize(const ST_PUSH_BTN_t *btn)
{
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == btn)
 334:	00 97       	sbiw	r24, 0x00	; 0
 336:	19 f0       	breq	.+6      	; 0x33e <PUSH_BTN_intialize+0xa>
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret = GPIO_pin_direction_intialize(&(btn->PUSH_BTN_pin));
 338:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <GPIO_pin_direction_intialize>
 33c:	08 95       	ret
Std_ReturnType PUSH_BTN_intialize(const ST_PUSH_BTN_t *btn)
{
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == btn)
	{
		ret = E_NOT_OK;
 33e:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ret = GPIO_pin_direction_intialize(&(btn->PUSH_BTN_pin));
	}
	return ret;
}
 340:	08 95       	ret

00000342 <PUSH_BTN_read_state>:

Std_ReturnType PUSH_BTN_read_state(const ST_PUSH_BTN_t *btn , EN_PUSH_BTN_state_t *btn_state)
{
 342:	ef 92       	push	r14
 344:	ff 92       	push	r15
 346:	0f 93       	push	r16
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	1f 92       	push	r1
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == btn || PTR_NULL == btn_state )
 354:	00 97       	sbiw	r24, 0x00	; 0
 356:	29 f1       	breq	.+74     	; 0x3a2 <PUSH_BTN_read_state+0x60>
 358:	61 15       	cp	r22, r1
 35a:	71 05       	cpc	r23, r1
 35c:	21 f1       	breq	.+72     	; 0x3a6 <PUSH_BTN_read_state+0x64>
 35e:	7b 01       	movw	r14, r22
 360:	8c 01       	movw	r16, r24
	{
		ret = E_NOT_OK;
	}
	else
	{
		EN_logic_t pin_logic_status = GPIO_LOGIC_LOW;
 362:	19 82       	std	Y+1, r1	; 0x01
		ret = GPIO_pin_read_logic(&(btn->PUSH_BTN_pin) , &pin_logic_status);
 364:	be 01       	movw	r22, r28
 366:	6f 5f       	subi	r22, 0xFF	; 255
 368:	7f 4f       	sbci	r23, 0xFF	; 255
 36a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <GPIO_pin_read_logic>
		if(PUSH_BTN_PULL_UP == btn->PUSH_BTN_connection)
 36e:	f8 01       	movw	r30, r16
 370:	82 81       	ldd	r24, Z+2	; 0x02
 372:	81 11       	cpse	r24, r1
 374:	09 c0       	rjmp	.+18     	; 0x388 <PUSH_BTN_read_state+0x46>
		{
			if(GPIO_LOGIC_HIGH == pin_logic_status)
 376:	89 81       	ldd	r24, Y+1	; 0x01
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	19 f4       	brne	.+6      	; 0x382 <PUSH_BTN_read_state+0x40>
			{
				*btn_state = PUSH_BTN_STATE_RELEASED;
 37c:	f7 01       	movw	r30, r14
 37e:	80 83       	st	Z, r24
 380:	0e c0       	rjmp	.+28     	; 0x39e <PUSH_BTN_read_state+0x5c>
			}
			else
			{
				*btn_state = PUSH_BTN_STATE_PRESSED;
 382:	f7 01       	movw	r30, r14
 384:	10 82       	st	Z, r1
 386:	0b c0       	rjmp	.+22     	; 0x39e <PUSH_BTN_read_state+0x5c>
			}
		}
		else if(PUSH_BTN_PULL_DOWN == btn->PUSH_BTN_connection)
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	49 f4       	brne	.+18     	; 0x39e <PUSH_BTN_read_state+0x5c>
		{
			if(GPIO_LOGIC_HIGH == pin_logic_status)
 38c:	89 81       	ldd	r24, Y+1	; 0x01
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	19 f4       	brne	.+6      	; 0x398 <PUSH_BTN_read_state+0x56>
			{
				*btn_state = PUSH_BTN_STATE_PRESSED;
 392:	f7 01       	movw	r30, r14
 394:	10 82       	st	Z, r1
 396:	03 c0       	rjmp	.+6      	; 0x39e <PUSH_BTN_read_state+0x5c>
			}
			else
			{
				*btn_state = PUSH_BTN_STATE_RELEASED;
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	f7 01       	movw	r30, r14
 39c:	80 83       	st	Z, r24
			}
		}
		else{/* nothing */}
		ret = E_OK;
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <PUSH_BTN_read_state+0x66>
Std_ReturnType PUSH_BTN_read_state(const ST_PUSH_BTN_t *btn , EN_PUSH_BTN_state_t *btn_state)
{
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == btn || PTR_NULL == btn_state )
	{
		ret = E_NOT_OK;
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <PUSH_BTN_read_state+0x66>
 3a6:	80 e0       	ldi	r24, 0x00	; 0
		else{/* nothing */}
		ret = E_OK;
	}

	return ret;
}
 3a8:	0f 90       	pop	r0
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	1f 91       	pop	r17
 3b0:	0f 91       	pop	r16
 3b2:	ff 90       	pop	r15
 3b4:	ef 90       	pop	r14
 3b6:	08 95       	ret

000003b8 <main>:
#include "APPLICATION/app.h"


int main(void)
{
	appmain();
 3b8:	0e 94 41 00 	call	0x82	; 0x82 <appmain>
	return 0;
}
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	08 95       	ret

000003c2 <GPIO_pin_direction_intialize>:
       TOGGLE_BIT(*port_registers[_pin_config->port],_pin_config->pin);
       ret = E_OK;
    }

    return ret;
}
 3c2:	fc 01       	movw	r30, r24
 3c4:	89 2b       	or	r24, r25
 3c6:	d1 f1       	breq	.+116    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 3c8:	20 81       	ld	r18, Z
 3ca:	26 95       	lsr	r18
 3cc:	26 95       	lsr	r18
 3ce:	26 95       	lsr	r18
 3d0:	27 70       	andi	r18, 0x07	; 7
 3d2:	80 81       	ld	r24, Z
 3d4:	86 fb       	bst	r24, 6
 3d6:	99 27       	eor	r25, r25
 3d8:	90 f9       	bld	r25, 0
 3da:	86 ff       	sbrs	r24, 6
 3dc:	18 c0       	rjmp	.+48     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3de:	91 30       	cpi	r25, 0x01	; 1
 3e0:	79 f5       	brne	.+94     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 3e2:	e8 2f       	mov	r30, r24
 3e4:	e7 70       	andi	r30, 0x07	; 7
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	ee 0f       	add	r30, r30
 3ea:	ff 1f       	adc	r31, r31
 3ec:	e9 58       	subi	r30, 0x89	; 137
 3ee:	ff 4f       	sbci	r31, 0xFF	; 255
 3f0:	01 90       	ld	r0, Z+
 3f2:	f0 81       	ld	r31, Z
 3f4:	e0 2d       	mov	r30, r0
 3f6:	30 81       	ld	r19, Z
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	2a 95       	dec	r18
 404:	e2 f7       	brpl	.-8      	; 0x3fe <GPIO_pin_direction_intialize+0x3c>
 406:	83 2b       	or	r24, r19
 408:	80 83       	st	Z, r24
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	08 95       	ret
 40e:	e0 81       	ld	r30, Z
 410:	e7 70       	andi	r30, 0x07	; 7
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	ee 0f       	add	r30, r30
 416:	ff 1f       	adc	r31, r31
 418:	e9 58       	subi	r30, 0x89	; 137
 41a:	ff 4f       	sbci	r31, 0xFF	; 255
 41c:	01 90       	ld	r0, Z+
 41e:	f0 81       	ld	r31, Z
 420:	e0 2d       	mov	r30, r0
 422:	30 81       	ld	r19, Z
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	2a 95       	dec	r18
 430:	e2 f7       	brpl	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	80 95       	com	r24
 434:	83 23       	and	r24, r19
 436:	80 83       	st	Z, r24
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	08 95       	ret
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	08 95       	ret
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	08 95       	ret

00000444 <GPIO_pin_write_logic>:
 444:	00 97       	sbiw	r24, 0x00	; 0
 446:	d1 f1       	breq	.+116    	; 0x4bc <GPIO_pin_write_logic+0x78>
 448:	dc 01       	movw	r26, r24
 44a:	2c 91       	ld	r18, X
 44c:	26 95       	lsr	r18
 44e:	26 95       	lsr	r18
 450:	26 95       	lsr	r18
 452:	27 70       	andi	r18, 0x07	; 7
 454:	66 23       	and	r22, r22
 456:	19 f0       	breq	.+6      	; 0x45e <GPIO_pin_write_logic+0x1a>
 458:	61 30       	cpi	r22, 0x01	; 1
 45a:	c9 f0       	breq	.+50     	; 0x48e <GPIO_pin_write_logic+0x4a>
 45c:	31 c0       	rjmp	.+98     	; 0x4c0 <GPIO_pin_write_logic+0x7c>
 45e:	dc 01       	movw	r26, r24
 460:	ec 91       	ld	r30, X
 462:	e7 70       	andi	r30, 0x07	; 7
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	ee 0f       	add	r30, r30
 468:	ff 1f       	adc	r31, r31
 46a:	e1 59       	subi	r30, 0x91	; 145
 46c:	ff 4f       	sbci	r31, 0xFF	; 255
 46e:	01 90       	ld	r0, Z+
 470:	f0 81       	ld	r31, Z
 472:	e0 2d       	mov	r30, r0
 474:	30 81       	ld	r19, Z
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	02 c0       	rjmp	.+4      	; 0x480 <GPIO_pin_write_logic+0x3c>
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	2a 95       	dec	r18
 482:	e2 f7       	brpl	.-8      	; 0x47c <GPIO_pin_write_logic+0x38>
 484:	80 95       	com	r24
 486:	83 23       	and	r24, r19
 488:	80 83       	st	Z, r24
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	08 95       	ret
 48e:	dc 01       	movw	r26, r24
 490:	ec 91       	ld	r30, X
 492:	e7 70       	andi	r30, 0x07	; 7
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	ee 0f       	add	r30, r30
 498:	ff 1f       	adc	r31, r31
 49a:	e1 59       	subi	r30, 0x91	; 145
 49c:	ff 4f       	sbci	r31, 0xFF	; 255
 49e:	01 90       	ld	r0, Z+
 4a0:	f0 81       	ld	r31, Z
 4a2:	e0 2d       	mov	r30, r0
 4a4:	30 81       	ld	r19, Z
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <GPIO_pin_write_logic+0x6c>
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	2a 95       	dec	r18
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <GPIO_pin_write_logic+0x68>
 4b4:	83 2b       	or	r24, r19
 4b6:	80 83       	st	Z, r24
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	08 95       	ret
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	08 95       	ret
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	08 95       	ret

000004c4 <GPIO_pin_read_logic>:
 4c4:	00 97       	sbiw	r24, 0x00	; 0
 4c6:	f9 f0       	breq	.+62     	; 0x506 <GPIO_pin_read_logic+0x42>
 4c8:	61 15       	cp	r22, r1
 4ca:	71 05       	cpc	r23, r1
 4cc:	f1 f0       	breq	.+60     	; 0x50a <GPIO_pin_read_logic+0x46>
 4ce:	dc 01       	movw	r26, r24
 4d0:	2c 91       	ld	r18, X
 4d2:	26 95       	lsr	r18
 4d4:	26 95       	lsr	r18
 4d6:	26 95       	lsr	r18
 4d8:	27 70       	andi	r18, 0x07	; 7
 4da:	ec 91       	ld	r30, X
 4dc:	e7 70       	andi	r30, 0x07	; 7
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	ee 0f       	add	r30, r30
 4e2:	ff 1f       	adc	r31, r31
 4e4:	e9 59       	subi	r30, 0x99	; 153
 4e6:	ff 4f       	sbci	r31, 0xFF	; 255
 4e8:	01 90       	ld	r0, Z+
 4ea:	f0 81       	ld	r31, Z
 4ec:	e0 2d       	mov	r30, r0
 4ee:	80 81       	ld	r24, Z
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <GPIO_pin_read_logic+0x34>
 4f4:	95 95       	asr	r25
 4f6:	87 95       	ror	r24
 4f8:	2a 95       	dec	r18
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <GPIO_pin_read_logic+0x30>
 4fc:	81 70       	andi	r24, 0x01	; 1
 4fe:	fb 01       	movw	r30, r22
 500:	80 83       	st	Z, r24
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	08 95       	ret
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	08 95       	ret
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	08 95       	ret

0000050e <GPIO_pin_intialize>:
Std_ReturnType GPIO_pin_intialize(const ST_pin_config_t *_pin_config)
{
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
    Std_ReturnType ret = E_NOT_OK;

    if(PTR_NULL == _pin_config)
 512:	00 97       	sbiw	r24, 0x00	; 0
 514:	59 f0       	breq	.+22     	; 0x52c <GPIO_pin_intialize+0x1e>
 516:	ec 01       	movw	r28, r24
    {
        ret = E_NOT_OK;
    }
    else
    {
       ret = GPIO_pin_direction_intialize(_pin_config);
 518:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <GPIO_pin_direction_intialize>
       ret = GPIO_pin_write_logic(_pin_config,_pin_config->logic);
 51c:	68 81       	ld	r22, Y
 51e:	67 fb       	bst	r22, 7
 520:	66 27       	eor	r22, r22
 522:	60 f9       	bld	r22, 0
 524:	ce 01       	movw	r24, r28
 526:	0e 94 22 02 	call	0x444	; 0x444 <GPIO_pin_write_logic>
 52a:	01 c0       	rjmp	.+2      	; 0x52e <GPIO_pin_intialize+0x20>
{
    Std_ReturnType ret = E_NOT_OK;

    if(PTR_NULL == _pin_config)
    {
        ret = E_NOT_OK;
 52c:	80 e0       	ldi	r24, 0x00	; 0
    {
       ret = GPIO_pin_direction_intialize(_pin_config);
       ret = GPIO_pin_write_logic(_pin_config,_pin_config->logic);
    }
    return ret;
}
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	08 95       	ret

00000534 <_exit>:
 534:	f8 94       	cli

00000536 <__stop_program>:
 536:	ff cf       	rjmp	.-2      	; 0x536 <__stop_program>
