
led_sequance_v3.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000fe6  0000107a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fe6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080012e  0080012e  000010a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d7c  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f25  00000000  00000000  000040b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000190d  00000000  00000000  00004fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000584  00000000  00000000  000068e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015c6  00000000  00000000  00006e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cb8  00000000  00000000  00008432  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  0000a0ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__vector_1>
   8:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__vector_2>
   c:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__vector_3>
  10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  28:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__vector_10>
  2c:	0c 94 66 07 	jmp	0xecc	; 0xecc <__vector_11>
  30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  70:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  74:	30 06       	cpc	r3, r16
  76:	35 06       	cpc	r3, r21
  78:	3b 06       	cpc	r3, r27
  7a:	41 06       	cpc	r4, r17
  7c:	46 06       	cpc	r4, r22
  7e:	4c 06       	cpc	r4, r28
  80:	51 06       	cpc	r5, r17
  82:	57 06       	cpc	r5, r23
  84:	bf 06       	cpc	r11, r31
  86:	c4 06       	cpc	r12, r20
  88:	ca 06       	cpc	r12, r26
  8a:	d1 06       	cpc	r13, r17
  8c:	d7 06       	cpc	r13, r23
  8e:	dd 06       	cpc	r13, r29
  90:	e4 06       	cpc	r14, r20
  92:	ea 06       	cpc	r14, r26

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d4 e0       	ldi	r29, 0x04	; 4
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e6 ee       	ldi	r30, 0xE6	; 230
  a8:	ff e0       	ldi	r31, 0x0F	; 15
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	ae 32       	cpi	r26, 0x2E	; 46
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	ae e2       	ldi	r26, 0x2E	; 46
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
  be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
  c0:	a6 34       	cpi	r26, 0x46	; 70
  c2:	b2 07       	cpc	r27, r18
  c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
  c6:	0e 94 df 03 	call	0x7be	; 0x7be <main>
  ca:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <_exit>

000000ce <__bad_interrupt>:
  ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <INT2_ISR_HANDELER>:
}


static void INT2_ISR_HANDELER(void)
{
	blankCounter++;
  d2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <blankCounter>
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <blankCounter>
	if(blankCounter == 6)
  dc:	86 30       	cpi	r24, 0x06	; 6
  de:	19 f4       	brne	.+6      	; 0xe6 <INT2_ISR_HANDELER+0x14>
	blankCounter = 1;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <blankCounter>
  e6:	08 95       	ret

000000e8 <timer0_callback>:
}

static void timer0_callback(void)
{
	enu_timer_state_flag = TIMER_FLAG_IS_FIRE;
  e8:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <enu_timer_state_flag>
  ec:	08 95       	ret

000000ee <seq_change>:
}


static void seq_change(void)
{
	seqCounter++;
  ee:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
  f2:	8f 5f       	subi	r24, 0xFF	; 255
  f4:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
	if(seqCounter == 9)
  f8:	89 30       	cpi	r24, 0x09	; 9
  fa:	11 f4       	brne	.+4      	; 0x100 <seq_change+0x12>
	seqCounter = 0;
  fc:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
 100:	08 95       	ret

00000102 <BlinkModes>:
}



void BlinkModes(Uint32_t from,Uint32_t to)
{
 102:	8f 92       	push	r8
 104:	9f 92       	push	r9
 106:	af 92       	push	r10
 108:	bf 92       	push	r11
 10a:	cf 92       	push	r12
 10c:	df 92       	push	r13
 10e:	ef 92       	push	r14
 110:	ff 92       	push	r15
 112:	6b 01       	movw	r12, r22
 114:	7c 01       	movw	r14, r24
 116:	49 01       	movw	r8, r18
 118:	5a 01       	movw	r10, r20
	
	
	if(seqCounter == ONE_PRESS)
 11a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	d9 f5       	brne	.+118    	; 0x198 <BlinkModes+0x96>
	{
		if((enu_blank_states == BLANK_IN_TURN_ON) && (enu_timer_state_flag == TIMER_FLAG_REST))
 122:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <enu_blank_states>
 126:	81 11       	cpse	r24, r1
 128:	14 c0       	rjmp	.+40     	; 0x152 <BlinkModes+0x50>
 12a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <enu_timer_state_flag>
 12e:	91 30       	cpi	r25, 0x01	; 1
 130:	81 f4       	brne	.+32     	; 0x152 <BlinkModes+0x50>
		{
			enu_blank_states = BLANK_IN_TURN_OFF;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enu_blank_states>
			LED_turn_on(&led0);
 138:	82 e1       	ldi	r24, 0x12	; 18
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	0e 94 49 03 	call	0x692	; 0x692 <LED_turn_on>
			TIMER0_delay_ms(from);
 140:	c7 01       	movw	r24, r14
 142:	b6 01       	movw	r22, r12
 144:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TIMER0_delay_ms>
			TIMER0_start(&timer0);
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 af 06 	call	0xd5e	; 0xd5e <TIMER0_start>
 150:	f3 c1       	rjmp	.+998    	; 0x538 <__stack+0x39>
		}
		else if((enu_timer_state_flag == TIMER_FLAG_IS_FIRE) && (enu_blank_states == BLANK_IN_TURN_OFF))
 152:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <enu_timer_state_flag>
 156:	91 11       	cpse	r25, r1
 158:	14 c0       	rjmp	.+40     	; 0x182 <BlinkModes+0x80>
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	91 f4       	brne	.+36     	; 0x182 <BlinkModes+0x80>
		{
			enu_timer_state_flag = TIMER_FLAG_REST;
 15e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <enu_timer_state_flag>
			enu_blank_states = BLANK_IN_RESET;
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enu_blank_states>
			LED_turn_off(&led0);
 168:	82 e1       	ldi	r24, 0x12	; 18
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_turn_off>
			TIMER0_delay_ms(to);
 170:	c5 01       	movw	r24, r10
 172:	b4 01       	movw	r22, r8
 174:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TIMER0_delay_ms>
			TIMER0_start(&timer0);
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	0e 94 af 06 	call	0xd5e	; 0xd5e <TIMER0_start>
 180:	db c1       	rjmp	.+950    	; 0x538 <__stack+0x39>
		}
		else if((enu_timer_state_flag == TIMER_FLAG_IS_FIRE) && (enu_blank_states == BLANK_IN_RESET))
 182:	91 11       	cpse	r25, r1
 184:	d9 c1       	rjmp	.+946    	; 0x538 <__stack+0x39>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	09 f0       	breq	.+2      	; 0x18c <BlinkModes+0x8a>
 18a:	d6 c1       	rjmp	.+940    	; 0x538 <__stack+0x39>
		{
			enu_timer_state_flag = TIMER_FLAG_REST;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <enu_timer_state_flag>
			enu_blank_states = BLANK_IN_TURN_ON;
 192:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <enu_blank_states>
 196:	d0 c1       	rjmp	.+928    	; 0x538 <__stack+0x39>
		}
	}
	else if(seqCounter == TWO_PRESS)
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	09 f0       	breq	.+2      	; 0x19e <BlinkModes+0x9c>
 19c:	43 c0       	rjmp	.+134    	; 0x224 <BlinkModes+0x122>
	{
		if((enu_blank_states == BLANK_IN_TURN_ON) && (enu_timer_state_flag == TIMER_FLAG_REST))
 19e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <enu_blank_states>
 1a2:	81 11       	cpse	r24, r1
 1a4:	18 c0       	rjmp	.+48     	; 0x1d6 <BlinkModes+0xd4>
 1a6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <enu_timer_state_flag>
 1aa:	91 30       	cpi	r25, 0x01	; 1
 1ac:	a1 f4       	brne	.+40     	; 0x1d6 <BlinkModes+0xd4>
		{
			enu_blank_states = BLANK_IN_TURN_OFF;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enu_blank_states>
			LED_turn_on(&led0);
 1b4:	82 e1       	ldi	r24, 0x12	; 18
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	0e 94 49 03 	call	0x692	; 0x692 <LED_turn_on>
			LED_turn_on(&led1);
 1bc:	81 e1       	ldi	r24, 0x11	; 17
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 49 03 	call	0x692	; 0x692 <LED_turn_on>
			TIMER0_start(&timer0);
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	0e 94 af 06 	call	0xd5e	; 0xd5e <TIMER0_start>
			TIMER0_delay_ms(from);
 1cc:	c7 01       	movw	r24, r14
 1ce:	b6 01       	movw	r22, r12
 1d0:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TIMER0_delay_ms>
 1d4:	b1 c1       	rjmp	.+866    	; 0x538 <__stack+0x39>
		}
		else if((enu_timer_state_flag == TIMER_FLAG_IS_FIRE) && (enu_blank_states == BLANK_IN_TURN_OFF))
 1d6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <enu_timer_state_flag>
 1da:	91 11       	cpse	r25, r1
 1dc:	18 c0       	rjmp	.+48     	; 0x20e <BlinkModes+0x10c>
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	b1 f4       	brne	.+44     	; 0x20e <BlinkModes+0x10c>
		{
			enu_timer_state_flag = TIMER_FLAG_REST;
 1e2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <enu_timer_state_flag>
			enu_blank_states = BLANK_IN_RESET;
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enu_blank_states>
			LED_turn_off(&led0);
 1ec:	82 e1       	ldi	r24, 0x12	; 18
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_turn_off>
			LED_turn_off(&led1);
 1f4:	81 e1       	ldi	r24, 0x11	; 17
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_turn_off>
			TIMER0_start(&timer0);
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	0e 94 af 06 	call	0xd5e	; 0xd5e <TIMER0_start>
			TIMER0_delay_ms(to);
 204:	c5 01       	movw	r24, r10
 206:	b4 01       	movw	r22, r8
 208:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TIMER0_delay_ms>
 20c:	95 c1       	rjmp	.+810    	; 0x538 <__stack+0x39>
		}
		else if((enu_timer_state_flag == TIMER_FLAG_IS_FIRE) && (enu_blank_states == BLANK_IN_RESET))
 20e:	91 11       	cpse	r25, r1
 210:	93 c1       	rjmp	.+806    	; 0x538 <__stack+0x39>
 212:	82 30       	cpi	r24, 0x02	; 2
 214:	09 f0       	breq	.+2      	; 0x218 <BlinkModes+0x116>
 216:	90 c1       	rjmp	.+800    	; 0x538 <__stack+0x39>
		{
			enu_timer_state_flag = TIMER_FLAG_REST;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <enu_timer_state_flag>
			enu_blank_states = BLANK_IN_TURN_ON;
 21e:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <enu_blank_states>
 222:	8a c1       	rjmp	.+788    	; 0x538 <__stack+0x39>
		}
	}
	else if(seqCounter == THREE_PRESS)
 224:	83 30       	cpi	r24, 0x03	; 3
 226:	09 f0       	breq	.+2      	; 0x22a <BlinkModes+0x128>
 228:	4b c0       	rjmp	.+150    	; 0x2c0 <BlinkModes+0x1be>
	{
		if((enu_blank_states == BLANK_IN_TURN_ON) && (enu_timer_state_flag == TIMER_FLAG_REST))
 22a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <enu_blank_states>
 22e:	81 11       	cpse	r24, r1
 230:	1c c0       	rjmp	.+56     	; 0x26a <BlinkModes+0x168>
 232:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <enu_timer_state_flag>
 236:	91 30       	cpi	r25, 0x01	; 1
 238:	c1 f4       	brne	.+48     	; 0x26a <BlinkModes+0x168>
		{
			enu_blank_states = BLANK_IN_TURN_OFF;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enu_blank_states>
			LED_turn_on(&led0);
 240:	82 e1       	ldi	r24, 0x12	; 18
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	0e 94 49 03 	call	0x692	; 0x692 <LED_turn_on>
			LED_turn_on(&led1);
 248:	81 e1       	ldi	r24, 0x11	; 17
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	0e 94 49 03 	call	0x692	; 0x692 <LED_turn_on>
			LED_turn_on(&led2);
 250:	80 e1       	ldi	r24, 0x10	; 16
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	0e 94 49 03 	call	0x692	; 0x692 <LED_turn_on>
			TIMER0_start(&timer0);
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 af 06 	call	0xd5e	; 0xd5e <TIMER0_start>
			TIMER0_delay_ms(from);
 260:	c7 01       	movw	r24, r14
 262:	b6 01       	movw	r22, r12
 264:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TIMER0_delay_ms>
 268:	67 c1       	rjmp	.+718    	; 0x538 <__stack+0x39>
		}
		else if((enu_timer_state_flag == TIMER_FLAG_IS_FIRE) && (enu_blank_states == BLANK_IN_TURN_OFF))
 26a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <enu_timer_state_flag>
 26e:	91 11       	cpse	r25, r1
 270:	1c c0       	rjmp	.+56     	; 0x2aa <BlinkModes+0x1a8>
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	d1 f4       	brne	.+52     	; 0x2aa <BlinkModes+0x1a8>
		{
			enu_timer_state_flag = TIMER_FLAG_REST;
 276:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <enu_timer_state_flag>
			enu_blank_states = BLANK_IN_RESET;
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enu_blank_states>
			LED_turn_off(&led0);
 280:	82 e1       	ldi	r24, 0x12	; 18
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_turn_off>
			LED_turn_off(&led1);
 288:	81 e1       	ldi	r24, 0x11	; 17
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_turn_off>
			LED_turn_off(&led2);
 290:	80 e1       	ldi	r24, 0x10	; 16
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_turn_off>
			TIMER0_start(&timer0);
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 af 06 	call	0xd5e	; 0xd5e <TIMER0_start>
			TIMER0_delay_ms(to);
 2a0:	c5 01       	movw	r24, r10
 2a2:	b4 01       	movw	r22, r8
 2a4:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TIMER0_delay_ms>
 2a8:	47 c1       	rjmp	.+654    	; 0x538 <__stack+0x39>
		}
		else if((enu_timer_state_flag == TIMER_FLAG_IS_FIRE) && (enu_blank_states == BLANK_IN_RESET))
 2aa:	91 11       	cpse	r25, r1
 2ac:	45 c1       	rjmp	.+650    	; 0x538 <__stack+0x39>
 2ae:	82 30       	cpi	r24, 0x02	; 2
 2b0:	09 f0       	breq	.+2      	; 0x2b4 <BlinkModes+0x1b2>
 2b2:	42 c1       	rjmp	.+644    	; 0x538 <__stack+0x39>
		{
			enu_timer_state_flag = TIMER_FLAG_REST;
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <enu_timer_state_flag>
			enu_blank_states = BLANK_IN_TURN_ON;
 2ba:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <enu_blank_states>
 2be:	3c c1       	rjmp	.+632    	; 0x538 <__stack+0x39>
		}
	}
	else if(seqCounter == FOUR_PRESS)
 2c0:	84 30       	cpi	r24, 0x04	; 4
 2c2:	09 f0       	breq	.+2      	; 0x2c6 <BlinkModes+0x1c4>
 2c4:	53 c0       	rjmp	.+166    	; 0x36c <BlinkModes+0x26a>
	{
		if((enu_blank_states == BLANK_IN_TURN_ON) && (enu_timer_state_flag == TIMER_FLAG_REST))
 2c6:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <enu_blank_states>
 2ca:	81 11       	cpse	r24, r1
 2cc:	20 c0       	rjmp	.+64     	; 0x30e <BlinkModes+0x20c>
 2ce:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <enu_timer_state_flag>
 2d2:	91 30       	cpi	r25, 0x01	; 1
 2d4:	e1 f4       	brne	.+56     	; 0x30e <BlinkModes+0x20c>
		{
			enu_blank_states = BLANK_IN_TURN_OFF;
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enu_blank_states>
			LED_turn_on(&led0);
 2dc:	82 e1       	ldi	r24, 0x12	; 18
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	0e 94 49 03 	call	0x692	; 0x692 <LED_turn_on>
			LED_turn_on(&led1);
 2e4:	81 e1       	ldi	r24, 0x11	; 17
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	0e 94 49 03 	call	0x692	; 0x692 <LED_turn_on>
			LED_turn_on(&led2);
 2ec:	80 e1       	ldi	r24, 0x10	; 16
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 49 03 	call	0x692	; 0x692 <LED_turn_on>
			LED_turn_on(&led3);
 2f4:	8f e0       	ldi	r24, 0x0F	; 15
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	0e 94 49 03 	call	0x692	; 0x692 <LED_turn_on>
			TIMER0_start(&timer0);
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	0e 94 af 06 	call	0xd5e	; 0xd5e <TIMER0_start>
			TIMER0_delay_ms(from);
 304:	c7 01       	movw	r24, r14
 306:	b6 01       	movw	r22, r12
 308:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TIMER0_delay_ms>
 30c:	15 c1       	rjmp	.+554    	; 0x538 <__stack+0x39>
		}
		else if((enu_timer_state_flag == TIMER_FLAG_IS_FIRE) && (enu_blank_states == BLANK_IN_TURN_OFF))
 30e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <enu_timer_state_flag>
 312:	91 11       	cpse	r25, r1
 314:	20 c0       	rjmp	.+64     	; 0x356 <BlinkModes+0x254>
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	f1 f4       	brne	.+60     	; 0x356 <BlinkModes+0x254>
		{
			enu_timer_state_flag = TIMER_FLAG_REST;
 31a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <enu_timer_state_flag>
			enu_blank_states = BLANK_IN_RESET;
 31e:	82 e0       	ldi	r24, 0x02	; 2
 320:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enu_blank_states>
			LED_turn_off(&led0);
 324:	82 e1       	ldi	r24, 0x12	; 18
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_turn_off>
			LED_turn_off(&led1);
 32c:	81 e1       	ldi	r24, 0x11	; 17
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_turn_off>
			LED_turn_off(&led2);
 334:	80 e1       	ldi	r24, 0x10	; 16
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_turn_off>
			LED_turn_off(&led3);
 33c:	8f e0       	ldi	r24, 0x0F	; 15
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_turn_off>
			TIMER0_start(&timer0);
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	0e 94 af 06 	call	0xd5e	; 0xd5e <TIMER0_start>
			TIMER0_delay_ms(to);
 34c:	c5 01       	movw	r24, r10
 34e:	b4 01       	movw	r22, r8
 350:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TIMER0_delay_ms>
 354:	f1 c0       	rjmp	.+482    	; 0x538 <__stack+0x39>
		}
		else if((enu_timer_state_flag == TIMER_FLAG_IS_FIRE) && (enu_blank_states == BLANK_IN_RESET))
 356:	91 11       	cpse	r25, r1
 358:	ef c0       	rjmp	.+478    	; 0x538 <__stack+0x39>
 35a:	82 30       	cpi	r24, 0x02	; 2
 35c:	09 f0       	breq	.+2      	; 0x360 <BlinkModes+0x25e>
 35e:	ec c0       	rjmp	.+472    	; 0x538 <__stack+0x39>
		{
			enu_timer_state_flag = TIMER_FLAG_REST;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <enu_timer_state_flag>
			enu_blank_states = BLANK_IN_TURN_ON;
 366:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <enu_blank_states>
 36a:	e6 c0       	rjmp	.+460    	; 0x538 <__stack+0x39>
		}
	}
	else if(seqCounter == FIVE_PRESS)
 36c:	85 30       	cpi	r24, 0x05	; 5
 36e:	09 f0       	breq	.+2      	; 0x372 <BlinkModes+0x270>
 370:	4f c0       	rjmp	.+158    	; 0x410 <__DATA_REGION_LENGTH__+0x10>
	{
		if((enu_blank_states == BLANK_IN_TURN_ON) && (enu_timer_state_flag == TIMER_FLAG_REST))
 372:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <enu_blank_states>
 376:	81 11       	cpse	r24, r1
 378:	20 c0       	rjmp	.+64     	; 0x3ba <BlinkModes+0x2b8>
 37a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <enu_timer_state_flag>
 37e:	91 30       	cpi	r25, 0x01	; 1
 380:	e1 f4       	brne	.+56     	; 0x3ba <BlinkModes+0x2b8>
		{
			enu_blank_states = BLANK_IN_TURN_OFF;
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enu_blank_states>
			LED_turn_off(&led0);
 388:	82 e1       	ldi	r24, 0x12	; 18
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_turn_off>
			LED_turn_on(&led1);
 390:	81 e1       	ldi	r24, 0x11	; 17
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	0e 94 49 03 	call	0x692	; 0x692 <LED_turn_on>
			LED_turn_on(&led2);
 398:	80 e1       	ldi	r24, 0x10	; 16
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	0e 94 49 03 	call	0x692	; 0x692 <LED_turn_on>
			LED_turn_on(&led3);
 3a0:	8f e0       	ldi	r24, 0x0F	; 15
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	0e 94 49 03 	call	0x692	; 0x692 <LED_turn_on>
			TIMER0_start(&timer0);
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	0e 94 af 06 	call	0xd5e	; 0xd5e <TIMER0_start>
			TIMER0_delay_ms(from);
 3b0:	c7 01       	movw	r24, r14
 3b2:	b6 01       	movw	r22, r12
 3b4:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TIMER0_delay_ms>
 3b8:	bf c0       	rjmp	.+382    	; 0x538 <__stack+0x39>
		}
		else if((enu_timer_state_flag == TIMER_FLAG_IS_FIRE) && (enu_blank_states == BLANK_IN_TURN_OFF))
 3ba:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <enu_timer_state_flag>
 3be:	91 11       	cpse	r25, r1
 3c0:	1c c0       	rjmp	.+56     	; 0x3fa <BlinkModes+0x2f8>
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	d1 f4       	brne	.+52     	; 0x3fa <BlinkModes+0x2f8>
		{
			enu_timer_state_flag = TIMER_FLAG_REST;
 3c6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <enu_timer_state_flag>
			enu_blank_states = BLANK_IN_RESET;
 3ca:	82 e0       	ldi	r24, 0x02	; 2
 3cc:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enu_blank_states>
			LED_turn_off(&led1);
 3d0:	81 e1       	ldi	r24, 0x11	; 17
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_turn_off>
			LED_turn_off(&led2);
 3d8:	80 e1       	ldi	r24, 0x10	; 16
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_turn_off>
			LED_turn_off(&led3);
 3e0:	8f e0       	ldi	r24, 0x0F	; 15
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_turn_off>
			TIMER0_start(&timer0);
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	0e 94 af 06 	call	0xd5e	; 0xd5e <TIMER0_start>
			TIMER0_delay_ms(to);
 3f0:	c5 01       	movw	r24, r10
 3f2:	b4 01       	movw	r22, r8
 3f4:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TIMER0_delay_ms>
 3f8:	9f c0       	rjmp	.+318    	; 0x538 <__stack+0x39>
		}
		else if((enu_timer_state_flag == TIMER_FLAG_IS_FIRE) && (enu_blank_states == BLANK_IN_RESET))
 3fa:	91 11       	cpse	r25, r1
 3fc:	9d c0       	rjmp	.+314    	; 0x538 <__stack+0x39>
 3fe:	82 30       	cpi	r24, 0x02	; 2
 400:	09 f0       	breq	.+2      	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 402:	9a c0       	rjmp	.+308    	; 0x538 <__stack+0x39>
		{
			enu_timer_state_flag = TIMER_FLAG_REST;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <enu_timer_state_flag>
			enu_blank_states = BLANK_IN_TURN_ON;
 40a:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <enu_blank_states>
 40e:	94 c0       	rjmp	.+296    	; 0x538 <__stack+0x39>
		}
	}
	else if(seqCounter == SIX_PRESS)
 410:	86 30       	cpi	r24, 0x06	; 6
 412:	09 f0       	breq	.+2      	; 0x416 <__DATA_REGION_LENGTH__+0x16>
 414:	43 c0       	rjmp	.+134    	; 0x49c <__DATA_REGION_LENGTH__+0x9c>
	{
		if((enu_blank_states == BLANK_IN_TURN_ON) && (enu_timer_state_flag == TIMER_FLAG_REST))
 416:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <enu_blank_states>
 41a:	81 11       	cpse	r24, r1
 41c:	18 c0       	rjmp	.+48     	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 41e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <enu_timer_state_flag>
 422:	91 30       	cpi	r25, 0x01	; 1
 424:	a1 f4       	brne	.+40     	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
		{
			enu_blank_states = BLANK_IN_TURN_OFF;
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enu_blank_states>
			LED_turn_on(&led2);
 42c:	80 e1       	ldi	r24, 0x10	; 16
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	0e 94 49 03 	call	0x692	; 0x692 <LED_turn_on>
			LED_turn_on(&led3);
 434:	8f e0       	ldi	r24, 0x0F	; 15
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	0e 94 49 03 	call	0x692	; 0x692 <LED_turn_on>
			TIMER0_start(&timer0);
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	0e 94 af 06 	call	0xd5e	; 0xd5e <TIMER0_start>
			TIMER0_delay_ms(from);
 444:	c7 01       	movw	r24, r14
 446:	b6 01       	movw	r22, r12
 448:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TIMER0_delay_ms>
 44c:	75 c0       	rjmp	.+234    	; 0x538 <__stack+0x39>
		}
		else if((enu_timer_state_flag == TIMER_FLAG_IS_FIRE) && (enu_blank_states == BLANK_IN_TURN_OFF))
 44e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <enu_timer_state_flag>
 452:	91 11       	cpse	r25, r1
 454:	18 c0       	rjmp	.+48     	; 0x486 <__DATA_REGION_LENGTH__+0x86>
 456:	81 30       	cpi	r24, 0x01	; 1
 458:	b1 f4       	brne	.+44     	; 0x486 <__DATA_REGION_LENGTH__+0x86>
		{
			enu_timer_state_flag = TIMER_FLAG_REST;
 45a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <enu_timer_state_flag>
			enu_blank_states = BLANK_IN_RESET;
 45e:	82 e0       	ldi	r24, 0x02	; 2
 460:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enu_blank_states>
			LED_turn_off(&led2);
 464:	80 e1       	ldi	r24, 0x10	; 16
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_turn_off>
			LED_turn_off(&led3);
 46c:	8f e0       	ldi	r24, 0x0F	; 15
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_turn_off>
			TIMER0_start(&timer0);
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	91 e0       	ldi	r25, 0x01	; 1
 478:	0e 94 af 06 	call	0xd5e	; 0xd5e <TIMER0_start>
			TIMER0_delay_ms(to);
 47c:	c5 01       	movw	r24, r10
 47e:	b4 01       	movw	r22, r8
 480:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TIMER0_delay_ms>
 484:	59 c0       	rjmp	.+178    	; 0x538 <__stack+0x39>
		}
		else if((enu_timer_state_flag == TIMER_FLAG_IS_FIRE) && (enu_blank_states == BLANK_IN_RESET))
 486:	91 11       	cpse	r25, r1
 488:	57 c0       	rjmp	.+174    	; 0x538 <__stack+0x39>
 48a:	82 30       	cpi	r24, 0x02	; 2
 48c:	09 f0       	breq	.+2      	; 0x490 <__DATA_REGION_LENGTH__+0x90>
 48e:	54 c0       	rjmp	.+168    	; 0x538 <__stack+0x39>
		{
			enu_timer_state_flag = TIMER_FLAG_REST;
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <enu_timer_state_flag>
			enu_blank_states = BLANK_IN_TURN_ON;
 496:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <enu_blank_states>
 49a:	4e c0       	rjmp	.+156    	; 0x538 <__stack+0x39>
		}
	}
	else if(seqCounter == SEVEN_PRESS)
 49c:	87 30       	cpi	r24, 0x07	; 7
 49e:	d1 f5       	brne	.+116    	; 0x514 <__stack+0x15>
	{
		if((enu_blank_states == BLANK_IN_TURN_ON) && (enu_timer_state_flag == TIMER_FLAG_REST))
 4a0:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <enu_blank_states>
 4a4:	81 11       	cpse	r24, r1
 4a6:	14 c0       	rjmp	.+40     	; 0x4d0 <__DATA_REGION_LENGTH__+0xd0>
 4a8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <enu_timer_state_flag>
 4ac:	91 30       	cpi	r25, 0x01	; 1
 4ae:	81 f4       	brne	.+32     	; 0x4d0 <__DATA_REGION_LENGTH__+0xd0>
		{
			enu_blank_states = BLANK_IN_TURN_OFF;
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enu_blank_states>
			LED_turn_on(&led3);
 4b6:	8f e0       	ldi	r24, 0x0F	; 15
 4b8:	91 e0       	ldi	r25, 0x01	; 1
 4ba:	0e 94 49 03 	call	0x692	; 0x692 <LED_turn_on>
			TIMER0_start(&timer0);
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	0e 94 af 06 	call	0xd5e	; 0xd5e <TIMER0_start>
			TIMER0_delay_ms(from);
 4c6:	c7 01       	movw	r24, r14
 4c8:	b6 01       	movw	r22, r12
 4ca:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TIMER0_delay_ms>
 4ce:	34 c0       	rjmp	.+104    	; 0x538 <__stack+0x39>
		}
		else if((enu_timer_state_flag == TIMER_FLAG_IS_FIRE) && (enu_blank_states == BLANK_IN_TURN_OFF))
 4d0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <enu_timer_state_flag>
 4d4:	91 11       	cpse	r25, r1
 4d6:	14 c0       	rjmp	.+40     	; 0x500 <__stack+0x1>
 4d8:	81 30       	cpi	r24, 0x01	; 1
 4da:	91 f4       	brne	.+36     	; 0x500 <__stack+0x1>
		{
			enu_timer_state_flag = TIMER_FLAG_REST;
 4dc:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <enu_timer_state_flag>
			enu_blank_states = BLANK_IN_RESET;
 4e0:	82 e0       	ldi	r24, 0x02	; 2
 4e2:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enu_blank_states>
			LED_turn_off(&led3);
 4e6:	8f e0       	ldi	r24, 0x0F	; 15
 4e8:	91 e0       	ldi	r25, 0x01	; 1
 4ea:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_turn_off>
			TIMER0_start(&timer0);
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	91 e0       	ldi	r25, 0x01	; 1
 4f2:	0e 94 af 06 	call	0xd5e	; 0xd5e <TIMER0_start>
			TIMER0_delay_ms(to);
 4f6:	c5 01       	movw	r24, r10
 4f8:	b4 01       	movw	r22, r8
 4fa:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TIMER0_delay_ms>
 4fe:	1c c0       	rjmp	.+56     	; 0x538 <__stack+0x39>
		}
		else if((enu_timer_state_flag == TIMER_FLAG_IS_FIRE) && (enu_blank_states == BLANK_IN_RESET))
 500:	91 11       	cpse	r25, r1
 502:	1a c0       	rjmp	.+52     	; 0x538 <__stack+0x39>
 504:	82 30       	cpi	r24, 0x02	; 2
 506:	c1 f4       	brne	.+48     	; 0x538 <__stack+0x39>
		{
			enu_timer_state_flag = TIMER_FLAG_REST;
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <enu_timer_state_flag>
			enu_blank_states = BLANK_IN_TURN_ON;
 50e:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <enu_blank_states>
 512:	12 c0       	rjmp	.+36     	; 0x538 <__stack+0x39>
		}

	}
	else if(seqCounter == EIGHT_PRESS)
 514:	88 30       	cpi	r24, 0x08	; 8
 516:	81 f4       	brne	.+32     	; 0x538 <__stack+0x39>
	{
		LED_turn_off(&led0);
 518:	82 e1       	ldi	r24, 0x12	; 18
 51a:	91 e0       	ldi	r25, 0x01	; 1
 51c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_turn_off>
		LED_turn_off(&led1);
 520:	81 e1       	ldi	r24, 0x11	; 17
 522:	91 e0       	ldi	r25, 0x01	; 1
 524:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_turn_off>
		LED_turn_off(&led2);
 528:	80 e1       	ldi	r24, 0x10	; 16
 52a:	91 e0       	ldi	r25, 0x01	; 1
 52c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_turn_off>
		LED_turn_off(&led3);
 530:	8f e0       	ldi	r24, 0x0F	; 15
 532:	91 e0       	ldi	r25, 0x01	; 1
 534:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_turn_off>
	else
	{
		/* Do Nothing */
	}
	
}
 538:	ff 90       	pop	r15
 53a:	ef 90       	pop	r14
 53c:	df 90       	pop	r13
 53e:	cf 90       	pop	r12
 540:	bf 90       	pop	r11
 542:	af 90       	pop	r10
 544:	9f 90       	pop	r9
 546:	8f 90       	pop	r8
 548:	08 95       	ret

0000054a <appmain>:


void appmain(void)
{

	LED_initialize(&led0);
 54a:	82 e1       	ldi	r24, 0x12	; 18
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	0e 94 20 03 	call	0x640	; 0x640 <LED_initialize>
	LED_initialize(&led1);
 552:	81 e1       	ldi	r24, 0x11	; 17
 554:	91 e0       	ldi	r25, 0x01	; 1
 556:	0e 94 20 03 	call	0x640	; 0x640 <LED_initialize>
	LED_initialize(&led2);
 55a:	80 e1       	ldi	r24, 0x10	; 16
 55c:	91 e0       	ldi	r25, 0x01	; 1
 55e:	0e 94 20 03 	call	0x640	; 0x640 <LED_initialize>
	LED_initialize(&led3);
 562:	8f e0       	ldi	r24, 0x0F	; 15
 564:	91 e0       	ldi	r25, 0x01	; 1
 566:	0e 94 20 03 	call	0x640	; 0x640 <LED_initialize>
	EXT_vINTERRUPT_Init(&int2);
 56a:	88 e0       	ldi	r24, 0x08	; 8
 56c:	91 e0       	ldi	r25, 0x01	; 1
 56e:	0e 94 bb 04 	call	0x976	; 0x976 <EXT_vINTERRUPT_Init>
	EXT_INTERRUPT_SetInterruptHandler(&int2);
 572:	88 e0       	ldi	r24, 0x08	; 8
 574:	91 e0       	ldi	r25, 0x01	; 1
 576:	0e 94 51 05 	call	0xaa2	; 0xaa2 <EXT_INTERRUPT_SetInterruptHandler>
	PUSH_BTN_intialize(&btn0);
 57a:	8c e0       	ldi	r24, 0x0C	; 12
 57c:	91 e0       	ldi	r25, 0x01	; 1
 57e:	0e 94 9d 03 	call	0x73a	; 0x73a <PUSH_BTN_intialize>
	TIMER0_init(&timer0);
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	91 e0       	ldi	r25, 0x01	; 1
 586:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <TIMER0_init>
	
	while(1)
	{
		PUSH_BTN_read_state(&btn0,&seq_counter_btn);
 58a:	63 e1       	ldi	r22, 0x13	; 19
 58c:	71 e0       	ldi	r23, 0x01	; 1
 58e:	8c e0       	ldi	r24, 0x0C	; 12
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	0e 94 a4 03 	call	0x748	; 0x748 <PUSH_BTN_read_state>
		if(seq_counter_btn == PUSH_BTN_STATE_PRESSED)
 596:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <seq_counter_btn>
 59a:	88 23       	and	r24, r24
 59c:	39 f0       	breq	.+14     	; 0x5ac <appmain+0x62>
 59e:	0c c0       	rjmp	.+24     	; 0x5b8 <appmain+0x6e>
		{
			while(seq_counter_btn == PUSH_BTN_STATE_PRESSED)
			{
				PUSH_BTN_read_state(&btn0,&seq_counter_btn);
 5a0:	63 e1       	ldi	r22, 0x13	; 19
 5a2:	71 e0       	ldi	r23, 0x01	; 1
 5a4:	8c e0       	ldi	r24, 0x0C	; 12
 5a6:	91 e0       	ldi	r25, 0x01	; 1
 5a8:	0e 94 a4 03 	call	0x748	; 0x748 <PUSH_BTN_read_state>
	while(1)
	{
		PUSH_BTN_read_state(&btn0,&seq_counter_btn);
		if(seq_counter_btn == PUSH_BTN_STATE_PRESSED)
		{
			while(seq_counter_btn == PUSH_BTN_STATE_PRESSED)
 5ac:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <seq_counter_btn>
 5b0:	88 23       	and	r24, r24
 5b2:	b1 f3       	breq	.-20     	; 0x5a0 <appmain+0x56>
			{
				PUSH_BTN_read_state(&btn0,&seq_counter_btn);
			}
			seq_change();
 5b4:	0e 94 77 00 	call	0xee	; 0xee <seq_change>
		}
		
		
		
		if(blankCounter == ONE_PRESS)
 5b8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <blankCounter>
 5bc:	81 30       	cpi	r24, 0x01	; 1
 5be:	59 f4       	brne	.+22     	; 0x5d6 <appmain+0x8c>
		{
			BlinkModes(100,900);
 5c0:	24 e8       	ldi	r18, 0x84	; 132
 5c2:	33 e0       	ldi	r19, 0x03	; 3
 5c4:	40 e0       	ldi	r20, 0x00	; 0
 5c6:	50 e0       	ldi	r21, 0x00	; 0
 5c8:	64 e6       	ldi	r22, 0x64	; 100
 5ca:	70 e0       	ldi	r23, 0x00	; 0
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	0e 94 81 00 	call	0x102	; 0x102 <BlinkModes>
 5d4:	da cf       	rjmp	.-76     	; 0x58a <appmain+0x40>
		}
		else if(blankCounter == TWO_PRESS)
 5d6:	82 30       	cpi	r24, 0x02	; 2
 5d8:	59 f4       	brne	.+22     	; 0x5f0 <appmain+0xa6>
		{
			BlinkModes(200,800);
 5da:	20 e2       	ldi	r18, 0x20	; 32
 5dc:	33 e0       	ldi	r19, 0x03	; 3
 5de:	40 e0       	ldi	r20, 0x00	; 0
 5e0:	50 e0       	ldi	r21, 0x00	; 0
 5e2:	68 ec       	ldi	r22, 0xC8	; 200
 5e4:	70 e0       	ldi	r23, 0x00	; 0
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	0e 94 81 00 	call	0x102	; 0x102 <BlinkModes>
 5ee:	cd cf       	rjmp	.-102    	; 0x58a <appmain+0x40>
			
		}
		else if(blankCounter == THREE_PRESS)
 5f0:	83 30       	cpi	r24, 0x03	; 3
 5f2:	59 f4       	brne	.+22     	; 0x60a <appmain+0xc0>
		{
			BlinkModes(300,700);
 5f4:	2c eb       	ldi	r18, 0xBC	; 188
 5f6:	32 e0       	ldi	r19, 0x02	; 2
 5f8:	40 e0       	ldi	r20, 0x00	; 0
 5fa:	50 e0       	ldi	r21, 0x00	; 0
 5fc:	6c e2       	ldi	r22, 0x2C	; 44
 5fe:	71 e0       	ldi	r23, 0x01	; 1
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	0e 94 81 00 	call	0x102	; 0x102 <BlinkModes>
 608:	c0 cf       	rjmp	.-128    	; 0x58a <appmain+0x40>
			
		}
		else if(blankCounter == FOUR_PRESS)
 60a:	84 30       	cpi	r24, 0x04	; 4
 60c:	59 f4       	brne	.+22     	; 0x624 <appmain+0xda>
		{
			BlinkModes(500,500);
 60e:	24 ef       	ldi	r18, 0xF4	; 244
 610:	31 e0       	ldi	r19, 0x01	; 1
 612:	40 e0       	ldi	r20, 0x00	; 0
 614:	50 e0       	ldi	r21, 0x00	; 0
 616:	64 ef       	ldi	r22, 0xF4	; 244
 618:	71 e0       	ldi	r23, 0x01	; 1
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	0e 94 81 00 	call	0x102	; 0x102 <BlinkModes>
 622:	b3 cf       	rjmp	.-154    	; 0x58a <appmain+0x40>
			
		}
		else if(blankCounter == FIVE_PRESS)
 624:	85 30       	cpi	r24, 0x05	; 5
 626:	09 f0       	breq	.+2      	; 0x62a <appmain+0xe0>
 628:	b0 cf       	rjmp	.-160    	; 0x58a <appmain+0x40>
		{
			BlinkModes(800,200);
 62a:	28 ec       	ldi	r18, 0xC8	; 200
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	40 e0       	ldi	r20, 0x00	; 0
 630:	50 e0       	ldi	r21, 0x00	; 0
 632:	60 e2       	ldi	r22, 0x20	; 32
 634:	73 e0       	ldi	r23, 0x03	; 3
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	0e 94 81 00 	call	0x102	; 0x102 <BlinkModes>
 63e:	a5 cf       	rjmp	.-182    	; 0x58a <appmain+0x40>

00000640 <LED_initialize>:
 */

#include"LED_interface.h"

Std_ReturnType LED_initialize(const ST_led_t *led)
{
 640:	cf 93       	push	r28
 642:	df 93       	push	r29
 644:	1f 92       	push	r1
 646:	cd b7       	in	r28, 0x3d	; 61
 648:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == led)
 64a:	00 97       	sbiw	r24, 0x00	; 0
 64c:	e9 f0       	breq	.+58     	; 0x688 <LED_initialize+0x48>
 64e:	fc 01       	movw	r30, r24
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
		{
			.port = led->port_name,
 650:	20 81       	ld	r18, Z
 652:	92 2f       	mov	r25, r18
 654:	97 70       	andi	r25, 0x07	; 7
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 656:	89 81       	ldd	r24, Y+1	; 0x01
 658:	88 7f       	andi	r24, 0xF8	; 248
 65a:	89 2b       	or	r24, r25
		{
			.port = led->port_name,
			.pin = led->pin,
 65c:	92 2f       	mov	r25, r18
 65e:	96 95       	lsr	r25
 660:	96 95       	lsr	r25
 662:	96 95       	lsr	r25
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 664:	97 70       	andi	r25, 0x07	; 7
 666:	99 0f       	add	r25, r25
 668:	99 0f       	add	r25, r25
 66a:	99 0f       	add	r25, r25
 66c:	87 7c       	andi	r24, 0xC7	; 199
 66e:	89 2b       	or	r24, r25
		{
			.port = led->port_name,
			.pin = led->pin,
			.direction = GPIO_DIRECTION_OUTPUT,
			.logic = led->led_status
 670:	26 fb       	bst	r18, 6
 672:	22 27       	eor	r18, r18
 674:	20 f9       	bld	r18, 0
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 676:	80 64       	ori	r24, 0x40	; 64
 678:	20 fb       	bst	r18, 0
 67a:	87 f9       	bld	r24, 7
 67c:	89 83       	std	Y+1, r24	; 0x01
			.port = led->port_name,
			.pin = led->pin,
			.direction = GPIO_DIRECTION_OUTPUT,
			.logic = led->led_status
		};
		ret = GPIO_pin_intialize(&LED_pin_obj);
 67e:	ce 01       	movw	r24, r28
 680:	01 96       	adiw	r24, 0x01	; 1
 682:	0e 94 8a 04 	call	0x914	; 0x914 <GPIO_pin_intialize>
 686:	01 c0       	rjmp	.+2      	; 0x68a <LED_initialize+0x4a>
Std_ReturnType LED_initialize(const ST_led_t *led)
{
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == led)
	{
		ret = E_NOT_OK;
 688:	80 e0       	ldi	r24, 0x00	; 0
			.logic = led->led_status
		};
		ret = GPIO_pin_intialize(&LED_pin_obj);
	}
	return ret;
}
 68a:	0f 90       	pop	r0
 68c:	df 91       	pop	r29
 68e:	cf 91       	pop	r28
 690:	08 95       	ret

00000692 <LED_turn_on>:
Std_ReturnType LED_turn_on(const ST_led_t *led)
{
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
 696:	1f 92       	push	r1
 698:	cd b7       	in	r28, 0x3d	; 61
 69a:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == led)
 69c:	00 97       	sbiw	r24, 0x00	; 0
 69e:	f1 f0       	breq	.+60     	; 0x6dc <LED_turn_on+0x4a>
 6a0:	fc 01       	movw	r30, r24
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
		{
				.port = led->port_name,
 6a2:	20 81       	ld	r18, Z
 6a4:	92 2f       	mov	r25, r18
 6a6:	97 70       	andi	r25, 0x07	; 7
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 6a8:	89 81       	ldd	r24, Y+1	; 0x01
 6aa:	88 7f       	andi	r24, 0xF8	; 248
 6ac:	89 2b       	or	r24, r25
		{
				.port = led->port_name,
				.pin = led->pin,
 6ae:	92 2f       	mov	r25, r18
 6b0:	96 95       	lsr	r25
 6b2:	96 95       	lsr	r25
 6b4:	96 95       	lsr	r25
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 6b6:	97 70       	andi	r25, 0x07	; 7
 6b8:	99 0f       	add	r25, r25
 6ba:	99 0f       	add	r25, r25
 6bc:	99 0f       	add	r25, r25
 6be:	87 7c       	andi	r24, 0xC7	; 199
 6c0:	89 2b       	or	r24, r25
		{
				.port = led->port_name,
				.pin = led->pin,
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = led->led_status
 6c2:	26 fb       	bst	r18, 6
 6c4:	22 27       	eor	r18, r18
 6c6:	20 f9       	bld	r18, 0
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 6c8:	80 64       	ori	r24, 0x40	; 64
 6ca:	20 fb       	bst	r18, 0
 6cc:	87 f9       	bld	r24, 7
 6ce:	89 83       	std	Y+1, r24	; 0x01
				.port = led->port_name,
				.pin = led->pin,
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = led->led_status
		};
		ret = GPIO_pin_write_logic(&LED_pin_obj , GPIO_LOGIC_HIGH);
 6d0:	61 e0       	ldi	r22, 0x01	; 1
 6d2:	ce 01       	movw	r24, r28
 6d4:	01 96       	adiw	r24, 0x01	; 1
 6d6:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_pin_write_logic>
 6da:	01 c0       	rjmp	.+2      	; 0x6de <LED_turn_on+0x4c>
Std_ReturnType LED_turn_on(const ST_led_t *led)
{
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == led)
	{
		ret = E_NOT_OK;
 6dc:	80 e0       	ldi	r24, 0x00	; 0
				.logic = led->led_status
		};
		ret = GPIO_pin_write_logic(&LED_pin_obj , GPIO_LOGIC_HIGH);
	}
	return ret;
}
 6de:	0f 90       	pop	r0
 6e0:	df 91       	pop	r29
 6e2:	cf 91       	pop	r28
 6e4:	08 95       	ret

000006e6 <LED_turn_off>:
Std_ReturnType LED_turn_off(const ST_led_t *led)
{
 6e6:	cf 93       	push	r28
 6e8:	df 93       	push	r29
 6ea:	1f 92       	push	r1
 6ec:	cd b7       	in	r28, 0x3d	; 61
 6ee:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == led)
 6f0:	00 97       	sbiw	r24, 0x00	; 0
 6f2:	f1 f0       	breq	.+60     	; 0x730 <LED_turn_off+0x4a>
 6f4:	fc 01       	movw	r30, r24
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
		{
				.port = led->port_name,
 6f6:	20 81       	ld	r18, Z
 6f8:	92 2f       	mov	r25, r18
 6fa:	97 70       	andi	r25, 0x07	; 7
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 6fc:	89 81       	ldd	r24, Y+1	; 0x01
 6fe:	88 7f       	andi	r24, 0xF8	; 248
 700:	89 2b       	or	r24, r25
		{
				.port = led->port_name,
				.pin = led->pin,
 702:	92 2f       	mov	r25, r18
 704:	96 95       	lsr	r25
 706:	96 95       	lsr	r25
 708:	96 95       	lsr	r25
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 70a:	97 70       	andi	r25, 0x07	; 7
 70c:	99 0f       	add	r25, r25
 70e:	99 0f       	add	r25, r25
 710:	99 0f       	add	r25, r25
 712:	87 7c       	andi	r24, 0xC7	; 199
 714:	89 2b       	or	r24, r25
		{
				.port = led->port_name,
				.pin = led->pin,
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = led->led_status
 716:	26 fb       	bst	r18, 6
 718:	22 27       	eor	r18, r18
 71a:	20 f9       	bld	r18, 0
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 71c:	80 64       	ori	r24, 0x40	; 64
 71e:	20 fb       	bst	r18, 0
 720:	87 f9       	bld	r24, 7
 722:	89 83       	std	Y+1, r24	; 0x01
				.port = led->port_name,
				.pin = led->pin,
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = led->led_status
		};
		ret = GPIO_pin_write_logic(&LED_pin_obj , GPIO_LOGIC_LOW);
 724:	60 e0       	ldi	r22, 0x00	; 0
 726:	ce 01       	movw	r24, r28
 728:	01 96       	adiw	r24, 0x01	; 1
 72a:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_pin_write_logic>
 72e:	01 c0       	rjmp	.+2      	; 0x732 <LED_turn_off+0x4c>
Std_ReturnType LED_turn_off(const ST_led_t *led)
{
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == led)
	{
		ret = E_NOT_OK;
 730:	80 e0       	ldi	r24, 0x00	; 0
				.logic = led->led_status
		};
		ret = GPIO_pin_write_logic(&LED_pin_obj , GPIO_LOGIC_LOW);
	}
	return ret;
}
 732:	0f 90       	pop	r0
 734:	df 91       	pop	r29
 736:	cf 91       	pop	r28
 738:	08 95       	ret

0000073a <PUSH_BTN_intialize>:
#include"PB_interface.h"

Std_ReturnType PUSH_BTN_intialize(const ST_PUSH_BTN_t *btn)
{
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == btn)
 73a:	00 97       	sbiw	r24, 0x00	; 0
 73c:	19 f0       	breq	.+6      	; 0x744 <PUSH_BTN_intialize+0xa>
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret = GPIO_pin_direction_intialize(&(btn->PUSH_BTN_pin));
 73e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <GPIO_pin_direction_intialize>
 742:	08 95       	ret
Std_ReturnType PUSH_BTN_intialize(const ST_PUSH_BTN_t *btn)
{
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == btn)
	{
		ret = E_NOT_OK;
 744:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ret = GPIO_pin_direction_intialize(&(btn->PUSH_BTN_pin));
	}
	return ret;
}
 746:	08 95       	ret

00000748 <PUSH_BTN_read_state>:

Std_ReturnType PUSH_BTN_read_state(const ST_PUSH_BTN_t *btn , EN_PUSH_BTN_state_t *btn_state)
{
 748:	ef 92       	push	r14
 74a:	ff 92       	push	r15
 74c:	0f 93       	push	r16
 74e:	1f 93       	push	r17
 750:	cf 93       	push	r28
 752:	df 93       	push	r29
 754:	1f 92       	push	r1
 756:	cd b7       	in	r28, 0x3d	; 61
 758:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == btn || PTR_NULL == btn_state )
 75a:	00 97       	sbiw	r24, 0x00	; 0
 75c:	29 f1       	breq	.+74     	; 0x7a8 <PUSH_BTN_read_state+0x60>
 75e:	61 15       	cp	r22, r1
 760:	71 05       	cpc	r23, r1
 762:	21 f1       	breq	.+72     	; 0x7ac <PUSH_BTN_read_state+0x64>
 764:	7b 01       	movw	r14, r22
 766:	8c 01       	movw	r16, r24
	{
		ret = E_NOT_OK;
	}
	else
	{
		EN_logic_t pin_logic_status = GPIO_LOGIC_LOW;
 768:	19 82       	std	Y+1, r1	; 0x01
		ret = GPIO_pin_read_logic(&(btn->PUSH_BTN_pin) , &pin_logic_status);
 76a:	be 01       	movw	r22, r28
 76c:	6f 5f       	subi	r22, 0xFF	; 255
 76e:	7f 4f       	sbci	r23, 0xFF	; 255
 770:	0e 94 65 04 	call	0x8ca	; 0x8ca <GPIO_pin_read_logic>
		if(PUSH_BTN_PULL_UP == btn->PUSH_BTN_connection)
 774:	f8 01       	movw	r30, r16
 776:	82 81       	ldd	r24, Z+2	; 0x02
 778:	81 11       	cpse	r24, r1
 77a:	09 c0       	rjmp	.+18     	; 0x78e <PUSH_BTN_read_state+0x46>
		{
			if(GPIO_LOGIC_HIGH == pin_logic_status)
 77c:	89 81       	ldd	r24, Y+1	; 0x01
 77e:	81 30       	cpi	r24, 0x01	; 1
 780:	19 f4       	brne	.+6      	; 0x788 <PUSH_BTN_read_state+0x40>
			{
				*btn_state = PUSH_BTN_STATE_RELEASED;
 782:	f7 01       	movw	r30, r14
 784:	80 83       	st	Z, r24
 786:	0e c0       	rjmp	.+28     	; 0x7a4 <PUSH_BTN_read_state+0x5c>
			}
			else
			{
				*btn_state = PUSH_BTN_STATE_PRESSED;
 788:	f7 01       	movw	r30, r14
 78a:	10 82       	st	Z, r1
 78c:	0b c0       	rjmp	.+22     	; 0x7a4 <PUSH_BTN_read_state+0x5c>
			}
		}
		else if(PUSH_BTN_PULL_DOWN == btn->PUSH_BTN_connection)
 78e:	81 30       	cpi	r24, 0x01	; 1
 790:	49 f4       	brne	.+18     	; 0x7a4 <PUSH_BTN_read_state+0x5c>
		{
			if(GPIO_LOGIC_HIGH == pin_logic_status)
 792:	89 81       	ldd	r24, Y+1	; 0x01
 794:	81 30       	cpi	r24, 0x01	; 1
 796:	19 f4       	brne	.+6      	; 0x79e <PUSH_BTN_read_state+0x56>
			{
				*btn_state = PUSH_BTN_STATE_PRESSED;
 798:	f7 01       	movw	r30, r14
 79a:	10 82       	st	Z, r1
 79c:	03 c0       	rjmp	.+6      	; 0x7a4 <PUSH_BTN_read_state+0x5c>
			}
			else
			{
				*btn_state = PUSH_BTN_STATE_RELEASED;
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	f7 01       	movw	r30, r14
 7a2:	80 83       	st	Z, r24
			}
		}
		else{/* nothing */}
		ret = E_OK;
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	03 c0       	rjmp	.+6      	; 0x7ae <PUSH_BTN_read_state+0x66>
Std_ReturnType PUSH_BTN_read_state(const ST_PUSH_BTN_t *btn , EN_PUSH_BTN_state_t *btn_state)
{
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == btn || PTR_NULL == btn_state )
	{
		ret = E_NOT_OK;
 7a8:	80 e0       	ldi	r24, 0x00	; 0
 7aa:	01 c0       	rjmp	.+2      	; 0x7ae <PUSH_BTN_read_state+0x66>
 7ac:	80 e0       	ldi	r24, 0x00	; 0
		else{/* nothing */}
		ret = E_OK;
	}

	return ret;
}
 7ae:	0f 90       	pop	r0
 7b0:	df 91       	pop	r29
 7b2:	cf 91       	pop	r28
 7b4:	1f 91       	pop	r17
 7b6:	0f 91       	pop	r16
 7b8:	ff 90       	pop	r15
 7ba:	ef 90       	pop	r14
 7bc:	08 95       	ret

000007be <main>:

#include "APPLICATION/app.h"

int main(void)
{
	appmain();
 7be:	0e 94 a5 02 	call	0x54a	; 0x54a <appmain>
	return 0;
}
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	08 95       	ret

000007c8 <GPIO_pin_direction_intialize>:
       TOGGLE_BIT(*port_registers[_pin_config->port],_pin_config->pin);
       ret = E_OK;
    }

    return ret;
}
 7c8:	fc 01       	movw	r30, r24
 7ca:	89 2b       	or	r24, r25
 7cc:	d1 f1       	breq	.+116    	; 0x842 <GPIO_pin_direction_intialize+0x7a>
 7ce:	20 81       	ld	r18, Z
 7d0:	26 95       	lsr	r18
 7d2:	26 95       	lsr	r18
 7d4:	26 95       	lsr	r18
 7d6:	27 70       	andi	r18, 0x07	; 7
 7d8:	80 81       	ld	r24, Z
 7da:	86 fb       	bst	r24, 6
 7dc:	99 27       	eor	r25, r25
 7de:	90 f9       	bld	r25, 0
 7e0:	86 ff       	sbrs	r24, 6
 7e2:	18 c0       	rjmp	.+48     	; 0x814 <GPIO_pin_direction_intialize+0x4c>
 7e4:	91 30       	cpi	r25, 0x01	; 1
 7e6:	79 f5       	brne	.+94     	; 0x846 <GPIO_pin_direction_intialize+0x7e>
 7e8:	e8 2f       	mov	r30, r24
 7ea:	e7 70       	andi	r30, 0x07	; 7
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	ee 0f       	add	r30, r30
 7f0:	ff 1f       	adc	r31, r31
 7f2:	ea 5d       	subi	r30, 0xDA	; 218
 7f4:	fe 4f       	sbci	r31, 0xFE	; 254
 7f6:	01 90       	ld	r0, Z+
 7f8:	f0 81       	ld	r31, Z
 7fa:	e0 2d       	mov	r30, r0
 7fc:	30 81       	ld	r19, Z
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	02 c0       	rjmp	.+4      	; 0x808 <GPIO_pin_direction_intialize+0x40>
 804:	88 0f       	add	r24, r24
 806:	99 1f       	adc	r25, r25
 808:	2a 95       	dec	r18
 80a:	e2 f7       	brpl	.-8      	; 0x804 <GPIO_pin_direction_intialize+0x3c>
 80c:	83 2b       	or	r24, r19
 80e:	80 83       	st	Z, r24
 810:	81 e0       	ldi	r24, 0x01	; 1
 812:	08 95       	ret
 814:	e0 81       	ld	r30, Z
 816:	e7 70       	andi	r30, 0x07	; 7
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	ee 0f       	add	r30, r30
 81c:	ff 1f       	adc	r31, r31
 81e:	ea 5d       	subi	r30, 0xDA	; 218
 820:	fe 4f       	sbci	r31, 0xFE	; 254
 822:	01 90       	ld	r0, Z+
 824:	f0 81       	ld	r31, Z
 826:	e0 2d       	mov	r30, r0
 828:	30 81       	ld	r19, Z
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	02 c0       	rjmp	.+4      	; 0x834 <GPIO_pin_direction_intialize+0x6c>
 830:	88 0f       	add	r24, r24
 832:	99 1f       	adc	r25, r25
 834:	2a 95       	dec	r18
 836:	e2 f7       	brpl	.-8      	; 0x830 <GPIO_pin_direction_intialize+0x68>
 838:	80 95       	com	r24
 83a:	83 23       	and	r24, r19
 83c:	80 83       	st	Z, r24
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	08 95       	ret
 842:	80 e0       	ldi	r24, 0x00	; 0
 844:	08 95       	ret
 846:	80 e0       	ldi	r24, 0x00	; 0
 848:	08 95       	ret

0000084a <GPIO_pin_write_logic>:
 84a:	00 97       	sbiw	r24, 0x00	; 0
 84c:	d1 f1       	breq	.+116    	; 0x8c2 <GPIO_pin_write_logic+0x78>
 84e:	dc 01       	movw	r26, r24
 850:	2c 91       	ld	r18, X
 852:	26 95       	lsr	r18
 854:	26 95       	lsr	r18
 856:	26 95       	lsr	r18
 858:	27 70       	andi	r18, 0x07	; 7
 85a:	66 23       	and	r22, r22
 85c:	19 f0       	breq	.+6      	; 0x864 <GPIO_pin_write_logic+0x1a>
 85e:	61 30       	cpi	r22, 0x01	; 1
 860:	c9 f0       	breq	.+50     	; 0x894 <GPIO_pin_write_logic+0x4a>
 862:	31 c0       	rjmp	.+98     	; 0x8c6 <GPIO_pin_write_logic+0x7c>
 864:	dc 01       	movw	r26, r24
 866:	ec 91       	ld	r30, X
 868:	e7 70       	andi	r30, 0x07	; 7
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	ee 0f       	add	r30, r30
 86e:	ff 1f       	adc	r31, r31
 870:	e2 5e       	subi	r30, 0xE2	; 226
 872:	fe 4f       	sbci	r31, 0xFE	; 254
 874:	01 90       	ld	r0, Z+
 876:	f0 81       	ld	r31, Z
 878:	e0 2d       	mov	r30, r0
 87a:	30 81       	ld	r19, Z
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	02 c0       	rjmp	.+4      	; 0x886 <GPIO_pin_write_logic+0x3c>
 882:	88 0f       	add	r24, r24
 884:	99 1f       	adc	r25, r25
 886:	2a 95       	dec	r18
 888:	e2 f7       	brpl	.-8      	; 0x882 <GPIO_pin_write_logic+0x38>
 88a:	80 95       	com	r24
 88c:	83 23       	and	r24, r19
 88e:	80 83       	st	Z, r24
 890:	81 e0       	ldi	r24, 0x01	; 1
 892:	08 95       	ret
 894:	dc 01       	movw	r26, r24
 896:	ec 91       	ld	r30, X
 898:	e7 70       	andi	r30, 0x07	; 7
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	ee 0f       	add	r30, r30
 89e:	ff 1f       	adc	r31, r31
 8a0:	e2 5e       	subi	r30, 0xE2	; 226
 8a2:	fe 4f       	sbci	r31, 0xFE	; 254
 8a4:	01 90       	ld	r0, Z+
 8a6:	f0 81       	ld	r31, Z
 8a8:	e0 2d       	mov	r30, r0
 8aa:	30 81       	ld	r19, Z
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <GPIO_pin_write_logic+0x6c>
 8b2:	88 0f       	add	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	2a 95       	dec	r18
 8b8:	e2 f7       	brpl	.-8      	; 0x8b2 <GPIO_pin_write_logic+0x68>
 8ba:	83 2b       	or	r24, r19
 8bc:	80 83       	st	Z, r24
 8be:	81 e0       	ldi	r24, 0x01	; 1
 8c0:	08 95       	ret
 8c2:	80 e0       	ldi	r24, 0x00	; 0
 8c4:	08 95       	ret
 8c6:	80 e0       	ldi	r24, 0x00	; 0
 8c8:	08 95       	ret

000008ca <GPIO_pin_read_logic>:
 8ca:	00 97       	sbiw	r24, 0x00	; 0
 8cc:	f9 f0       	breq	.+62     	; 0x90c <GPIO_pin_read_logic+0x42>
 8ce:	61 15       	cp	r22, r1
 8d0:	71 05       	cpc	r23, r1
 8d2:	f1 f0       	breq	.+60     	; 0x910 <GPIO_pin_read_logic+0x46>
 8d4:	dc 01       	movw	r26, r24
 8d6:	2c 91       	ld	r18, X
 8d8:	26 95       	lsr	r18
 8da:	26 95       	lsr	r18
 8dc:	26 95       	lsr	r18
 8de:	27 70       	andi	r18, 0x07	; 7
 8e0:	ec 91       	ld	r30, X
 8e2:	e7 70       	andi	r30, 0x07	; 7
 8e4:	f0 e0       	ldi	r31, 0x00	; 0
 8e6:	ee 0f       	add	r30, r30
 8e8:	ff 1f       	adc	r31, r31
 8ea:	ea 5e       	subi	r30, 0xEA	; 234
 8ec:	fe 4f       	sbci	r31, 0xFE	; 254
 8ee:	01 90       	ld	r0, Z+
 8f0:	f0 81       	ld	r31, Z
 8f2:	e0 2d       	mov	r30, r0
 8f4:	80 81       	ld	r24, Z
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	02 c0       	rjmp	.+4      	; 0x8fe <GPIO_pin_read_logic+0x34>
 8fa:	95 95       	asr	r25
 8fc:	87 95       	ror	r24
 8fe:	2a 95       	dec	r18
 900:	e2 f7       	brpl	.-8      	; 0x8fa <GPIO_pin_read_logic+0x30>
 902:	81 70       	andi	r24, 0x01	; 1
 904:	fb 01       	movw	r30, r22
 906:	80 83       	st	Z, r24
 908:	81 e0       	ldi	r24, 0x01	; 1
 90a:	08 95       	ret
 90c:	80 e0       	ldi	r24, 0x00	; 0
 90e:	08 95       	ret
 910:	80 e0       	ldi	r24, 0x00	; 0
 912:	08 95       	ret

00000914 <GPIO_pin_intialize>:
Std_ReturnType GPIO_pin_intialize(const ST_pin_config_t *_pin_config)
{
 914:	cf 93       	push	r28
 916:	df 93       	push	r29
    Std_ReturnType ret = E_NOT_OK;

    if(PTR_NULL == _pin_config)
 918:	00 97       	sbiw	r24, 0x00	; 0
 91a:	59 f0       	breq	.+22     	; 0x932 <GPIO_pin_intialize+0x1e>
 91c:	ec 01       	movw	r28, r24
    {
        ret = E_NOT_OK;
    }
    else
    {
       ret = GPIO_pin_direction_intialize(_pin_config);
 91e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <GPIO_pin_direction_intialize>
       ret = GPIO_pin_write_logic(_pin_config,_pin_config->logic);
 922:	68 81       	ld	r22, Y
 924:	67 fb       	bst	r22, 7
 926:	66 27       	eor	r22, r22
 928:	60 f9       	bld	r22, 0
 92a:	ce 01       	movw	r24, r28
 92c:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_pin_write_logic>
 930:	01 c0       	rjmp	.+2      	; 0x934 <GPIO_pin_intialize+0x20>
{
    Std_ReturnType ret = E_NOT_OK;

    if(PTR_NULL == _pin_config)
    {
        ret = E_NOT_OK;
 932:	80 e0       	ldi	r24, 0x00	; 0
    {
       ret = GPIO_pin_direction_intialize(_pin_config);
       ret = GPIO_pin_write_logic(_pin_config,_pin_config->logic);
    }
    return ret;
}
 934:	df 91       	pop	r29
 936:	cf 91       	pop	r28
 938:	08 95       	ret

0000093a <EXT0_INTERRUPT_SetInterruptHandler>:
			break;
		}
		}
	}
	return ret;
}
 93a:	00 97       	sbiw	r24, 0x00	; 0
 93c:	31 f0       	breq	.+12     	; 0x94a <EXT0_INTERRUPT_SetInterruptHandler+0x10>
 93e:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <INT0_InterruptHandler+0x1>
 942:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <INT0_InterruptHandler>
 946:	81 e0       	ldi	r24, 0x01	; 1
 948:	08 95       	ret
 94a:	80 e0       	ldi	r24, 0x00	; 0
 94c:	08 95       	ret

0000094e <EXT1_INTERRUPT_SetInterruptHandler>:
 94e:	00 97       	sbiw	r24, 0x00	; 0
 950:	31 f0       	breq	.+12     	; 0x95e <EXT1_INTERRUPT_SetInterruptHandler+0x10>
 952:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <INT1_InterruptHandler+0x1>
 956:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <INT1_InterruptHandler>
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	08 95       	ret
 95e:	80 e0       	ldi	r24, 0x00	; 0
 960:	08 95       	ret

00000962 <EXT2_INTERRUPT_SetInterruptHandler>:
 962:	00 97       	sbiw	r24, 0x00	; 0
 964:	31 f0       	breq	.+12     	; 0x972 <EXT2_INTERRUPT_SetInterruptHandler+0x10>
 966:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <INT2_InterruptHandler+0x1>
 96a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <INT2_InterruptHandler>
 96e:	81 e0       	ldi	r24, 0x01	; 1
 970:	08 95       	ret
 972:	80 e0       	ldi	r24, 0x00	; 0
 974:	08 95       	ret

00000976 <EXT_vINTERRUPT_Init>:
 976:	00 97       	sbiw	r24, 0x00	; 0
 978:	09 f4       	brne	.+2      	; 0x97c <EXT_vINTERRUPT_Init+0x6>
 97a:	89 c0       	rjmp	.+274    	; 0xa8e <EXT_vINTERRUPT_Init+0x118>
 97c:	fc 01       	movw	r30, r24
 97e:	82 81       	ldd	r24, Z+2	; 0x02
 980:	81 30       	cpi	r24, 0x01	; 1
 982:	c9 f1       	breq	.+114    	; 0x9f6 <EXT_vINTERRUPT_Init+0x80>
 984:	20 f0       	brcs	.+8      	; 0x98e <EXT_vINTERRUPT_Init+0x18>
 986:	82 30       	cpi	r24, 0x02	; 2
 988:	09 f4       	brne	.+2      	; 0x98c <EXT_vINTERRUPT_Init+0x16>
 98a:	68 c0       	rjmp	.+208    	; 0xa5c <EXT_vINTERRUPT_Init+0xe6>
 98c:	82 c0       	rjmp	.+260    	; 0xa92 <EXT_vINTERRUPT_Init+0x11c>
 98e:	83 81       	ldd	r24, Z+3	; 0x03
 990:	81 11       	cpse	r24, r1
 992:	0a c0       	rjmp	.+20     	; 0x9a8 <EXT_vINTERRUPT_Init+0x32>
 994:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <MCU_vEnableInterrupt>
 998:	8b b7       	in	r24, 0x3b	; 59
 99a:	80 64       	ori	r24, 0x40	; 64
 99c:	8b bf       	out	0x3b, r24	; 59
 99e:	85 b7       	in	r24, 0x35	; 53
 9a0:	8c 7f       	andi	r24, 0xFC	; 252
 9a2:	85 bf       	out	0x35, r24	; 53
 9a4:	81 e0       	ldi	r24, 0x01	; 1
 9a6:	08 95       	ret
 9a8:	81 30       	cpi	r24, 0x01	; 1
 9aa:	59 f4       	brne	.+22     	; 0x9c2 <EXT_vINTERRUPT_Init+0x4c>
 9ac:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <MCU_vEnableInterrupt>
 9b0:	8b b7       	in	r24, 0x3b	; 59
 9b2:	80 64       	ori	r24, 0x40	; 64
 9b4:	8b bf       	out	0x3b, r24	; 59
 9b6:	85 b7       	in	r24, 0x35	; 53
 9b8:	8d 7f       	andi	r24, 0xFD	; 253
 9ba:	81 60       	ori	r24, 0x01	; 1
 9bc:	85 bf       	out	0x35, r24	; 53
 9be:	81 e0       	ldi	r24, 0x01	; 1
 9c0:	08 95       	ret
 9c2:	82 30       	cpi	r24, 0x02	; 2
 9c4:	59 f4       	brne	.+22     	; 0x9dc <EXT_vINTERRUPT_Init+0x66>
 9c6:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <MCU_vEnableInterrupt>
 9ca:	8b b7       	in	r24, 0x3b	; 59
 9cc:	80 64       	ori	r24, 0x40	; 64
 9ce:	8b bf       	out	0x3b, r24	; 59
 9d0:	85 b7       	in	r24, 0x35	; 53
 9d2:	82 60       	ori	r24, 0x02	; 2
 9d4:	8e 7f       	andi	r24, 0xFE	; 254
 9d6:	85 bf       	out	0x35, r24	; 53
 9d8:	81 e0       	ldi	r24, 0x01	; 1
 9da:	08 95       	ret
 9dc:	83 30       	cpi	r24, 0x03	; 3
 9de:	09 f0       	breq	.+2      	; 0x9e2 <EXT_vINTERRUPT_Init+0x6c>
 9e0:	5a c0       	rjmp	.+180    	; 0xa96 <EXT_vINTERRUPT_Init+0x120>
 9e2:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <MCU_vEnableInterrupt>
 9e6:	8b b7       	in	r24, 0x3b	; 59
 9e8:	80 64       	ori	r24, 0x40	; 64
 9ea:	8b bf       	out	0x3b, r24	; 59
 9ec:	85 b7       	in	r24, 0x35	; 53
 9ee:	83 60       	ori	r24, 0x03	; 3
 9f0:	85 bf       	out	0x35, r24	; 53
 9f2:	81 e0       	ldi	r24, 0x01	; 1
 9f4:	08 95       	ret
 9f6:	83 81       	ldd	r24, Z+3	; 0x03
 9f8:	81 11       	cpse	r24, r1
 9fa:	0a c0       	rjmp	.+20     	; 0xa10 <EXT_vINTERRUPT_Init+0x9a>
 9fc:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <MCU_vEnableInterrupt>
 a00:	8b b7       	in	r24, 0x3b	; 59
 a02:	80 68       	ori	r24, 0x80	; 128
 a04:	8b bf       	out	0x3b, r24	; 59
 a06:	85 b7       	in	r24, 0x35	; 53
 a08:	83 7f       	andi	r24, 0xF3	; 243
 a0a:	85 bf       	out	0x35, r24	; 53
 a0c:	81 e0       	ldi	r24, 0x01	; 1
 a0e:	08 95       	ret
 a10:	81 30       	cpi	r24, 0x01	; 1
 a12:	59 f4       	brne	.+22     	; 0xa2a <EXT_vINTERRUPT_Init+0xb4>
 a14:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <MCU_vEnableInterrupt>
 a18:	8b b7       	in	r24, 0x3b	; 59
 a1a:	80 68       	ori	r24, 0x80	; 128
 a1c:	8b bf       	out	0x3b, r24	; 59
 a1e:	85 b7       	in	r24, 0x35	; 53
 a20:	87 7f       	andi	r24, 0xF7	; 247
 a22:	84 60       	ori	r24, 0x04	; 4
 a24:	85 bf       	out	0x35, r24	; 53
 a26:	81 e0       	ldi	r24, 0x01	; 1
 a28:	08 95       	ret
 a2a:	82 30       	cpi	r24, 0x02	; 2
 a2c:	59 f4       	brne	.+22     	; 0xa44 <EXT_vINTERRUPT_Init+0xce>
 a2e:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <MCU_vEnableInterrupt>
 a32:	8b b7       	in	r24, 0x3b	; 59
 a34:	80 68       	ori	r24, 0x80	; 128
 a36:	8b bf       	out	0x3b, r24	; 59
 a38:	85 b7       	in	r24, 0x35	; 53
 a3a:	88 60       	ori	r24, 0x08	; 8
 a3c:	8b 7f       	andi	r24, 0xFB	; 251
 a3e:	85 bf       	out	0x35, r24	; 53
 a40:	81 e0       	ldi	r24, 0x01	; 1
 a42:	08 95       	ret
 a44:	83 30       	cpi	r24, 0x03	; 3
 a46:	49 f5       	brne	.+82     	; 0xa9a <EXT_vINTERRUPT_Init+0x124>
 a48:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <MCU_vEnableInterrupt>
 a4c:	8b b7       	in	r24, 0x3b	; 59
 a4e:	80 68       	ori	r24, 0x80	; 128
 a50:	8b bf       	out	0x3b, r24	; 59
 a52:	85 b7       	in	r24, 0x35	; 53
 a54:	8c 60       	ori	r24, 0x0C	; 12
 a56:	85 bf       	out	0x35, r24	; 53
 a58:	81 e0       	ldi	r24, 0x01	; 1
 a5a:	08 95       	ret
 a5c:	83 81       	ldd	r24, Z+3	; 0x03
 a5e:	82 30       	cpi	r24, 0x02	; 2
 a60:	51 f4       	brne	.+20     	; 0xa76 <EXT_vINTERRUPT_Init+0x100>
 a62:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <MCU_vEnableInterrupt>
 a66:	8b b7       	in	r24, 0x3b	; 59
 a68:	80 62       	ori	r24, 0x20	; 32
 a6a:	8b bf       	out	0x3b, r24	; 59
 a6c:	84 b7       	in	r24, 0x34	; 52
 a6e:	8f 7b       	andi	r24, 0xBF	; 191
 a70:	84 bf       	out	0x34, r24	; 52
 a72:	81 e0       	ldi	r24, 0x01	; 1
 a74:	08 95       	ret
 a76:	83 30       	cpi	r24, 0x03	; 3
 a78:	91 f4       	brne	.+36     	; 0xa9e <EXT_vINTERRUPT_Init+0x128>
 a7a:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <MCU_vEnableInterrupt>
 a7e:	8b b7       	in	r24, 0x3b	; 59
 a80:	80 62       	ori	r24, 0x20	; 32
 a82:	8b bf       	out	0x3b, r24	; 59
 a84:	84 b7       	in	r24, 0x34	; 52
 a86:	80 64       	ori	r24, 0x40	; 64
 a88:	84 bf       	out	0x34, r24	; 52
 a8a:	81 e0       	ldi	r24, 0x01	; 1
 a8c:	08 95       	ret
 a8e:	80 e0       	ldi	r24, 0x00	; 0
 a90:	08 95       	ret
 a92:	80 e0       	ldi	r24, 0x00	; 0
 a94:	08 95       	ret
 a96:	80 e0       	ldi	r24, 0x00	; 0
 a98:	08 95       	ret
 a9a:	80 e0       	ldi	r24, 0x00	; 0
 a9c:	08 95       	ret
 a9e:	80 e0       	ldi	r24, 0x00	; 0
 aa0:	08 95       	ret

00000aa2 <EXT_INTERRUPT_SetInterruptHandler>:

Std_ReturnType EXT_INTERRUPT_SetInterruptHandler(const ST_EXT_INTERRUPTS_CFG *EXT_INTx)
{

    Std_ReturnType ret = E_NOT_OK;
    if(PTR_NULL == EXT_INTx)
 aa2:	00 97       	sbiw	r24, 0x00	; 0
 aa4:	b9 f0       	breq	.+46     	; 0xad4 <EXT_INTERRUPT_SetInterruptHandler+0x32>
 aa6:	fc 01       	movw	r30, r24
    {
        ret = E_NOT_OK;
    }
    else
    {
       switch(EXT_INTx->EXTERNAL_INTERRUPRT_Number)
 aa8:	82 81       	ldd	r24, Z+2	; 0x02
 aaa:	81 30       	cpi	r24, 0x01	; 1
 aac:	49 f0       	breq	.+18     	; 0xac0 <EXT_INTERRUPT_SetInterruptHandler+0x1e>
 aae:	18 f0       	brcs	.+6      	; 0xab6 <EXT_INTERRUPT_SetInterruptHandler+0x14>
 ab0:	82 30       	cpi	r24, 0x02	; 2
 ab2:	59 f0       	breq	.+22     	; 0xaca <EXT_INTERRUPT_SetInterruptHandler+0x28>
 ab4:	11 c0       	rjmp	.+34     	; 0xad8 <EXT_INTERRUPT_SetInterruptHandler+0x36>
        {
           case EXT0_INTERRUPTS:
            {
                ret = EXT0_INTERRUPT_SetInterruptHandler(EXT_INTx->INTERRUPT_EXTERNAL_HANDLER);
 ab6:	80 81       	ld	r24, Z
 ab8:	91 81       	ldd	r25, Z+1	; 0x01
 aba:	0e 94 9d 04 	call	0x93a	; 0x93a <EXT0_INTERRUPT_SetInterruptHandler>
                break;
 abe:	08 95       	ret
            }
           case EXT1_INTERRUPTS:
            {
                ret = EXT1_INTERRUPT_SetInterruptHandler(EXT_INTx->INTERRUPT_EXTERNAL_HANDLER);
 ac0:	80 81       	ld	r24, Z
 ac2:	91 81       	ldd	r25, Z+1	; 0x01
 ac4:	0e 94 a7 04 	call	0x94e	; 0x94e <EXT1_INTERRUPT_SetInterruptHandler>
                break;
 ac8:	08 95       	ret
            }
           case EXT2_INTERRUPTS:
            {
                ret = EXT2_INTERRUPT_SetInterruptHandler(EXT_INTx->INTERRUPT_EXTERNAL_HANDLER);
 aca:	80 81       	ld	r24, Z
 acc:	91 81       	ldd	r25, Z+1	; 0x01
 ace:	0e 94 b1 04 	call	0x962	; 0x962 <EXT2_INTERRUPT_SetInterruptHandler>
                break;
 ad2:	08 95       	ret
{

    Std_ReturnType ret = E_NOT_OK;
    if(PTR_NULL == EXT_INTx)
    {
        ret = E_NOT_OK;
 ad4:	80 e0       	ldi	r24, 0x00	; 0
 ad6:	08 95       	ret
}

Std_ReturnType EXT_INTERRUPT_SetInterruptHandler(const ST_EXT_INTERRUPTS_CFG *EXT_INTx)
{

    Std_ReturnType ret = E_NOT_OK;
 ad8:	80 e0       	ldi	r24, 0x00	; 0
                break;
            }
        }
    }
    return ret;
}
 ada:	08 95       	ret

00000adc <__vector_1>:



ISR(EXT_INT_0)
{
 adc:	1f 92       	push	r1
 ade:	0f 92       	push	r0
 ae0:	0f b6       	in	r0, 0x3f	; 63
 ae2:	0f 92       	push	r0
 ae4:	11 24       	eor	r1, r1
 ae6:	2f 93       	push	r18
 ae8:	3f 93       	push	r19
 aea:	4f 93       	push	r20
 aec:	5f 93       	push	r21
 aee:	6f 93       	push	r22
 af0:	7f 93       	push	r23
 af2:	8f 93       	push	r24
 af4:	9f 93       	push	r25
 af6:	af 93       	push	r26
 af8:	bf 93       	push	r27
 afa:	ef 93       	push	r30
 afc:	ff 93       	push	r31
	INT0_InterruptHandler();
 afe:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <INT0_InterruptHandler>
 b02:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <INT0_InterruptHandler+0x1>
 b06:	09 95       	icall
}
 b08:	ff 91       	pop	r31
 b0a:	ef 91       	pop	r30
 b0c:	bf 91       	pop	r27
 b0e:	af 91       	pop	r26
 b10:	9f 91       	pop	r25
 b12:	8f 91       	pop	r24
 b14:	7f 91       	pop	r23
 b16:	6f 91       	pop	r22
 b18:	5f 91       	pop	r21
 b1a:	4f 91       	pop	r20
 b1c:	3f 91       	pop	r19
 b1e:	2f 91       	pop	r18
 b20:	0f 90       	pop	r0
 b22:	0f be       	out	0x3f, r0	; 63
 b24:	0f 90       	pop	r0
 b26:	1f 90       	pop	r1
 b28:	18 95       	reti

00000b2a <__vector_2>:
ISR(EXT_INT_1)
{
 b2a:	1f 92       	push	r1
 b2c:	0f 92       	push	r0
 b2e:	0f b6       	in	r0, 0x3f	; 63
 b30:	0f 92       	push	r0
 b32:	11 24       	eor	r1, r1
 b34:	2f 93       	push	r18
 b36:	3f 93       	push	r19
 b38:	4f 93       	push	r20
 b3a:	5f 93       	push	r21
 b3c:	6f 93       	push	r22
 b3e:	7f 93       	push	r23
 b40:	8f 93       	push	r24
 b42:	9f 93       	push	r25
 b44:	af 93       	push	r26
 b46:	bf 93       	push	r27
 b48:	ef 93       	push	r30
 b4a:	ff 93       	push	r31
	INT1_InterruptHandler();
 b4c:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <INT1_InterruptHandler>
 b50:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <INT1_InterruptHandler+0x1>
 b54:	09 95       	icall
}
 b56:	ff 91       	pop	r31
 b58:	ef 91       	pop	r30
 b5a:	bf 91       	pop	r27
 b5c:	af 91       	pop	r26
 b5e:	9f 91       	pop	r25
 b60:	8f 91       	pop	r24
 b62:	7f 91       	pop	r23
 b64:	6f 91       	pop	r22
 b66:	5f 91       	pop	r21
 b68:	4f 91       	pop	r20
 b6a:	3f 91       	pop	r19
 b6c:	2f 91       	pop	r18
 b6e:	0f 90       	pop	r0
 b70:	0f be       	out	0x3f, r0	; 63
 b72:	0f 90       	pop	r0
 b74:	1f 90       	pop	r1
 b76:	18 95       	reti

00000b78 <__vector_3>:
ISR(EXT_INT_2)
{
 b78:	1f 92       	push	r1
 b7a:	0f 92       	push	r0
 b7c:	0f b6       	in	r0, 0x3f	; 63
 b7e:	0f 92       	push	r0
 b80:	11 24       	eor	r1, r1
 b82:	2f 93       	push	r18
 b84:	3f 93       	push	r19
 b86:	4f 93       	push	r20
 b88:	5f 93       	push	r21
 b8a:	6f 93       	push	r22
 b8c:	7f 93       	push	r23
 b8e:	8f 93       	push	r24
 b90:	9f 93       	push	r25
 b92:	af 93       	push	r26
 b94:	bf 93       	push	r27
 b96:	ef 93       	push	r30
 b98:	ff 93       	push	r31
	INT2_InterruptHandler();
 b9a:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <INT2_InterruptHandler>
 b9e:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <INT2_InterruptHandler+0x1>
 ba2:	09 95       	icall
}
 ba4:	ff 91       	pop	r31
 ba6:	ef 91       	pop	r30
 ba8:	bf 91       	pop	r27
 baa:	af 91       	pop	r26
 bac:	9f 91       	pop	r25
 bae:	8f 91       	pop	r24
 bb0:	7f 91       	pop	r23
 bb2:	6f 91       	pop	r22
 bb4:	5f 91       	pop	r21
 bb6:	4f 91       	pop	r20
 bb8:	3f 91       	pop	r19
 bba:	2f 91       	pop	r18
 bbc:	0f 90       	pop	r0
 bbe:	0f be       	out	0x3f, r0	; 63
 bc0:	0f 90       	pop	r0
 bc2:	1f 90       	pop	r1
 bc4:	18 95       	reti

00000bc6 <MCU_vEnableInterrupt>:

#include"MCU_Interface.h"

void MCU_vEnableInterrupt(void)
{
	SET_BIT(SREG_REG,7);
 bc6:	8f b7       	in	r24, 0x3f	; 63
 bc8:	80 68       	ori	r24, 0x80	; 128
 bca:	8f bf       	out	0x3f, r24	; 63
 bcc:	08 95       	ret

00000bce <timer0_set_ovf_isr>:
	

	while(g_u64_polling_counter != 1);
	g_u64_polling_counter = 0;
	
}
 bce:	00 97       	sbiw	r24, 0x00	; 0
 bd0:	31 f0       	breq	.+12     	; 0xbde <timer0_set_ovf_isr+0x10>
 bd2:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <ptr_func_overflow_isr+0x1>
 bd6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <ptr_func_overflow_isr>
 bda:	8b e0       	ldi	r24, 0x0B	; 11
 bdc:	08 95       	ret
 bde:	8c e0       	ldi	r24, 0x0C	; 12
 be0:	08 95       	ret

00000be2 <timer0_set_ctc_isr>:
 be2:	00 97       	sbiw	r24, 0x00	; 0
 be4:	31 f0       	breq	.+12     	; 0xbf2 <timer0_set_ctc_isr+0x10>
 be6:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <ptr_func_ctc_isr+0x1>
 bea:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <ptr_func_ctc_isr>
 bee:	8d e0       	ldi	r24, 0x0D	; 13
 bf0:	08 95       	ret
 bf2:	8e e0       	ldi	r24, 0x0E	; 14
 bf4:	08 95       	ret

00000bf6 <TIMER0_init>:
 bf6:	cf 93       	push	r28
 bf8:	df 93       	push	r29
 bfa:	dc 01       	movw	r26, r24
 bfc:	89 2b       	or	r24, r25
 bfe:	09 f4       	brne	.+2      	; 0xc02 <TIMER0_init+0xc>
 c00:	aa c0       	rjmp	.+340    	; 0xd56 <TIMER0_init+0x160>
 c02:	8c 91       	ld	r24, X
 c04:	81 30       	cpi	r24, 0x01	; 1
 c06:	89 f0       	breq	.+34     	; 0xc2a <TIMER0_init+0x34>
 c08:	28 f0       	brcs	.+10     	; 0xc14 <TIMER0_init+0x1e>
 c0a:	82 30       	cpi	r24, 0x02	; 2
 c0c:	41 f0       	breq	.+16     	; 0xc1e <TIMER0_init+0x28>
 c0e:	83 30       	cpi	r24, 0x03	; 3
 c10:	91 f0       	breq	.+36     	; 0xc36 <TIMER0_init+0x40>
 c12:	16 c0       	rjmp	.+44     	; 0xc40 <TIMER0_init+0x4a>
 c14:	83 b7       	in	r24, 0x33	; 51
 c16:	87 7b       	andi	r24, 0xB7	; 183
 c18:	83 bf       	out	0x33, r24	; 51
 c1a:	83 e0       	ldi	r24, 0x03	; 3
 c1c:	12 c0       	rjmp	.+36     	; 0xc42 <TIMER0_init+0x4c>
 c1e:	83 b7       	in	r24, 0x33	; 51
 c20:	87 7f       	andi	r24, 0xF7	; 247
 c22:	80 64       	ori	r24, 0x40	; 64
 c24:	83 bf       	out	0x33, r24	; 51
 c26:	83 e0       	ldi	r24, 0x03	; 3
 c28:	0c c0       	rjmp	.+24     	; 0xc42 <TIMER0_init+0x4c>
 c2a:	83 b7       	in	r24, 0x33	; 51
 c2c:	88 60       	ori	r24, 0x08	; 8
 c2e:	8f 7b       	andi	r24, 0xBF	; 191
 c30:	83 bf       	out	0x33, r24	; 51
 c32:	83 e0       	ldi	r24, 0x03	; 3
 c34:	06 c0       	rjmp	.+12     	; 0xc42 <TIMER0_init+0x4c>
 c36:	83 b7       	in	r24, 0x33	; 51
 c38:	88 64       	ori	r24, 0x48	; 72
 c3a:	83 bf       	out	0x33, r24	; 51
 c3c:	83 e0       	ldi	r24, 0x03	; 3
 c3e:	01 c0       	rjmp	.+2      	; 0xc42 <TIMER0_init+0x4c>
 c40:	84 e0       	ldi	r24, 0x04	; 4
 c42:	83 30       	cpi	r24, 0x03	; 3
 c44:	d1 f5       	brne	.+116    	; 0xcba <TIMER0_init+0xc4>
 c46:	12 96       	adiw	r26, 0x02	; 2
 c48:	ec 91       	ld	r30, X
 c4a:	12 97       	sbiw	r26, 0x02	; 2
 c4c:	4e 2f       	mov	r20, r30
 c4e:	50 e0       	ldi	r21, 0x00	; 0
 c50:	48 30       	cpi	r20, 0x08	; 8
 c52:	51 05       	cpc	r21, r1
 c54:	88 f5       	brcc	.+98     	; 0xcb8 <TIMER0_init+0xc2>
 c56:	fa 01       	movw	r30, r20
 c58:	e6 5c       	subi	r30, 0xC6	; 198
 c5a:	ff 4f       	sbci	r31, 0xFF	; 255
 c5c:	0c 94 eb 07 	jmp	0xfd6	; 0xfd6 <__tablejump2__>
 c60:	83 b7       	in	r24, 0x33	; 51
 c62:	8f 7c       	andi	r24, 0xCF	; 207
 c64:	83 bf       	out	0x33, r24	; 51
 c66:	85 e0       	ldi	r24, 0x05	; 5
 c68:	28 c0       	rjmp	.+80     	; 0xcba <TIMER0_init+0xc4>
 c6a:	83 b7       	in	r24, 0x33	; 51
 c6c:	8f 7d       	andi	r24, 0xDF	; 223
 c6e:	80 61       	ori	r24, 0x10	; 16
 c70:	83 bf       	out	0x33, r24	; 51
 c72:	85 e0       	ldi	r24, 0x05	; 5
 c74:	22 c0       	rjmp	.+68     	; 0xcba <TIMER0_init+0xc4>
 c76:	83 b7       	in	r24, 0x33	; 51
 c78:	80 62       	ori	r24, 0x20	; 32
 c7a:	8f 7e       	andi	r24, 0xEF	; 239
 c7c:	83 bf       	out	0x33, r24	; 51
 c7e:	85 e0       	ldi	r24, 0x05	; 5
 c80:	1c c0       	rjmp	.+56     	; 0xcba <TIMER0_init+0xc4>
 c82:	83 b7       	in	r24, 0x33	; 51
 c84:	80 63       	ori	r24, 0x30	; 48
 c86:	83 bf       	out	0x33, r24	; 51
 c88:	85 e0       	ldi	r24, 0x05	; 5
 c8a:	17 c0       	rjmp	.+46     	; 0xcba <TIMER0_init+0xc4>
 c8c:	83 b7       	in	r24, 0x33	; 51
 c8e:	80 62       	ori	r24, 0x20	; 32
 c90:	8f 7e       	andi	r24, 0xEF	; 239
 c92:	83 bf       	out	0x33, r24	; 51
 c94:	85 e0       	ldi	r24, 0x05	; 5
 c96:	11 c0       	rjmp	.+34     	; 0xcba <TIMER0_init+0xc4>
 c98:	83 b7       	in	r24, 0x33	; 51
 c9a:	80 63       	ori	r24, 0x30	; 48
 c9c:	83 bf       	out	0x33, r24	; 51
 c9e:	85 e0       	ldi	r24, 0x05	; 5
 ca0:	0c c0       	rjmp	.+24     	; 0xcba <TIMER0_init+0xc4>
 ca2:	83 b7       	in	r24, 0x33	; 51
 ca4:	80 62       	ori	r24, 0x20	; 32
 ca6:	8f 7e       	andi	r24, 0xEF	; 239
 ca8:	83 bf       	out	0x33, r24	; 51
 caa:	85 e0       	ldi	r24, 0x05	; 5
 cac:	06 c0       	rjmp	.+12     	; 0xcba <TIMER0_init+0xc4>
 cae:	83 b7       	in	r24, 0x33	; 51
 cb0:	80 63       	ori	r24, 0x30	; 48
 cb2:	83 bf       	out	0x33, r24	; 51
 cb4:	85 e0       	ldi	r24, 0x05	; 5
 cb6:	01 c0       	rjmp	.+2      	; 0xcba <TIMER0_init+0xc4>
 cb8:	86 e0       	ldi	r24, 0x06	; 6
 cba:	ed 01       	movw	r28, r26
 cbc:	85 30       	cpi	r24, 0x05	; 5
 cbe:	79 f5       	brne	.+94     	; 0xd1e <TIMER0_init+0x128>
 cc0:	8b 81       	ldd	r24, Y+3	; 0x03
 cc2:	88 23       	and	r24, r24
 cc4:	19 f0       	breq	.+6      	; 0xccc <TIMER0_init+0xd6>
 cc6:	81 30       	cpi	r24, 0x01	; 1
 cc8:	a9 f0       	breq	.+42     	; 0xcf4 <TIMER0_init+0xfe>
 cca:	24 c0       	rjmp	.+72     	; 0xd14 <TIMER0_init+0x11e>
 ccc:	88 81       	ld	r24, Y
 cce:	88 23       	and	r24, r24
 cd0:	19 f0       	breq	.+6      	; 0xcd8 <TIMER0_init+0xe2>
 cd2:	81 30       	cpi	r24, 0x01	; 1
 cd4:	41 f0       	breq	.+16     	; 0xce6 <TIMER0_init+0xf0>
 cd6:	20 c0       	rjmp	.+64     	; 0xd18 <TIMER0_init+0x122>
 cd8:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <MCU_vEnableInterrupt>
 cdc:	89 b7       	in	r24, 0x39	; 57
 cde:	81 60       	ori	r24, 0x01	; 1
 ce0:	89 bf       	out	0x39, r24	; 57
 ce2:	87 e0       	ldi	r24, 0x07	; 7
 ce4:	1c c0       	rjmp	.+56     	; 0xd1e <TIMER0_init+0x128>
 ce6:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <MCU_vEnableInterrupt>
 cea:	89 b7       	in	r24, 0x39	; 57
 cec:	82 60       	ori	r24, 0x02	; 2
 cee:	89 bf       	out	0x39, r24	; 57
 cf0:	87 e0       	ldi	r24, 0x07	; 7
 cf2:	15 c0       	rjmp	.+42     	; 0xd1e <TIMER0_init+0x128>
 cf4:	88 81       	ld	r24, Y
 cf6:	88 23       	and	r24, r24
 cf8:	19 f0       	breq	.+6      	; 0xd00 <TIMER0_init+0x10a>
 cfa:	81 30       	cpi	r24, 0x01	; 1
 cfc:	31 f0       	breq	.+12     	; 0xd0a <TIMER0_init+0x114>
 cfe:	0e c0       	rjmp	.+28     	; 0xd1c <TIMER0_init+0x126>
 d00:	89 b7       	in	r24, 0x39	; 57
 d02:	8e 7f       	andi	r24, 0xFE	; 254
 d04:	89 bf       	out	0x39, r24	; 57
 d06:	87 e0       	ldi	r24, 0x07	; 7
 d08:	0a c0       	rjmp	.+20     	; 0xd1e <TIMER0_init+0x128>
 d0a:	89 b7       	in	r24, 0x39	; 57
 d0c:	8d 7f       	andi	r24, 0xFD	; 253
 d0e:	89 bf       	out	0x39, r24	; 57
 d10:	87 e0       	ldi	r24, 0x07	; 7
 d12:	05 c0       	rjmp	.+10     	; 0xd1e <TIMER0_init+0x128>
 d14:	88 e0       	ldi	r24, 0x08	; 8
 d16:	03 c0       	rjmp	.+6      	; 0xd1e <TIMER0_init+0x128>
 d18:	88 e0       	ldi	r24, 0x08	; 8
 d1a:	01 c0       	rjmp	.+2      	; 0xd1e <TIMER0_init+0x128>
 d1c:	88 e0       	ldi	r24, 0x08	; 8
 d1e:	87 30       	cpi	r24, 0x07	; 7
 d20:	89 f4       	brne	.+34     	; 0xd44 <TIMER0_init+0x14e>
 d22:	88 81       	ld	r24, Y
 d24:	88 23       	and	r24, r24
 d26:	19 f0       	breq	.+6      	; 0xd2e <TIMER0_init+0x138>
 d28:	81 30       	cpi	r24, 0x01	; 1
 d2a:	31 f0       	breq	.+12     	; 0xd38 <TIMER0_init+0x142>
 d2c:	0a c0       	rjmp	.+20     	; 0xd42 <TIMER0_init+0x14c>
 d2e:	8c 81       	ldd	r24, Y+4	; 0x04
 d30:	9d 81       	ldd	r25, Y+5	; 0x05
 d32:	0e 94 e7 05 	call	0xbce	; 0xbce <timer0_set_ovf_isr>
 d36:	06 c0       	rjmp	.+12     	; 0xd44 <TIMER0_init+0x14e>
 d38:	8e 81       	ldd	r24, Y+6	; 0x06
 d3a:	9f 81       	ldd	r25, Y+7	; 0x07
 d3c:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <timer0_set_ctc_isr>
 d40:	01 c0       	rjmp	.+2      	; 0xd44 <TIMER0_init+0x14e>
 d42:	8f e0       	ldi	r24, 0x0F	; 15
 d44:	8b 30       	cpi	r24, 0x0B	; 11
 d46:	11 f0       	breq	.+4      	; 0xd4c <TIMER0_init+0x156>
 d48:	8d 30       	cpi	r24, 0x0D	; 13
 d4a:	31 f4       	brne	.+12     	; 0xd58 <TIMER0_init+0x162>
 d4c:	83 b7       	in	r24, 0x33	; 51
 d4e:	88 7f       	andi	r24, 0xF8	; 248
 d50:	83 bf       	out	0x33, r24	; 51
 d52:	80 e0       	ldi	r24, 0x00	; 0
 d54:	01 c0       	rjmp	.+2      	; 0xd58 <TIMER0_init+0x162>
 d56:	82 e0       	ldi	r24, 0x02	; 2
 d58:	df 91       	pop	r29
 d5a:	cf 91       	pop	r28
 d5c:	08 95       	ret

00000d5e <TIMER0_start>:
 d5e:	00 97       	sbiw	r24, 0x00	; 0
 d60:	09 f4       	brne	.+2      	; 0xd64 <TIMER0_start+0x6>
 d62:	41 c0       	rjmp	.+130    	; 0xde6 <TIMER0_start+0x88>
 d64:	dc 01       	movw	r26, r24
 d66:	11 96       	adiw	r26, 0x01	; 1
 d68:	ec 91       	ld	r30, X
 d6a:	8e 2f       	mov	r24, r30
 d6c:	90 e0       	ldi	r25, 0x00	; 0
 d6e:	88 30       	cpi	r24, 0x08	; 8
 d70:	91 05       	cpc	r25, r1
 d72:	a8 f5       	brcc	.+106    	; 0xdde <TIMER0_start+0x80>
 d74:	fc 01       	movw	r30, r24
 d76:	ee 5b       	subi	r30, 0xBE	; 190
 d78:	ff 4f       	sbci	r31, 0xFF	; 255
 d7a:	0c 94 eb 07 	jmp	0xfd6	; 0xfd6 <__tablejump2__>
 d7e:	83 b7       	in	r24, 0x33	; 51
 d80:	88 7f       	andi	r24, 0xF8	; 248
 d82:	83 bf       	out	0x33, r24	; 51
 d84:	89 e0       	ldi	r24, 0x09	; 9
 d86:	2c c0       	rjmp	.+88     	; 0xde0 <TIMER0_start+0x82>
 d88:	83 b7       	in	r24, 0x33	; 51
 d8a:	89 7f       	andi	r24, 0xF9	; 249
 d8c:	81 60       	ori	r24, 0x01	; 1
 d8e:	83 bf       	out	0x33, r24	; 51
 d90:	89 e0       	ldi	r24, 0x09	; 9
 d92:	26 c0       	rjmp	.+76     	; 0xde0 <TIMER0_start+0x82>
 d94:	83 b7       	in	r24, 0x33	; 51
 d96:	8b 7f       	andi	r24, 0xFB	; 251
 d98:	82 60       	ori	r24, 0x02	; 2
 d9a:	8e 7f       	andi	r24, 0xFE	; 254
 d9c:	83 bf       	out	0x33, r24	; 51
 d9e:	89 e0       	ldi	r24, 0x09	; 9
 da0:	1f c0       	rjmp	.+62     	; 0xde0 <TIMER0_start+0x82>
 da2:	83 b7       	in	r24, 0x33	; 51
 da4:	8b 7f       	andi	r24, 0xFB	; 251
 da6:	83 60       	ori	r24, 0x03	; 3
 da8:	83 bf       	out	0x33, r24	; 51
 daa:	89 e0       	ldi	r24, 0x09	; 9
 dac:	19 c0       	rjmp	.+50     	; 0xde0 <TIMER0_start+0x82>
 dae:	83 b7       	in	r24, 0x33	; 51
 db0:	84 60       	ori	r24, 0x04	; 4
 db2:	8c 7f       	andi	r24, 0xFC	; 252
 db4:	83 bf       	out	0x33, r24	; 51
 db6:	89 e0       	ldi	r24, 0x09	; 9
 db8:	13 c0       	rjmp	.+38     	; 0xde0 <TIMER0_start+0x82>
 dba:	83 b7       	in	r24, 0x33	; 51
 dbc:	84 60       	ori	r24, 0x04	; 4
 dbe:	8d 7f       	andi	r24, 0xFD	; 253
 dc0:	81 60       	ori	r24, 0x01	; 1
 dc2:	83 bf       	out	0x33, r24	; 51
 dc4:	89 e0       	ldi	r24, 0x09	; 9
 dc6:	0c c0       	rjmp	.+24     	; 0xde0 <TIMER0_start+0x82>
 dc8:	83 b7       	in	r24, 0x33	; 51
 dca:	86 60       	ori	r24, 0x06	; 6
 dcc:	8e 7f       	andi	r24, 0xFE	; 254
 dce:	83 bf       	out	0x33, r24	; 51
 dd0:	89 e0       	ldi	r24, 0x09	; 9
 dd2:	06 c0       	rjmp	.+12     	; 0xde0 <TIMER0_start+0x82>
 dd4:	83 b7       	in	r24, 0x33	; 51
 dd6:	87 60       	ori	r24, 0x07	; 7
 dd8:	83 bf       	out	0x33, r24	; 51
 dda:	89 e0       	ldi	r24, 0x09	; 9
 ddc:	01 c0       	rjmp	.+2      	; 0xde0 <TIMER0_start+0x82>
 dde:	8a e0       	ldi	r24, 0x0A	; 10
 de0:	89 30       	cpi	r24, 0x09	; 9
 de2:	21 f4       	brne	.+8      	; 0xdec <TIMER0_start+0x8e>
 de4:	02 c0       	rjmp	.+4      	; 0xdea <TIMER0_start+0x8c>
 de6:	82 e0       	ldi	r24, 0x02	; 2
 de8:	08 95       	ret
 dea:	80 e0       	ldi	r24, 0x00	; 0
 dec:	08 95       	ret

00000dee <TIMER0_stop>:
 dee:	83 b7       	in	r24, 0x33	; 51
 df0:	88 7f       	andi	r24, 0xF8	; 248
 df2:	83 bf       	out	0x33, r24	; 51
 df4:	80 e0       	ldi	r24, 0x00	; 0
 df6:	08 95       	ret

00000df8 <TIMER0_delay_ms>:
 df8:	0f 93       	push	r16
 dfa:	1f 93       	push	r17
 dfc:	dc 01       	movw	r26, r24
 dfe:	cb 01       	movw	r24, r22
 e00:	88 0f       	add	r24, r24
 e02:	99 1f       	adc	r25, r25
 e04:	aa 1f       	adc	r26, r26
 e06:	bb 1f       	adc	r27, r27
 e08:	88 0f       	add	r24, r24
 e0a:	99 1f       	adc	r25, r25
 e0c:	aa 1f       	adc	r26, r26
 e0e:	bb 1f       	adc	r27, r27
 e10:	88 0f       	add	r24, r24
 e12:	99 1f       	adc	r25, r25
 e14:	aa 1f       	adc	r26, r26
 e16:	bb 1f       	adc	r27, r27
 e18:	8c 01       	movw	r16, r24
 e1a:	9d 01       	movw	r18, r26
 e1c:	00 0f       	add	r16, r16
 e1e:	11 1f       	adc	r17, r17
 e20:	22 1f       	adc	r18, r18
 e22:	33 1f       	adc	r19, r19
 e24:	00 0f       	add	r16, r16
 e26:	11 1f       	adc	r17, r17
 e28:	22 1f       	adc	r18, r18
 e2a:	33 1f       	adc	r19, r19
 e2c:	80 0f       	add	r24, r16
 e2e:	91 1f       	adc	r25, r17
 e30:	a2 1f       	adc	r26, r18
 e32:	b3 1f       	adc	r27, r19
 e34:	ac 01       	movw	r20, r24
 e36:	bd 01       	movw	r22, r26
 e38:	44 0f       	add	r20, r20
 e3a:	55 1f       	adc	r21, r21
 e3c:	66 1f       	adc	r22, r22
 e3e:	77 1f       	adc	r23, r23
 e40:	44 0f       	add	r20, r20
 e42:	55 1f       	adc	r21, r21
 e44:	66 1f       	adc	r22, r22
 e46:	77 1f       	adc	r23, r23
 e48:	84 0f       	add	r24, r20
 e4a:	95 1f       	adc	r25, r21
 e4c:	a6 1f       	adc	r26, r22
 e4e:	b7 1f       	adc	r27, r23
 e50:	ac 01       	movw	r20, r24
 e52:	bd 01       	movw	r22, r26
 e54:	44 0f       	add	r20, r20
 e56:	55 1f       	adc	r21, r21
 e58:	66 1f       	adc	r22, r22
 e5a:	77 1f       	adc	r23, r23
 e5c:	44 0f       	add	r20, r20
 e5e:	55 1f       	adc	r21, r21
 e60:	66 1f       	adc	r22, r22
 e62:	77 1f       	adc	r23, r23
 e64:	84 0f       	add	r24, r20
 e66:	95 1f       	adc	r25, r21
 e68:	a6 1f       	adc	r26, r22
 e6a:	b7 1f       	adc	r27, r23
 e6c:	49 2f       	mov	r20, r25
 e6e:	5a 2f       	mov	r21, r26
 e70:	6b 2f       	mov	r22, r27
 e72:	77 27       	eor	r23, r23
 e74:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <g_u32_number_of_ovf>
 e78:	50 93 43 01 	sts	0x0143, r21	; 0x800143 <g_u32_number_of_ovf+0x1>
 e7c:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <g_u32_number_of_ovf+0x2>
 e80:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <g_u32_number_of_ovf+0x3>
 e84:	99 27       	eor	r25, r25
 e86:	aa 27       	eor	r26, r26
 e88:	bb 27       	eor	r27, r27
 e8a:	40 e0       	ldi	r20, 0x00	; 0
 e8c:	51 e0       	ldi	r21, 0x01	; 1
 e8e:	60 e0       	ldi	r22, 0x00	; 0
 e90:	70 e0       	ldi	r23, 0x00	; 0
 e92:	8a 01       	movw	r16, r20
 e94:	9b 01       	movw	r18, r22
 e96:	08 1b       	sub	r16, r24
 e98:	19 0b       	sbc	r17, r25
 e9a:	2a 0b       	sbc	r18, r26
 e9c:	3b 0b       	sbc	r19, r27
 e9e:	02 bf       	out	0x32, r16	; 50
 ea0:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <g_u32_number_of_ovf>
 ea4:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <g_u32_number_of_ovf+0x1>
 ea8:	a0 91 44 01 	lds	r26, 0x0144	; 0x800144 <g_u32_number_of_ovf+0x2>
 eac:	b0 91 45 01 	lds	r27, 0x0145	; 0x800145 <g_u32_number_of_ovf+0x3>
 eb0:	01 96       	adiw	r24, 0x01	; 1
 eb2:	a1 1d       	adc	r26, r1
 eb4:	b1 1d       	adc	r27, r1
 eb6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <g_u32_number_of_ovf>
 eba:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <g_u32_number_of_ovf+0x1>
 ebe:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <g_u32_number_of_ovf+0x2>
 ec2:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <g_u32_number_of_ovf+0x3>
 ec6:	1f 91       	pop	r17
 ec8:	0f 91       	pop	r16
 eca:	08 95       	ret

00000ecc <__vector_11>:


ISR(TIM0_OVF_INT)
{
 ecc:	1f 92       	push	r1
 ece:	0f 92       	push	r0
 ed0:	0f b6       	in	r0, 0x3f	; 63
 ed2:	0f 92       	push	r0
 ed4:	11 24       	eor	r1, r1
 ed6:	2f 93       	push	r18
 ed8:	3f 93       	push	r19
 eda:	4f 93       	push	r20
 edc:	5f 93       	push	r21
 ede:	6f 93       	push	r22
 ee0:	7f 93       	push	r23
 ee2:	8f 93       	push	r24
 ee4:	9f 93       	push	r25
 ee6:	af 93       	push	r26
 ee8:	bf 93       	push	r27
 eea:	ef 93       	push	r30
 eec:	ff 93       	push	r31
	if (enable_delay_ms == TIMER0_DELAY_ENABLE)
	{
			if(g_u32_isr_ovf_counter == g_u32_number_of_ovf)
 eee:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <g_u32_isr_ovf_counter>
 ef2:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <g_u32_isr_ovf_counter+0x1>
 ef6:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <g_u32_isr_ovf_counter+0x2>
 efa:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <g_u32_isr_ovf_counter+0x3>
 efe:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <g_u32_number_of_ovf>
 f02:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <g_u32_number_of_ovf+0x1>
 f06:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <g_u32_number_of_ovf+0x2>
 f0a:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <g_u32_number_of_ovf+0x3>
 f0e:	84 17       	cp	r24, r20
 f10:	95 07       	cpc	r25, r21
 f12:	a6 07       	cpc	r26, r22
 f14:	b7 07       	cpc	r27, r23
 f16:	e1 f4       	brne	.+56     	; 0xf50 <__vector_11+0x84>
			{
				ptr_func_overflow_isr();
 f18:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <ptr_func_overflow_isr>
 f1c:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <ptr_func_overflow_isr+0x1>
 f20:	09 95       	icall
				g_u32_isr_ovf_counter = 0;
 f22:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <g_u32_isr_ovf_counter>
 f26:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <g_u32_isr_ovf_counter+0x1>
 f2a:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <g_u32_isr_ovf_counter+0x2>
 f2e:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <g_u32_isr_ovf_counter+0x3>
				g_u64_polling_counter = 1;
 f32:	81 e0       	ldi	r24, 0x01	; 1
 f34:	90 e0       	ldi	r25, 0x00	; 0
 f36:	a0 e0       	ldi	r26, 0x00	; 0
 f38:	b0 e0       	ldi	r27, 0x00	; 0
 f3a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <g_u64_polling_counter>
 f3e:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <g_u64_polling_counter+0x1>
 f42:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <g_u64_polling_counter+0x2>
 f46:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <g_u64_polling_counter+0x3>
				TIMER0_stop();
 f4a:	0e 94 f7 06 	call	0xdee	; 0xdee <TIMER0_stop>
 f4e:	0b c0       	rjmp	.+22     	; 0xf66 <__vector_11+0x9a>
			}
			else
			{
				g_u32_isr_ovf_counter++;
 f50:	01 96       	adiw	r24, 0x01	; 1
 f52:	a1 1d       	adc	r26, r1
 f54:	b1 1d       	adc	r27, r1
 f56:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <g_u32_isr_ovf_counter>
 f5a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <g_u32_isr_ovf_counter+0x1>
 f5e:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <g_u32_isr_ovf_counter+0x2>
 f62:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <g_u32_isr_ovf_counter+0x3>
	}
	else if (enable_delay_ms == TIMER0_DELAY_DISABLE)
	{
		ptr_func_overflow_isr();	
	}
}
 f66:	ff 91       	pop	r31
 f68:	ef 91       	pop	r30
 f6a:	bf 91       	pop	r27
 f6c:	af 91       	pop	r26
 f6e:	9f 91       	pop	r25
 f70:	8f 91       	pop	r24
 f72:	7f 91       	pop	r23
 f74:	6f 91       	pop	r22
 f76:	5f 91       	pop	r21
 f78:	4f 91       	pop	r20
 f7a:	3f 91       	pop	r19
 f7c:	2f 91       	pop	r18
 f7e:	0f 90       	pop	r0
 f80:	0f be       	out	0x3f, r0	; 63
 f82:	0f 90       	pop	r0
 f84:	1f 90       	pop	r1
 f86:	18 95       	reti

00000f88 <__vector_10>:

ISR(TIM0_COMP_INT)
{
 f88:	1f 92       	push	r1
 f8a:	0f 92       	push	r0
 f8c:	0f b6       	in	r0, 0x3f	; 63
 f8e:	0f 92       	push	r0
 f90:	11 24       	eor	r1, r1
 f92:	2f 93       	push	r18
 f94:	3f 93       	push	r19
 f96:	4f 93       	push	r20
 f98:	5f 93       	push	r21
 f9a:	6f 93       	push	r22
 f9c:	7f 93       	push	r23
 f9e:	8f 93       	push	r24
 fa0:	9f 93       	push	r25
 fa2:	af 93       	push	r26
 fa4:	bf 93       	push	r27
 fa6:	ef 93       	push	r30
 fa8:	ff 93       	push	r31
	ptr_func_ctc_isr();
 faa:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <ptr_func_ctc_isr>
 fae:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <ptr_func_ctc_isr+0x1>
 fb2:	09 95       	icall
}
 fb4:	ff 91       	pop	r31
 fb6:	ef 91       	pop	r30
 fb8:	bf 91       	pop	r27
 fba:	af 91       	pop	r26
 fbc:	9f 91       	pop	r25
 fbe:	8f 91       	pop	r24
 fc0:	7f 91       	pop	r23
 fc2:	6f 91       	pop	r22
 fc4:	5f 91       	pop	r21
 fc6:	4f 91       	pop	r20
 fc8:	3f 91       	pop	r19
 fca:	2f 91       	pop	r18
 fcc:	0f 90       	pop	r0
 fce:	0f be       	out	0x3f, r0	; 63
 fd0:	0f 90       	pop	r0
 fd2:	1f 90       	pop	r1
 fd4:	18 95       	reti

00000fd6 <__tablejump2__>:
 fd6:	ee 0f       	add	r30, r30
 fd8:	ff 1f       	adc	r31, r31
 fda:	05 90       	lpm	r0, Z+
 fdc:	f4 91       	lpm	r31, Z
 fde:	e0 2d       	mov	r30, r0
 fe0:	09 94       	ijmp

00000fe2 <_exit>:
 fe2:	f8 94       	cli

00000fe4 <__stop_program>:
 fe4:	ff cf       	rjmp	.-2      	; 0xfe4 <__stop_program>
