
led_sequance_v3.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000d6c  00000e00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  0080012c  0080012c  00000e2c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d52  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f57  00000000  00000000  00003e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001709  00000000  00000000  00004d65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000584  00000000  00000000  00006470  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001522  00000000  00000000  000069f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cb8  00000000  00000000  00007f16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00009bce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__ctors_end>
   4:	0c 94 15 04 	jmp	0x82a	; 0x82a <__vector_1>
   8:	0c 94 3c 04 	jmp	0x878	; 0x878 <__vector_2>
   c:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__vector_3>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  28:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <__vector_10>
  2c:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__vector_11>
  30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  74:	a1 00       	.word	0x00a1	; ????
  76:	ba 00       	.word	0x00ba	; ????
  78:	db 00       	.word	0x00db	; ????
  7a:	04 01       	movw	r0, r8
  7c:	35 01       	movw	r6, r10
  7e:	62 01       	movw	r12, r4
  80:	83 01       	movw	r16, r6
  82:	9c 01       	movw	r18, r24
  84:	d7 04       	cpc	r13, r7
  86:	dc 04       	cpc	r13, r12
  88:	e2 04       	cpc	r14, r2
  8a:	e8 04       	cpc	r14, r8
  8c:	ed 04       	cpc	r14, r13
  8e:	f3 04       	cpc	r15, r3
  90:	f8 04       	cpc	r15, r8
  92:	fe 04       	cpc	r15, r14
  94:	66 05       	cpc	r22, r6
  96:	6b 05       	cpc	r22, r11
  98:	71 05       	cpc	r23, r1
  9a:	78 05       	cpc	r23, r8
  9c:	7e 05       	cpc	r23, r14
  9e:	84 05       	cpc	r24, r4
  a0:	8b 05       	cpc	r24, r11
  a2:	91 05       	cpc	r25, r1

000000a4 <__ctors_end>:
  a4:	11 24       	eor	r1, r1
  a6:	1f be       	out	0x3f, r1	; 63
  a8:	cf ef       	ldi	r28, 0xFF	; 255
  aa:	d4 e0       	ldi	r29, 0x04	; 4
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
  b0:	11 e0       	ldi	r17, 0x01	; 1
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	ec e6       	ldi	r30, 0x6C	; 108
  b8:	fd e0       	ldi	r31, 0x0D	; 13
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
  bc:	05 90       	lpm	r0, Z+
  be:	0d 92       	st	X+, r0
  c0:	ac 32       	cpi	r26, 0x2C	; 44
  c2:	b1 07       	cpc	r27, r17
  c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	ac e2       	ldi	r26, 0x2C	; 44
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
  ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
  d0:	a3 34       	cpi	r26, 0x43	; 67
  d2:	b2 07       	cpc	r27, r18
  d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
  d6:	0e 94 ad 02 	call	0x55a	; 0x55a <main>
  da:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <_exit>

000000de <__bad_interrupt>:
  de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <timer0_callback>:
		.EXTERNAL_INTERRUPRT_Sense_Control = LOW_LEVEL_SENSE_CONTROL,
		.INTERRUPT_EXTERNAL_HANDLER = INT1_ISR_HANDELER
};

void timer0_callback(void)
{
  e2:	08 95       	ret

000000e4 <INT0_ISR_HANDELER>:
}


void INT0_ISR_HANDELER(void)
{
	seqCounter++;
  e4:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
  e8:	8f 5f       	subi	r24, 0xFF	; 255
  ea:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
	if(seqCounter == 9)
  ee:	89 30       	cpi	r24, 0x09	; 9
  f0:	11 f4       	brne	.+4      	; 0xf6 <INT0_ISR_HANDELER+0x12>
	seqCounter = 0;
  f2:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__data_end>
  f6:	08 95       	ret

000000f8 <INT1_ISR_HANDELER>:

}

void INT1_ISR_HANDELER(void)
{
	blankCounter++;
  f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fc:	8f 5f       	subi	r24, 0xFF	; 255
  fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(blankCounter == 6)
 102:	86 30       	cpi	r24, 0x06	; 6
 104:	19 f4       	brne	.+6      	; 0x10c <INT1_ISR_HANDELER+0x14>
	blankCounter = 1;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 10c:	08 95       	ret

0000010e <BlinkModes>:
	}
}


void BlinkModes(Uint32_t from,Uint32_t to)
{
 10e:	8f 92       	push	r8
 110:	9f 92       	push	r9
 112:	af 92       	push	r10
 114:	bf 92       	push	r11
 116:	cf 92       	push	r12
 118:	df 92       	push	r13
 11a:	ef 92       	push	r14
 11c:	ff 92       	push	r15
	switch(seqCounter)
 11e:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <__data_end>
 122:	ce 2e       	mov	r12, r30
 124:	d1 2c       	mov	r13, r1
 126:	f6 01       	movw	r30, r12
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	e8 30       	cpi	r30, 0x08	; 8
 12c:	f1 05       	cpc	r31, r1
 12e:	08 f0       	brcs	.+2      	; 0x132 <BlinkModes+0x24>
 130:	13 c1       	rjmp	.+550    	; 0x358 <BlinkModes+0x24a>
 132:	69 01       	movw	r12, r18
 134:	7a 01       	movw	r14, r20
 136:	4b 01       	movw	r8, r22
 138:	5c 01       	movw	r10, r24
 13a:	e6 5c       	subi	r30, 0xC6	; 198
 13c:	ff 4f       	sbci	r31, 0xFF	; 255
 13e:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__tablejump2__>
	{
	case ONE_PRESS:
	{
		LED_turn_on(&led0);
 142:	8a e1       	ldi	r24, 0x1A	; 26
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LED_turn_on>
		TIMER0_start(&timer0);
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	0e 94 56 05 	call	0xaac	; 0xaac <TIMER0_start>
		TIMER0_sync_delay_ms(from);
 152:	c5 01       	movw	r24, r10
 154:	b4 01       	movw	r22, r8
 156:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER0_sync_delay_ms>
		LED_turn_off(&led0);
 15a:	8a e1       	ldi	r24, 0x1A	; 26
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_turn_off>
		TIMER0_start(&timer0);
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	0e 94 56 05 	call	0xaac	; 0xaac <TIMER0_start>
		TIMER0_sync_delay_ms(to);
 16a:	c7 01       	movw	r24, r14
 16c:	b6 01       	movw	r22, r12
 16e:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER0_sync_delay_ms>
		break;
 172:	f2 c0       	rjmp	.+484    	; 0x358 <BlinkModes+0x24a>
	}
	case TWO_PRESS:
	{
		LED_turn_on(&led0);
 174:	8a e1       	ldi	r24, 0x1A	; 26
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LED_turn_on>
		LED_turn_on(&led1);
 17c:	89 e1       	ldi	r24, 0x19	; 25
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LED_turn_on>
		TIMER0_start(&timer0);
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 56 05 	call	0xaac	; 0xaac <TIMER0_start>
		TIMER0_sync_delay_ms(from);
 18c:	c5 01       	movw	r24, r10
 18e:	b4 01       	movw	r22, r8
 190:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER0_sync_delay_ms>
		LED_turn_off(&led0);
 194:	8a e1       	ldi	r24, 0x1A	; 26
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_turn_off>
		LED_turn_off(&led1);
 19c:	89 e1       	ldi	r24, 0x19	; 25
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_turn_off>
		TIMER0_start(&timer0);
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	0e 94 56 05 	call	0xaac	; 0xaac <TIMER0_start>
		TIMER0_sync_delay_ms(to);
 1ac:	c7 01       	movw	r24, r14
 1ae:	b6 01       	movw	r22, r12
 1b0:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER0_sync_delay_ms>
		break;
 1b4:	d1 c0       	rjmp	.+418    	; 0x358 <BlinkModes+0x24a>
	}
	case THREE_PRESS:
	{
		LED_turn_on(&led0);
 1b6:	8a e1       	ldi	r24, 0x1A	; 26
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LED_turn_on>
		LED_turn_on(&led1);
 1be:	89 e1       	ldi	r24, 0x19	; 25
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LED_turn_on>
		LED_turn_on(&led2);
 1c6:	88 e1       	ldi	r24, 0x18	; 24
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LED_turn_on>
		TIMER0_start(&timer0);
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 56 05 	call	0xaac	; 0xaac <TIMER0_start>
		TIMER0_sync_delay_ms(from);
 1d6:	c5 01       	movw	r24, r10
 1d8:	b4 01       	movw	r22, r8
 1da:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER0_sync_delay_ms>
		LED_turn_off(&led0);
 1de:	8a e1       	ldi	r24, 0x1A	; 26
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_turn_off>
		LED_turn_off(&led1);
 1e6:	89 e1       	ldi	r24, 0x19	; 25
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_turn_off>
		LED_turn_off(&led2);
 1ee:	88 e1       	ldi	r24, 0x18	; 24
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_turn_off>
		TIMER0_start(&timer0);	
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	0e 94 56 05 	call	0xaac	; 0xaac <TIMER0_start>
		TIMER0_sync_delay_ms(to);
 1fe:	c7 01       	movw	r24, r14
 200:	b6 01       	movw	r22, r12
 202:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER0_sync_delay_ms>
		break;
 206:	a8 c0       	rjmp	.+336    	; 0x358 <BlinkModes+0x24a>
	}
	case FOUR_PRESS:
	{
		LED_turn_on(&led0);
 208:	8a e1       	ldi	r24, 0x1A	; 26
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LED_turn_on>
		LED_turn_on(&led1);
 210:	89 e1       	ldi	r24, 0x19	; 25
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LED_turn_on>
		LED_turn_on(&led2);
 218:	88 e1       	ldi	r24, 0x18	; 24
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LED_turn_on>
		LED_turn_on(&led3);
 220:	87 e1       	ldi	r24, 0x17	; 23
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LED_turn_on>
		TIMER0_start(&timer0);		
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 56 05 	call	0xaac	; 0xaac <TIMER0_start>
		TIMER0_sync_delay_ms(from);
 230:	c5 01       	movw	r24, r10
 232:	b4 01       	movw	r22, r8
 234:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER0_sync_delay_ms>
		LED_turn_off(&led0);
 238:	8a e1       	ldi	r24, 0x1A	; 26
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_turn_off>
		LED_turn_off(&led1);
 240:	89 e1       	ldi	r24, 0x19	; 25
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_turn_off>
		LED_turn_off(&led2);
 248:	88 e1       	ldi	r24, 0x18	; 24
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_turn_off>
		LED_turn_off(&led3);
 250:	87 e1       	ldi	r24, 0x17	; 23
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_turn_off>
		TIMER0_start(&timer0);	
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 56 05 	call	0xaac	; 0xaac <TIMER0_start>
		TIMER0_sync_delay_ms(to);
 260:	c7 01       	movw	r24, r14
 262:	b6 01       	movw	r22, r12
 264:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER0_sync_delay_ms>
		break;
 268:	77 c0       	rjmp	.+238    	; 0x358 <BlinkModes+0x24a>
	}
	case FIVE_PRESS:
	{
		LED_turn_off(&led0);
 26a:	8a e1       	ldi	r24, 0x1A	; 26
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_turn_off>
		LED_turn_on(&led1);
 272:	89 e1       	ldi	r24, 0x19	; 25
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LED_turn_on>
		LED_turn_on(&led2);
 27a:	88 e1       	ldi	r24, 0x18	; 24
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LED_turn_on>
		LED_turn_on(&led3);
 282:	87 e1       	ldi	r24, 0x17	; 23
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LED_turn_on>
		TIMER0_start(&timer0);
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0e 94 56 05 	call	0xaac	; 0xaac <TIMER0_start>
		TIMER0_sync_delay_ms(from);
 292:	c5 01       	movw	r24, r10
 294:	b4 01       	movw	r22, r8
 296:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER0_sync_delay_ms>
		LED_turn_off(&led1);
 29a:	89 e1       	ldi	r24, 0x19	; 25
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_turn_off>
		LED_turn_off(&led2);
 2a2:	88 e1       	ldi	r24, 0x18	; 24
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_turn_off>
		LED_turn_off(&led3);
 2aa:	87 e1       	ldi	r24, 0x17	; 23
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_turn_off>
		TIMER0_start(&timer0);
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	0e 94 56 05 	call	0xaac	; 0xaac <TIMER0_start>
		TIMER0_sync_delay_ms(to);
 2ba:	c7 01       	movw	r24, r14
 2bc:	b6 01       	movw	r22, r12
 2be:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER0_sync_delay_ms>
		break;
 2c2:	4a c0       	rjmp	.+148    	; 0x358 <BlinkModes+0x24a>
	}
	case SIX_PRESS:
	{
		LED_turn_on(&led2);
 2c4:	88 e1       	ldi	r24, 0x18	; 24
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LED_turn_on>
		LED_turn_on(&led3);
 2cc:	87 e1       	ldi	r24, 0x17	; 23
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LED_turn_on>
		TIMER0_start(&timer0);
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	0e 94 56 05 	call	0xaac	; 0xaac <TIMER0_start>
		TIMER0_sync_delay_ms(from);
 2dc:	c5 01       	movw	r24, r10
 2de:	b4 01       	movw	r22, r8
 2e0:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER0_sync_delay_ms>
		LED_turn_off(&led2);
 2e4:	88 e1       	ldi	r24, 0x18	; 24
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_turn_off>
		LED_turn_off(&led3);
 2ec:	87 e1       	ldi	r24, 0x17	; 23
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_turn_off>
		TIMER0_start(&timer0);
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	0e 94 56 05 	call	0xaac	; 0xaac <TIMER0_start>
		TIMER0_sync_delay_ms(to);
 2fc:	c7 01       	movw	r24, r14
 2fe:	b6 01       	movw	r22, r12
 300:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER0_sync_delay_ms>
		break;
 304:	29 c0       	rjmp	.+82     	; 0x358 <BlinkModes+0x24a>
	}
	case SEVEN_PRESS:
	{
		LED_turn_on(&led3);
 306:	87 e1       	ldi	r24, 0x17	; 23
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LED_turn_on>
		TIMER0_start(&timer0);
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	0e 94 56 05 	call	0xaac	; 0xaac <TIMER0_start>
		TIMER0_sync_delay_ms(from);
 316:	c5 01       	movw	r24, r10
 318:	b4 01       	movw	r22, r8
 31a:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER0_sync_delay_ms>
		LED_turn_off(&led3);
 31e:	87 e1       	ldi	r24, 0x17	; 23
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_turn_off>
		TIMER0_start(&timer0);
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	0e 94 56 05 	call	0xaac	; 0xaac <TIMER0_start>
		TIMER0_sync_delay_ms(to);
 32e:	c7 01       	movw	r24, r14
 330:	b6 01       	movw	r22, r12
 332:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER0_sync_delay_ms>
		break;
 336:	10 c0       	rjmp	.+32     	; 0x358 <BlinkModes+0x24a>
	}
	case EIGHT_PRESS:
	{
		LED_turn_off(&led0);
 338:	8a e1       	ldi	r24, 0x1A	; 26
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_turn_off>
		LED_turn_off(&led1);
 340:	89 e1       	ldi	r24, 0x19	; 25
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_turn_off>
		LED_turn_off(&led2);
 348:	88 e1       	ldi	r24, 0x18	; 24
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_turn_off>
		LED_turn_off(&led3);
 350:	87 e1       	ldi	r24, 0x17	; 23
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_turn_off>
	}


	}
}
 358:	ff 90       	pop	r15
 35a:	ef 90       	pop	r14
 35c:	df 90       	pop	r13
 35e:	cf 90       	pop	r12
 360:	bf 90       	pop	r11
 362:	af 90       	pop	r10
 364:	9f 90       	pop	r9
 366:	8f 90       	pop	r8
 368:	08 95       	ret

0000036a <appmain>:
Uint8_t blankCounter = ONE_PRESS;
Uint8_t seqCounter = ZERO_PRESS;
void appmain(void)
{

	LED_initialize(&led0);
 36a:	8a e1       	ldi	r24, 0x1A	; 26
 36c:	91 e0       	ldi	r25, 0x01	; 1
 36e:	0e 94 29 02 	call	0x452	; 0x452 <LED_initialize>
	LED_initialize(&led1);
 372:	89 e1       	ldi	r24, 0x19	; 25
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	0e 94 29 02 	call	0x452	; 0x452 <LED_initialize>
	LED_initialize(&led2);
 37a:	88 e1       	ldi	r24, 0x18	; 24
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	0e 94 29 02 	call	0x452	; 0x452 <LED_initialize>
	LED_initialize(&led3);
 382:	87 e1       	ldi	r24, 0x17	; 23
 384:	91 e0       	ldi	r25, 0x01	; 1
 386:	0e 94 29 02 	call	0x452	; 0x452 <LED_initialize>
	EXT_vINTERRUPT_Init(&int0);
 38a:	8d e0       	ldi	r24, 0x0D	; 13
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <EXT_vINTERRUPT_Init>
	EXT_INTERRUPT_SetInterruptHandler(&int0);
 392:	8d e0       	ldi	r24, 0x0D	; 13
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <EXT_INTERRUPT_SetInterruptHandler>
	EXT_vINTERRUPT_Init(&int1);
 39a:	89 e0       	ldi	r24, 0x09	; 9
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <EXT_vINTERRUPT_Init>
	EXT_INTERRUPT_SetInterruptHandler(&int1);
 3a2:	89 e0       	ldi	r24, 0x09	; 9
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <EXT_INTERRUPT_SetInterruptHandler>
	PUSH_BTN_intialize(&btn0);
 3aa:	84 e1       	ldi	r24, 0x14	; 20
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	0e 94 a6 02 	call	0x54c	; 0x54c <PUSH_BTN_intialize>
	PUSH_BTN_intialize(&btn1);
 3b2:	81 e1       	ldi	r24, 0x11	; 17
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	0e 94 a6 02 	call	0x54c	; 0x54c <PUSH_BTN_intialize>
	MCU_vEnableInterrupt();
 3ba:	0e 94 8a 04 	call	0x914	; 0x914 <MCU_vEnableInterrupt>
	TIMER0_init(&timer0);
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	0e 94 a2 04 	call	0x944	; 0x944 <TIMER0_init>
	while(1)
	{

		switch(blankCounter)
 3c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3ca:	83 30       	cpi	r24, 0x03	; 3
 3cc:	09 f1       	breq	.+66     	; 0x410 <__DATA_REGION_LENGTH__+0x10>
 3ce:	28 f4       	brcc	.+10     	; 0x3da <appmain+0x70>
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	41 f0       	breq	.+16     	; 0x3e4 <appmain+0x7a>
 3d4:	82 30       	cpi	r24, 0x02	; 2
 3d6:	89 f0       	breq	.+34     	; 0x3fa <appmain+0x90>
 3d8:	f6 cf       	rjmp	.-20     	; 0x3c6 <appmain+0x5c>
 3da:	84 30       	cpi	r24, 0x04	; 4
 3dc:	21 f1       	breq	.+72     	; 0x426 <__DATA_REGION_LENGTH__+0x26>
 3de:	85 30       	cpi	r24, 0x05	; 5
 3e0:	69 f1       	breq	.+90     	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
 3e2:	f1 cf       	rjmp	.-30     	; 0x3c6 <appmain+0x5c>
		{
		case ONE_PRESS :
		{
			BlinkModes(100,900);
 3e4:	24 e8       	ldi	r18, 0x84	; 132
 3e6:	33 e0       	ldi	r19, 0x03	; 3
 3e8:	40 e0       	ldi	r20, 0x00	; 0
 3ea:	50 e0       	ldi	r21, 0x00	; 0
 3ec:	64 e6       	ldi	r22, 0x64	; 100
 3ee:	70 e0       	ldi	r23, 0x00	; 0
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 87 00 	call	0x10e	; 0x10e <BlinkModes>
			break;
 3f8:	e6 cf       	rjmp	.-52     	; 0x3c6 <appmain+0x5c>
		}
		case TWO_PRESS :
		{
			BlinkModes(200,800);
 3fa:	20 e2       	ldi	r18, 0x20	; 32
 3fc:	33 e0       	ldi	r19, 0x03	; 3
 3fe:	40 e0       	ldi	r20, 0x00	; 0
 400:	50 e0       	ldi	r21, 0x00	; 0
 402:	68 ec       	ldi	r22, 0xC8	; 200
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 87 00 	call	0x10e	; 0x10e <BlinkModes>
			break;
 40e:	db cf       	rjmp	.-74     	; 0x3c6 <appmain+0x5c>
		}
		case THREE_PRESS :
		{
			BlinkModes(300,700);
 410:	2c eb       	ldi	r18, 0xBC	; 188
 412:	32 e0       	ldi	r19, 0x02	; 2
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	50 e0       	ldi	r21, 0x00	; 0
 418:	6c e2       	ldi	r22, 0x2C	; 44
 41a:	71 e0       	ldi	r23, 0x01	; 1
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 87 00 	call	0x10e	; 0x10e <BlinkModes>
			break;
 424:	d0 cf       	rjmp	.-96     	; 0x3c6 <appmain+0x5c>
		}
		case FOUR_PRESS :
		{
			BlinkModes(500,500);
 426:	24 ef       	ldi	r18, 0xF4	; 244
 428:	31 e0       	ldi	r19, 0x01	; 1
 42a:	40 e0       	ldi	r20, 0x00	; 0
 42c:	50 e0       	ldi	r21, 0x00	; 0
 42e:	64 ef       	ldi	r22, 0xF4	; 244
 430:	71 e0       	ldi	r23, 0x01	; 1
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 87 00 	call	0x10e	; 0x10e <BlinkModes>
			break;
 43a:	c5 cf       	rjmp	.-118    	; 0x3c6 <appmain+0x5c>
		}
		case FIVE_PRESS :
		{
			BlinkModes(800,200);
 43c:	28 ec       	ldi	r18, 0xC8	; 200
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	40 e0       	ldi	r20, 0x00	; 0
 442:	50 e0       	ldi	r21, 0x00	; 0
 444:	60 e2       	ldi	r22, 0x20	; 32
 446:	73 e0       	ldi	r23, 0x03	; 3
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 87 00 	call	0x10e	; 0x10e <BlinkModes>
			break;
 450:	ba cf       	rjmp	.-140    	; 0x3c6 <appmain+0x5c>

00000452 <LED_initialize>:
 */

#include"LED_interface.h"

Std_ReturnType LED_initialize(const ST_led_t *led)
{
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	1f 92       	push	r1
 458:	cd b7       	in	r28, 0x3d	; 61
 45a:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == led)
 45c:	00 97       	sbiw	r24, 0x00	; 0
 45e:	e9 f0       	breq	.+58     	; 0x49a <LED_initialize+0x48>
 460:	fc 01       	movw	r30, r24
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
		{
			.port = led->port_name,
 462:	20 81       	ld	r18, Z
 464:	92 2f       	mov	r25, r18
 466:	97 70       	andi	r25, 0x07	; 7
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 468:	89 81       	ldd	r24, Y+1	; 0x01
 46a:	88 7f       	andi	r24, 0xF8	; 248
 46c:	89 2b       	or	r24, r25
		{
			.port = led->port_name,
			.pin = led->pin,
 46e:	92 2f       	mov	r25, r18
 470:	96 95       	lsr	r25
 472:	96 95       	lsr	r25
 474:	96 95       	lsr	r25
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 476:	97 70       	andi	r25, 0x07	; 7
 478:	99 0f       	add	r25, r25
 47a:	99 0f       	add	r25, r25
 47c:	99 0f       	add	r25, r25
 47e:	87 7c       	andi	r24, 0xC7	; 199
 480:	89 2b       	or	r24, r25
		{
			.port = led->port_name,
			.pin = led->pin,
			.direction = GPIO_DIRECTION_OUTPUT,
			.logic = led->led_status
 482:	26 fb       	bst	r18, 6
 484:	22 27       	eor	r18, r18
 486:	20 f9       	bld	r18, 0
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 488:	80 64       	ori	r24, 0x40	; 64
 48a:	20 fb       	bst	r18, 0
 48c:	87 f9       	bld	r24, 7
 48e:	89 83       	std	Y+1, r24	; 0x01
			.port = led->port_name,
			.pin = led->pin,
			.direction = GPIO_DIRECTION_OUTPUT,
			.logic = led->led_status
		};
		ret = GPIO_pin_intialize(&LED_pin_obj);
 490:	ce 01       	movw	r24, r28
 492:	01 96       	adiw	r24, 0x01	; 1
 494:	0e 94 31 03 	call	0x662	; 0x662 <GPIO_pin_intialize>
 498:	01 c0       	rjmp	.+2      	; 0x49c <LED_initialize+0x4a>
Std_ReturnType LED_initialize(const ST_led_t *led)
{
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == led)
	{
		ret = E_NOT_OK;
 49a:	80 e0       	ldi	r24, 0x00	; 0
			.logic = led->led_status
		};
		ret = GPIO_pin_intialize(&LED_pin_obj);
	}
	return ret;
}
 49c:	0f 90       	pop	r0
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	08 95       	ret

000004a4 <LED_turn_on>:
Std_ReturnType LED_turn_on(const ST_led_t *led)
{
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	1f 92       	push	r1
 4aa:	cd b7       	in	r28, 0x3d	; 61
 4ac:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == led)
 4ae:	00 97       	sbiw	r24, 0x00	; 0
 4b0:	f1 f0       	breq	.+60     	; 0x4ee <LED_turn_on+0x4a>
 4b2:	fc 01       	movw	r30, r24
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
		{
				.port = led->port_name,
 4b4:	20 81       	ld	r18, Z
 4b6:	92 2f       	mov	r25, r18
 4b8:	97 70       	andi	r25, 0x07	; 7
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 4ba:	89 81       	ldd	r24, Y+1	; 0x01
 4bc:	88 7f       	andi	r24, 0xF8	; 248
 4be:	89 2b       	or	r24, r25
		{
				.port = led->port_name,
				.pin = led->pin,
 4c0:	92 2f       	mov	r25, r18
 4c2:	96 95       	lsr	r25
 4c4:	96 95       	lsr	r25
 4c6:	96 95       	lsr	r25
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 4c8:	97 70       	andi	r25, 0x07	; 7
 4ca:	99 0f       	add	r25, r25
 4cc:	99 0f       	add	r25, r25
 4ce:	99 0f       	add	r25, r25
 4d0:	87 7c       	andi	r24, 0xC7	; 199
 4d2:	89 2b       	or	r24, r25
		{
				.port = led->port_name,
				.pin = led->pin,
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = led->led_status
 4d4:	26 fb       	bst	r18, 6
 4d6:	22 27       	eor	r18, r18
 4d8:	20 f9       	bld	r18, 0
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 4da:	80 64       	ori	r24, 0x40	; 64
 4dc:	20 fb       	bst	r18, 0
 4de:	87 f9       	bld	r24, 7
 4e0:	89 83       	std	Y+1, r24	; 0x01
				.port = led->port_name,
				.pin = led->pin,
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = led->led_status
		};
		ret = GPIO_pin_write_logic(&LED_pin_obj , GPIO_LOGIC_HIGH);
 4e2:	61 e0       	ldi	r22, 0x01	; 1
 4e4:	ce 01       	movw	r24, r28
 4e6:	01 96       	adiw	r24, 0x01	; 1
 4e8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <GPIO_pin_write_logic>
 4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <LED_turn_on+0x4c>
Std_ReturnType LED_turn_on(const ST_led_t *led)
{
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == led)
	{
		ret = E_NOT_OK;
 4ee:	80 e0       	ldi	r24, 0x00	; 0
				.logic = led->led_status
		};
		ret = GPIO_pin_write_logic(&LED_pin_obj , GPIO_LOGIC_HIGH);
	}
	return ret;
}
 4f0:	0f 90       	pop	r0
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <LED_turn_off>:
Std_ReturnType LED_turn_off(const ST_led_t *led)
{
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	1f 92       	push	r1
 4fe:	cd b7       	in	r28, 0x3d	; 61
 500:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == led)
 502:	00 97       	sbiw	r24, 0x00	; 0
 504:	f1 f0       	breq	.+60     	; 0x542 <__stack+0x43>
 506:	fc 01       	movw	r30, r24
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
		{
				.port = led->port_name,
 508:	20 81       	ld	r18, Z
 50a:	92 2f       	mov	r25, r18
 50c:	97 70       	andi	r25, 0x07	; 7
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 50e:	89 81       	ldd	r24, Y+1	; 0x01
 510:	88 7f       	andi	r24, 0xF8	; 248
 512:	89 2b       	or	r24, r25
		{
				.port = led->port_name,
				.pin = led->pin,
 514:	92 2f       	mov	r25, r18
 516:	96 95       	lsr	r25
 518:	96 95       	lsr	r25
 51a:	96 95       	lsr	r25
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 51c:	97 70       	andi	r25, 0x07	; 7
 51e:	99 0f       	add	r25, r25
 520:	99 0f       	add	r25, r25
 522:	99 0f       	add	r25, r25
 524:	87 7c       	andi	r24, 0xC7	; 199
 526:	89 2b       	or	r24, r25
		{
				.port = led->port_name,
				.pin = led->pin,
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = led->led_status
 528:	26 fb       	bst	r18, 6
 52a:	22 27       	eor	r18, r18
 52c:	20 f9       	bld	r18, 0
	{
		ret = E_NOT_OK;
	}
	else
	{
		ST_pin_config_t LED_pin_obj =
 52e:	80 64       	ori	r24, 0x40	; 64
 530:	20 fb       	bst	r18, 0
 532:	87 f9       	bld	r24, 7
 534:	89 83       	std	Y+1, r24	; 0x01
				.port = led->port_name,
				.pin = led->pin,
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = led->led_status
		};
		ret = GPIO_pin_write_logic(&LED_pin_obj , GPIO_LOGIC_LOW);
 536:	60 e0       	ldi	r22, 0x00	; 0
 538:	ce 01       	movw	r24, r28
 53a:	01 96       	adiw	r24, 0x01	; 1
 53c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <GPIO_pin_write_logic>
 540:	01 c0       	rjmp	.+2      	; 0x544 <__stack+0x45>
Std_ReturnType LED_turn_off(const ST_led_t *led)
{
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == led)
	{
		ret = E_NOT_OK;
 542:	80 e0       	ldi	r24, 0x00	; 0
				.logic = led->led_status
		};
		ret = GPIO_pin_write_logic(&LED_pin_obj , GPIO_LOGIC_LOW);
	}
	return ret;
}
 544:	0f 90       	pop	r0
 546:	df 91       	pop	r29
 548:	cf 91       	pop	r28
 54a:	08 95       	ret

0000054c <PUSH_BTN_intialize>:
#include"PB_interface.h"

Std_ReturnType PUSH_BTN_intialize(const ST_PUSH_BTN_t *btn)
{
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == btn)
 54c:	00 97       	sbiw	r24, 0x00	; 0
 54e:	19 f0       	breq	.+6      	; 0x556 <PUSH_BTN_intialize+0xa>
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret = GPIO_pin_direction_intialize(&(btn->PUSH_BTN_pin));
 550:	0e 94 b0 02 	call	0x560	; 0x560 <GPIO_pin_direction_intialize>
 554:	08 95       	ret
Std_ReturnType PUSH_BTN_intialize(const ST_PUSH_BTN_t *btn)
{
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == btn)
	{
		ret = E_NOT_OK;
 556:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ret = GPIO_pin_direction_intialize(&(btn->PUSH_BTN_pin));
	}
	return ret;
}
 558:	08 95       	ret

0000055a <main>:

#include "APPLICATION/app.h"

void main(void)
{
	appmain();
 55a:	0e 94 b5 01 	call	0x36a	; 0x36a <appmain>
 55e:	08 95       	ret

00000560 <GPIO_pin_direction_intialize>:
       TOGGLE_BIT(*port_registers[_pin_config->port],_pin_config->pin);
       ret = E_OK;
    }

    return ret;
}
 560:	fc 01       	movw	r30, r24
 562:	89 2b       	or	r24, r25
 564:	d1 f1       	breq	.+116    	; 0x5da <GPIO_pin_direction_intialize+0x7a>
 566:	20 81       	ld	r18, Z
 568:	26 95       	lsr	r18
 56a:	26 95       	lsr	r18
 56c:	26 95       	lsr	r18
 56e:	27 70       	andi	r18, 0x07	; 7
 570:	80 81       	ld	r24, Z
 572:	86 fb       	bst	r24, 6
 574:	99 27       	eor	r25, r25
 576:	90 f9       	bld	r25, 0
 578:	86 ff       	sbrs	r24, 6
 57a:	18 c0       	rjmp	.+48     	; 0x5ac <GPIO_pin_direction_intialize+0x4c>
 57c:	91 30       	cpi	r25, 0x01	; 1
 57e:	79 f5       	brne	.+94     	; 0x5de <GPIO_pin_direction_intialize+0x7e>
 580:	e8 2f       	mov	r30, r24
 582:	e7 70       	andi	r30, 0x07	; 7
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	ee 0f       	add	r30, r30
 588:	ff 1f       	adc	r31, r31
 58a:	ed 5d       	subi	r30, 0xDD	; 221
 58c:	fe 4f       	sbci	r31, 0xFE	; 254
 58e:	01 90       	ld	r0, Z+
 590:	f0 81       	ld	r31, Z
 592:	e0 2d       	mov	r30, r0
 594:	30 81       	ld	r19, Z
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <GPIO_pin_direction_intialize+0x40>
 59c:	88 0f       	add	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	2a 95       	dec	r18
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <GPIO_pin_direction_intialize+0x3c>
 5a4:	83 2b       	or	r24, r19
 5a6:	80 83       	st	Z, r24
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	08 95       	ret
 5ac:	e0 81       	ld	r30, Z
 5ae:	e7 70       	andi	r30, 0x07	; 7
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	ee 0f       	add	r30, r30
 5b4:	ff 1f       	adc	r31, r31
 5b6:	ed 5d       	subi	r30, 0xDD	; 221
 5b8:	fe 4f       	sbci	r31, 0xFE	; 254
 5ba:	01 90       	ld	r0, Z+
 5bc:	f0 81       	ld	r31, Z
 5be:	e0 2d       	mov	r30, r0
 5c0:	30 81       	ld	r19, Z
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <GPIO_pin_direction_intialize+0x6c>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	2a 95       	dec	r18
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <GPIO_pin_direction_intialize+0x68>
 5d0:	80 95       	com	r24
 5d2:	83 23       	and	r24, r19
 5d4:	80 83       	st	Z, r24
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	08 95       	ret
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	08 95       	ret
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	08 95       	ret

000005e2 <GPIO_pin_write_logic>:
 5e2:	00 97       	sbiw	r24, 0x00	; 0
 5e4:	d1 f1       	breq	.+116    	; 0x65a <GPIO_pin_write_logic+0x78>
 5e6:	dc 01       	movw	r26, r24
 5e8:	2c 91       	ld	r18, X
 5ea:	26 95       	lsr	r18
 5ec:	26 95       	lsr	r18
 5ee:	26 95       	lsr	r18
 5f0:	27 70       	andi	r18, 0x07	; 7
 5f2:	66 23       	and	r22, r22
 5f4:	19 f0       	breq	.+6      	; 0x5fc <GPIO_pin_write_logic+0x1a>
 5f6:	61 30       	cpi	r22, 0x01	; 1
 5f8:	c9 f0       	breq	.+50     	; 0x62c <GPIO_pin_write_logic+0x4a>
 5fa:	31 c0       	rjmp	.+98     	; 0x65e <GPIO_pin_write_logic+0x7c>
 5fc:	dc 01       	movw	r26, r24
 5fe:	ec 91       	ld	r30, X
 600:	e7 70       	andi	r30, 0x07	; 7
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	ee 0f       	add	r30, r30
 606:	ff 1f       	adc	r31, r31
 608:	e5 5e       	subi	r30, 0xE5	; 229
 60a:	fe 4f       	sbci	r31, 0xFE	; 254
 60c:	01 90       	ld	r0, Z+
 60e:	f0 81       	ld	r31, Z
 610:	e0 2d       	mov	r30, r0
 612:	30 81       	ld	r19, Z
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	02 c0       	rjmp	.+4      	; 0x61e <GPIO_pin_write_logic+0x3c>
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	2a 95       	dec	r18
 620:	e2 f7       	brpl	.-8      	; 0x61a <GPIO_pin_write_logic+0x38>
 622:	80 95       	com	r24
 624:	83 23       	and	r24, r19
 626:	80 83       	st	Z, r24
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	08 95       	ret
 62c:	dc 01       	movw	r26, r24
 62e:	ec 91       	ld	r30, X
 630:	e7 70       	andi	r30, 0x07	; 7
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	ee 0f       	add	r30, r30
 636:	ff 1f       	adc	r31, r31
 638:	e5 5e       	subi	r30, 0xE5	; 229
 63a:	fe 4f       	sbci	r31, 0xFE	; 254
 63c:	01 90       	ld	r0, Z+
 63e:	f0 81       	ld	r31, Z
 640:	e0 2d       	mov	r30, r0
 642:	30 81       	ld	r19, Z
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	02 c0       	rjmp	.+4      	; 0x64e <GPIO_pin_write_logic+0x6c>
 64a:	88 0f       	add	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	2a 95       	dec	r18
 650:	e2 f7       	brpl	.-8      	; 0x64a <GPIO_pin_write_logic+0x68>
 652:	83 2b       	or	r24, r19
 654:	80 83       	st	Z, r24
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	08 95       	ret
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	08 95       	ret
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	08 95       	ret

00000662 <GPIO_pin_intialize>:
Std_ReturnType GPIO_pin_intialize(const ST_pin_config_t *_pin_config)
{
 662:	cf 93       	push	r28
 664:	df 93       	push	r29
    Std_ReturnType ret = E_NOT_OK;

    if(PTR_NULL == _pin_config)
 666:	00 97       	sbiw	r24, 0x00	; 0
 668:	59 f0       	breq	.+22     	; 0x680 <GPIO_pin_intialize+0x1e>
 66a:	ec 01       	movw	r28, r24
    {
        ret = E_NOT_OK;
    }
    else
    {
       ret = GPIO_pin_direction_intialize(_pin_config);
 66c:	0e 94 b0 02 	call	0x560	; 0x560 <GPIO_pin_direction_intialize>
       ret = GPIO_pin_write_logic(_pin_config,_pin_config->logic);
 670:	68 81       	ld	r22, Y
 672:	67 fb       	bst	r22, 7
 674:	66 27       	eor	r22, r22
 676:	60 f9       	bld	r22, 0
 678:	ce 01       	movw	r24, r28
 67a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <GPIO_pin_write_logic>
 67e:	01 c0       	rjmp	.+2      	; 0x682 <GPIO_pin_intialize+0x20>
{
    Std_ReturnType ret = E_NOT_OK;

    if(PTR_NULL == _pin_config)
    {
        ret = E_NOT_OK;
 680:	80 e0       	ldi	r24, 0x00	; 0
    {
       ret = GPIO_pin_direction_intialize(_pin_config);
       ret = GPIO_pin_write_logic(_pin_config,_pin_config->logic);
    }
    return ret;
}
 682:	df 91       	pop	r29
 684:	cf 91       	pop	r28
 686:	08 95       	ret

00000688 <EXT0_INTERRUPT_SetInterruptHandler>:
			break;
		}
		}
	}
	return ret;
}
 688:	00 97       	sbiw	r24, 0x00	; 0
 68a:	31 f0       	breq	.+12     	; 0x698 <EXT0_INTERRUPT_SetInterruptHandler+0x10>
 68c:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <INT0_InterruptHandler+0x1>
 690:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <INT0_InterruptHandler>
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	08 95       	ret
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	08 95       	ret

0000069c <EXT1_INTERRUPT_SetInterruptHandler>:
 69c:	00 97       	sbiw	r24, 0x00	; 0
 69e:	31 f0       	breq	.+12     	; 0x6ac <EXT1_INTERRUPT_SetInterruptHandler+0x10>
 6a0:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <INT1_InterruptHandler+0x1>
 6a4:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <INT1_InterruptHandler>
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	08 95       	ret
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	08 95       	ret

000006b0 <EXT2_INTERRUPT_SetInterruptHandler>:
 6b0:	00 97       	sbiw	r24, 0x00	; 0
 6b2:	31 f0       	breq	.+12     	; 0x6c0 <EXT2_INTERRUPT_SetInterruptHandler+0x10>
 6b4:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <INT2_InterruptHandler+0x1>
 6b8:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <INT2_InterruptHandler>
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	08 95       	ret
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	08 95       	ret

000006c4 <EXT_vINTERRUPT_Init>:
 6c4:	00 97       	sbiw	r24, 0x00	; 0
 6c6:	09 f4       	brne	.+2      	; 0x6ca <EXT_vINTERRUPT_Init+0x6>
 6c8:	89 c0       	rjmp	.+274    	; 0x7dc <EXT_vINTERRUPT_Init+0x118>
 6ca:	fc 01       	movw	r30, r24
 6cc:	82 81       	ldd	r24, Z+2	; 0x02
 6ce:	81 30       	cpi	r24, 0x01	; 1
 6d0:	c9 f1       	breq	.+114    	; 0x744 <EXT_vINTERRUPT_Init+0x80>
 6d2:	20 f0       	brcs	.+8      	; 0x6dc <EXT_vINTERRUPT_Init+0x18>
 6d4:	82 30       	cpi	r24, 0x02	; 2
 6d6:	09 f4       	brne	.+2      	; 0x6da <EXT_vINTERRUPT_Init+0x16>
 6d8:	68 c0       	rjmp	.+208    	; 0x7aa <EXT_vINTERRUPT_Init+0xe6>
 6da:	82 c0       	rjmp	.+260    	; 0x7e0 <EXT_vINTERRUPT_Init+0x11c>
 6dc:	83 81       	ldd	r24, Z+3	; 0x03
 6de:	81 11       	cpse	r24, r1
 6e0:	0a c0       	rjmp	.+20     	; 0x6f6 <EXT_vINTERRUPT_Init+0x32>
 6e2:	0e 94 8a 04 	call	0x914	; 0x914 <MCU_vEnableInterrupt>
 6e6:	8b b7       	in	r24, 0x3b	; 59
 6e8:	80 64       	ori	r24, 0x40	; 64
 6ea:	8b bf       	out	0x3b, r24	; 59
 6ec:	85 b7       	in	r24, 0x35	; 53
 6ee:	8c 7f       	andi	r24, 0xFC	; 252
 6f0:	85 bf       	out	0x35, r24	; 53
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	08 95       	ret
 6f6:	81 30       	cpi	r24, 0x01	; 1
 6f8:	59 f4       	brne	.+22     	; 0x710 <EXT_vINTERRUPT_Init+0x4c>
 6fa:	0e 94 8a 04 	call	0x914	; 0x914 <MCU_vEnableInterrupt>
 6fe:	8b b7       	in	r24, 0x3b	; 59
 700:	80 64       	ori	r24, 0x40	; 64
 702:	8b bf       	out	0x3b, r24	; 59
 704:	85 b7       	in	r24, 0x35	; 53
 706:	8d 7f       	andi	r24, 0xFD	; 253
 708:	81 60       	ori	r24, 0x01	; 1
 70a:	85 bf       	out	0x35, r24	; 53
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	08 95       	ret
 710:	82 30       	cpi	r24, 0x02	; 2
 712:	59 f4       	brne	.+22     	; 0x72a <EXT_vINTERRUPT_Init+0x66>
 714:	0e 94 8a 04 	call	0x914	; 0x914 <MCU_vEnableInterrupt>
 718:	8b b7       	in	r24, 0x3b	; 59
 71a:	80 64       	ori	r24, 0x40	; 64
 71c:	8b bf       	out	0x3b, r24	; 59
 71e:	85 b7       	in	r24, 0x35	; 53
 720:	82 60       	ori	r24, 0x02	; 2
 722:	8e 7f       	andi	r24, 0xFE	; 254
 724:	85 bf       	out	0x35, r24	; 53
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	08 95       	ret
 72a:	83 30       	cpi	r24, 0x03	; 3
 72c:	09 f0       	breq	.+2      	; 0x730 <EXT_vINTERRUPT_Init+0x6c>
 72e:	5a c0       	rjmp	.+180    	; 0x7e4 <EXT_vINTERRUPT_Init+0x120>
 730:	0e 94 8a 04 	call	0x914	; 0x914 <MCU_vEnableInterrupt>
 734:	8b b7       	in	r24, 0x3b	; 59
 736:	80 64       	ori	r24, 0x40	; 64
 738:	8b bf       	out	0x3b, r24	; 59
 73a:	85 b7       	in	r24, 0x35	; 53
 73c:	83 60       	ori	r24, 0x03	; 3
 73e:	85 bf       	out	0x35, r24	; 53
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	08 95       	ret
 744:	83 81       	ldd	r24, Z+3	; 0x03
 746:	81 11       	cpse	r24, r1
 748:	0a c0       	rjmp	.+20     	; 0x75e <EXT_vINTERRUPT_Init+0x9a>
 74a:	0e 94 8a 04 	call	0x914	; 0x914 <MCU_vEnableInterrupt>
 74e:	8b b7       	in	r24, 0x3b	; 59
 750:	80 68       	ori	r24, 0x80	; 128
 752:	8b bf       	out	0x3b, r24	; 59
 754:	85 b7       	in	r24, 0x35	; 53
 756:	83 7f       	andi	r24, 0xF3	; 243
 758:	85 bf       	out	0x35, r24	; 53
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	08 95       	ret
 75e:	81 30       	cpi	r24, 0x01	; 1
 760:	59 f4       	brne	.+22     	; 0x778 <EXT_vINTERRUPT_Init+0xb4>
 762:	0e 94 8a 04 	call	0x914	; 0x914 <MCU_vEnableInterrupt>
 766:	8b b7       	in	r24, 0x3b	; 59
 768:	80 68       	ori	r24, 0x80	; 128
 76a:	8b bf       	out	0x3b, r24	; 59
 76c:	85 b7       	in	r24, 0x35	; 53
 76e:	87 7f       	andi	r24, 0xF7	; 247
 770:	84 60       	ori	r24, 0x04	; 4
 772:	85 bf       	out	0x35, r24	; 53
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	08 95       	ret
 778:	82 30       	cpi	r24, 0x02	; 2
 77a:	59 f4       	brne	.+22     	; 0x792 <EXT_vINTERRUPT_Init+0xce>
 77c:	0e 94 8a 04 	call	0x914	; 0x914 <MCU_vEnableInterrupt>
 780:	8b b7       	in	r24, 0x3b	; 59
 782:	80 68       	ori	r24, 0x80	; 128
 784:	8b bf       	out	0x3b, r24	; 59
 786:	85 b7       	in	r24, 0x35	; 53
 788:	88 60       	ori	r24, 0x08	; 8
 78a:	8b 7f       	andi	r24, 0xFB	; 251
 78c:	85 bf       	out	0x35, r24	; 53
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	08 95       	ret
 792:	83 30       	cpi	r24, 0x03	; 3
 794:	49 f5       	brne	.+82     	; 0x7e8 <EXT_vINTERRUPT_Init+0x124>
 796:	0e 94 8a 04 	call	0x914	; 0x914 <MCU_vEnableInterrupt>
 79a:	8b b7       	in	r24, 0x3b	; 59
 79c:	80 68       	ori	r24, 0x80	; 128
 79e:	8b bf       	out	0x3b, r24	; 59
 7a0:	85 b7       	in	r24, 0x35	; 53
 7a2:	8c 60       	ori	r24, 0x0C	; 12
 7a4:	85 bf       	out	0x35, r24	; 53
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	08 95       	ret
 7aa:	83 81       	ldd	r24, Z+3	; 0x03
 7ac:	82 30       	cpi	r24, 0x02	; 2
 7ae:	51 f4       	brne	.+20     	; 0x7c4 <EXT_vINTERRUPT_Init+0x100>
 7b0:	0e 94 8a 04 	call	0x914	; 0x914 <MCU_vEnableInterrupt>
 7b4:	8b b7       	in	r24, 0x3b	; 59
 7b6:	80 62       	ori	r24, 0x20	; 32
 7b8:	8b bf       	out	0x3b, r24	; 59
 7ba:	84 b7       	in	r24, 0x34	; 52
 7bc:	8f 7b       	andi	r24, 0xBF	; 191
 7be:	84 bf       	out	0x34, r24	; 52
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	08 95       	ret
 7c4:	83 30       	cpi	r24, 0x03	; 3
 7c6:	91 f4       	brne	.+36     	; 0x7ec <EXT_vINTERRUPT_Init+0x128>
 7c8:	0e 94 8a 04 	call	0x914	; 0x914 <MCU_vEnableInterrupt>
 7cc:	8b b7       	in	r24, 0x3b	; 59
 7ce:	80 62       	ori	r24, 0x20	; 32
 7d0:	8b bf       	out	0x3b, r24	; 59
 7d2:	84 b7       	in	r24, 0x34	; 52
 7d4:	80 64       	ori	r24, 0x40	; 64
 7d6:	84 bf       	out	0x34, r24	; 52
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	08 95       	ret
 7dc:	80 e0       	ldi	r24, 0x00	; 0
 7de:	08 95       	ret
 7e0:	80 e0       	ldi	r24, 0x00	; 0
 7e2:	08 95       	ret
 7e4:	80 e0       	ldi	r24, 0x00	; 0
 7e6:	08 95       	ret
 7e8:	80 e0       	ldi	r24, 0x00	; 0
 7ea:	08 95       	ret
 7ec:	80 e0       	ldi	r24, 0x00	; 0
 7ee:	08 95       	ret

000007f0 <EXT_INTERRUPT_SetInterruptHandler>:

Std_ReturnType EXT_INTERRUPT_SetInterruptHandler(const ST_EXT_INTERRUPTS_CFG *EXT_INTx)
{

    Std_ReturnType ret = E_NOT_OK;
    if(PTR_NULL == EXT_INTx)
 7f0:	00 97       	sbiw	r24, 0x00	; 0
 7f2:	b9 f0       	breq	.+46     	; 0x822 <EXT_INTERRUPT_SetInterruptHandler+0x32>
 7f4:	fc 01       	movw	r30, r24
    {
        ret = E_NOT_OK;
    }
    else
    {
       switch(EXT_INTx->EXTERNAL_INTERRUPRT_Number)
 7f6:	82 81       	ldd	r24, Z+2	; 0x02
 7f8:	81 30       	cpi	r24, 0x01	; 1
 7fa:	49 f0       	breq	.+18     	; 0x80e <EXT_INTERRUPT_SetInterruptHandler+0x1e>
 7fc:	18 f0       	brcs	.+6      	; 0x804 <EXT_INTERRUPT_SetInterruptHandler+0x14>
 7fe:	82 30       	cpi	r24, 0x02	; 2
 800:	59 f0       	breq	.+22     	; 0x818 <EXT_INTERRUPT_SetInterruptHandler+0x28>
 802:	11 c0       	rjmp	.+34     	; 0x826 <EXT_INTERRUPT_SetInterruptHandler+0x36>
        {
           case EXT0_INTERRUPTS:
            {
                ret = EXT0_INTERRUPT_SetInterruptHandler(EXT_INTx->INTERRUPT_EXTERNAL_HANDLER);
 804:	80 81       	ld	r24, Z
 806:	91 81       	ldd	r25, Z+1	; 0x01
 808:	0e 94 44 03 	call	0x688	; 0x688 <EXT0_INTERRUPT_SetInterruptHandler>
                break;
 80c:	08 95       	ret
            }
           case EXT1_INTERRUPTS:
            {
                ret = EXT1_INTERRUPT_SetInterruptHandler(EXT_INTx->INTERRUPT_EXTERNAL_HANDLER);
 80e:	80 81       	ld	r24, Z
 810:	91 81       	ldd	r25, Z+1	; 0x01
 812:	0e 94 4e 03 	call	0x69c	; 0x69c <EXT1_INTERRUPT_SetInterruptHandler>
                break;
 816:	08 95       	ret
            }
           case EXT2_INTERRUPTS:
            {
                ret = EXT2_INTERRUPT_SetInterruptHandler(EXT_INTx->INTERRUPT_EXTERNAL_HANDLER);
 818:	80 81       	ld	r24, Z
 81a:	91 81       	ldd	r25, Z+1	; 0x01
 81c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <EXT2_INTERRUPT_SetInterruptHandler>
                break;
 820:	08 95       	ret
{

    Std_ReturnType ret = E_NOT_OK;
    if(PTR_NULL == EXT_INTx)
    {
        ret = E_NOT_OK;
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	08 95       	ret
}

Std_ReturnType EXT_INTERRUPT_SetInterruptHandler(const ST_EXT_INTERRUPTS_CFG *EXT_INTx)
{

    Std_ReturnType ret = E_NOT_OK;
 826:	80 e0       	ldi	r24, 0x00	; 0
                break;
            }
        }
    }
    return ret;
}
 828:	08 95       	ret

0000082a <__vector_1>:



ISR(EXT_INT_0)
{
 82a:	1f 92       	push	r1
 82c:	0f 92       	push	r0
 82e:	0f b6       	in	r0, 0x3f	; 63
 830:	0f 92       	push	r0
 832:	11 24       	eor	r1, r1
 834:	2f 93       	push	r18
 836:	3f 93       	push	r19
 838:	4f 93       	push	r20
 83a:	5f 93       	push	r21
 83c:	6f 93       	push	r22
 83e:	7f 93       	push	r23
 840:	8f 93       	push	r24
 842:	9f 93       	push	r25
 844:	af 93       	push	r26
 846:	bf 93       	push	r27
 848:	ef 93       	push	r30
 84a:	ff 93       	push	r31
	INT0_InterruptHandler();
 84c:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <INT0_InterruptHandler>
 850:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <INT0_InterruptHandler+0x1>
 854:	09 95       	icall
}
 856:	ff 91       	pop	r31
 858:	ef 91       	pop	r30
 85a:	bf 91       	pop	r27
 85c:	af 91       	pop	r26
 85e:	9f 91       	pop	r25
 860:	8f 91       	pop	r24
 862:	7f 91       	pop	r23
 864:	6f 91       	pop	r22
 866:	5f 91       	pop	r21
 868:	4f 91       	pop	r20
 86a:	3f 91       	pop	r19
 86c:	2f 91       	pop	r18
 86e:	0f 90       	pop	r0
 870:	0f be       	out	0x3f, r0	; 63
 872:	0f 90       	pop	r0
 874:	1f 90       	pop	r1
 876:	18 95       	reti

00000878 <__vector_2>:
ISR(EXT_INT_1)
{
 878:	1f 92       	push	r1
 87a:	0f 92       	push	r0
 87c:	0f b6       	in	r0, 0x3f	; 63
 87e:	0f 92       	push	r0
 880:	11 24       	eor	r1, r1
 882:	2f 93       	push	r18
 884:	3f 93       	push	r19
 886:	4f 93       	push	r20
 888:	5f 93       	push	r21
 88a:	6f 93       	push	r22
 88c:	7f 93       	push	r23
 88e:	8f 93       	push	r24
 890:	9f 93       	push	r25
 892:	af 93       	push	r26
 894:	bf 93       	push	r27
 896:	ef 93       	push	r30
 898:	ff 93       	push	r31
	INT1_InterruptHandler();
 89a:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <INT1_InterruptHandler>
 89e:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <INT1_InterruptHandler+0x1>
 8a2:	09 95       	icall
}
 8a4:	ff 91       	pop	r31
 8a6:	ef 91       	pop	r30
 8a8:	bf 91       	pop	r27
 8aa:	af 91       	pop	r26
 8ac:	9f 91       	pop	r25
 8ae:	8f 91       	pop	r24
 8b0:	7f 91       	pop	r23
 8b2:	6f 91       	pop	r22
 8b4:	5f 91       	pop	r21
 8b6:	4f 91       	pop	r20
 8b8:	3f 91       	pop	r19
 8ba:	2f 91       	pop	r18
 8bc:	0f 90       	pop	r0
 8be:	0f be       	out	0x3f, r0	; 63
 8c0:	0f 90       	pop	r0
 8c2:	1f 90       	pop	r1
 8c4:	18 95       	reti

000008c6 <__vector_3>:
ISR(EXT_INT_2)
{
 8c6:	1f 92       	push	r1
 8c8:	0f 92       	push	r0
 8ca:	0f b6       	in	r0, 0x3f	; 63
 8cc:	0f 92       	push	r0
 8ce:	11 24       	eor	r1, r1
 8d0:	2f 93       	push	r18
 8d2:	3f 93       	push	r19
 8d4:	4f 93       	push	r20
 8d6:	5f 93       	push	r21
 8d8:	6f 93       	push	r22
 8da:	7f 93       	push	r23
 8dc:	8f 93       	push	r24
 8de:	9f 93       	push	r25
 8e0:	af 93       	push	r26
 8e2:	bf 93       	push	r27
 8e4:	ef 93       	push	r30
 8e6:	ff 93       	push	r31
	INT2_InterruptHandler();
 8e8:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <INT2_InterruptHandler>
 8ec:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <INT2_InterruptHandler+0x1>
 8f0:	09 95       	icall
}
 8f2:	ff 91       	pop	r31
 8f4:	ef 91       	pop	r30
 8f6:	bf 91       	pop	r27
 8f8:	af 91       	pop	r26
 8fa:	9f 91       	pop	r25
 8fc:	8f 91       	pop	r24
 8fe:	7f 91       	pop	r23
 900:	6f 91       	pop	r22
 902:	5f 91       	pop	r21
 904:	4f 91       	pop	r20
 906:	3f 91       	pop	r19
 908:	2f 91       	pop	r18
 90a:	0f 90       	pop	r0
 90c:	0f be       	out	0x3f, r0	; 63
 90e:	0f 90       	pop	r0
 910:	1f 90       	pop	r1
 912:	18 95       	reti

00000914 <MCU_vEnableInterrupt>:

#include"MCU_Interface.h"

void MCU_vEnableInterrupt(void)
{
	SET_BIT(SREG_REG,7);
 914:	8f b7       	in	r24, 0x3f	; 63
 916:	80 68       	ori	r24, 0x80	; 128
 918:	8f bf       	out	0x3f, r24	; 63
 91a:	08 95       	ret

0000091c <timer0_set_ovf_isr>:
	
	/* start timer */
	CLEAR_BIT(TCCR0_REG , TCCR0_REG_CS02_BIT);
	SET_BIT(TCCR0_REG , TCCR0_REG_CS01_BIT);
	CLEAR_BIT(TCCR0_REG , TCCR0_REG_CS00_BIT);
}
 91c:	00 97       	sbiw	r24, 0x00	; 0
 91e:	31 f0       	breq	.+12     	; 0x92c <timer0_set_ovf_isr+0x10>
 920:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <ptr_func_overflow_isr+0x1>
 924:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <ptr_func_overflow_isr>
 928:	8b e0       	ldi	r24, 0x0B	; 11
 92a:	08 95       	ret
 92c:	8c e0       	ldi	r24, 0x0C	; 12
 92e:	08 95       	ret

00000930 <timer0_set_ctc_isr>:
 930:	00 97       	sbiw	r24, 0x00	; 0
 932:	31 f0       	breq	.+12     	; 0x940 <timer0_set_ctc_isr+0x10>
 934:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <ptr_func_ctc_isr+0x1>
 938:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <ptr_func_ctc_isr>
 93c:	8d e0       	ldi	r24, 0x0D	; 13
 93e:	08 95       	ret
 940:	8e e0       	ldi	r24, 0x0E	; 14
 942:	08 95       	ret

00000944 <TIMER0_init>:
 944:	cf 93       	push	r28
 946:	df 93       	push	r29
 948:	dc 01       	movw	r26, r24
 94a:	89 2b       	or	r24, r25
 94c:	09 f4       	brne	.+2      	; 0x950 <TIMER0_init+0xc>
 94e:	aa c0       	rjmp	.+340    	; 0xaa4 <TIMER0_init+0x160>
 950:	8c 91       	ld	r24, X
 952:	81 30       	cpi	r24, 0x01	; 1
 954:	89 f0       	breq	.+34     	; 0x978 <TIMER0_init+0x34>
 956:	28 f0       	brcs	.+10     	; 0x962 <TIMER0_init+0x1e>
 958:	82 30       	cpi	r24, 0x02	; 2
 95a:	41 f0       	breq	.+16     	; 0x96c <TIMER0_init+0x28>
 95c:	83 30       	cpi	r24, 0x03	; 3
 95e:	91 f0       	breq	.+36     	; 0x984 <TIMER0_init+0x40>
 960:	16 c0       	rjmp	.+44     	; 0x98e <TIMER0_init+0x4a>
 962:	83 b7       	in	r24, 0x33	; 51
 964:	87 7b       	andi	r24, 0xB7	; 183
 966:	83 bf       	out	0x33, r24	; 51
 968:	83 e0       	ldi	r24, 0x03	; 3
 96a:	12 c0       	rjmp	.+36     	; 0x990 <TIMER0_init+0x4c>
 96c:	83 b7       	in	r24, 0x33	; 51
 96e:	87 7f       	andi	r24, 0xF7	; 247
 970:	80 64       	ori	r24, 0x40	; 64
 972:	83 bf       	out	0x33, r24	; 51
 974:	83 e0       	ldi	r24, 0x03	; 3
 976:	0c c0       	rjmp	.+24     	; 0x990 <TIMER0_init+0x4c>
 978:	83 b7       	in	r24, 0x33	; 51
 97a:	88 60       	ori	r24, 0x08	; 8
 97c:	8f 7b       	andi	r24, 0xBF	; 191
 97e:	83 bf       	out	0x33, r24	; 51
 980:	83 e0       	ldi	r24, 0x03	; 3
 982:	06 c0       	rjmp	.+12     	; 0x990 <TIMER0_init+0x4c>
 984:	83 b7       	in	r24, 0x33	; 51
 986:	88 64       	ori	r24, 0x48	; 72
 988:	83 bf       	out	0x33, r24	; 51
 98a:	83 e0       	ldi	r24, 0x03	; 3
 98c:	01 c0       	rjmp	.+2      	; 0x990 <TIMER0_init+0x4c>
 98e:	84 e0       	ldi	r24, 0x04	; 4
 990:	83 30       	cpi	r24, 0x03	; 3
 992:	d1 f5       	brne	.+116    	; 0xa08 <TIMER0_init+0xc4>
 994:	12 96       	adiw	r26, 0x02	; 2
 996:	ec 91       	ld	r30, X
 998:	12 97       	sbiw	r26, 0x02	; 2
 99a:	4e 2f       	mov	r20, r30
 99c:	50 e0       	ldi	r21, 0x00	; 0
 99e:	48 30       	cpi	r20, 0x08	; 8
 9a0:	51 05       	cpc	r21, r1
 9a2:	88 f5       	brcc	.+98     	; 0xa06 <TIMER0_init+0xc2>
 9a4:	fa 01       	movw	r30, r20
 9a6:	ee 5b       	subi	r30, 0xBE	; 190
 9a8:	ff 4f       	sbci	r31, 0xFF	; 255
 9aa:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__tablejump2__>
 9ae:	83 b7       	in	r24, 0x33	; 51
 9b0:	8f 7c       	andi	r24, 0xCF	; 207
 9b2:	83 bf       	out	0x33, r24	; 51
 9b4:	85 e0       	ldi	r24, 0x05	; 5
 9b6:	28 c0       	rjmp	.+80     	; 0xa08 <TIMER0_init+0xc4>
 9b8:	83 b7       	in	r24, 0x33	; 51
 9ba:	8f 7d       	andi	r24, 0xDF	; 223
 9bc:	80 61       	ori	r24, 0x10	; 16
 9be:	83 bf       	out	0x33, r24	; 51
 9c0:	85 e0       	ldi	r24, 0x05	; 5
 9c2:	22 c0       	rjmp	.+68     	; 0xa08 <TIMER0_init+0xc4>
 9c4:	83 b7       	in	r24, 0x33	; 51
 9c6:	80 62       	ori	r24, 0x20	; 32
 9c8:	8f 7e       	andi	r24, 0xEF	; 239
 9ca:	83 bf       	out	0x33, r24	; 51
 9cc:	85 e0       	ldi	r24, 0x05	; 5
 9ce:	1c c0       	rjmp	.+56     	; 0xa08 <TIMER0_init+0xc4>
 9d0:	83 b7       	in	r24, 0x33	; 51
 9d2:	80 63       	ori	r24, 0x30	; 48
 9d4:	83 bf       	out	0x33, r24	; 51
 9d6:	85 e0       	ldi	r24, 0x05	; 5
 9d8:	17 c0       	rjmp	.+46     	; 0xa08 <TIMER0_init+0xc4>
 9da:	83 b7       	in	r24, 0x33	; 51
 9dc:	80 62       	ori	r24, 0x20	; 32
 9de:	8f 7e       	andi	r24, 0xEF	; 239
 9e0:	83 bf       	out	0x33, r24	; 51
 9e2:	85 e0       	ldi	r24, 0x05	; 5
 9e4:	11 c0       	rjmp	.+34     	; 0xa08 <TIMER0_init+0xc4>
 9e6:	83 b7       	in	r24, 0x33	; 51
 9e8:	80 63       	ori	r24, 0x30	; 48
 9ea:	83 bf       	out	0x33, r24	; 51
 9ec:	85 e0       	ldi	r24, 0x05	; 5
 9ee:	0c c0       	rjmp	.+24     	; 0xa08 <TIMER0_init+0xc4>
 9f0:	83 b7       	in	r24, 0x33	; 51
 9f2:	80 62       	ori	r24, 0x20	; 32
 9f4:	8f 7e       	andi	r24, 0xEF	; 239
 9f6:	83 bf       	out	0x33, r24	; 51
 9f8:	85 e0       	ldi	r24, 0x05	; 5
 9fa:	06 c0       	rjmp	.+12     	; 0xa08 <TIMER0_init+0xc4>
 9fc:	83 b7       	in	r24, 0x33	; 51
 9fe:	80 63       	ori	r24, 0x30	; 48
 a00:	83 bf       	out	0x33, r24	; 51
 a02:	85 e0       	ldi	r24, 0x05	; 5
 a04:	01 c0       	rjmp	.+2      	; 0xa08 <TIMER0_init+0xc4>
 a06:	86 e0       	ldi	r24, 0x06	; 6
 a08:	ed 01       	movw	r28, r26
 a0a:	85 30       	cpi	r24, 0x05	; 5
 a0c:	79 f5       	brne	.+94     	; 0xa6c <TIMER0_init+0x128>
 a0e:	8b 81       	ldd	r24, Y+3	; 0x03
 a10:	88 23       	and	r24, r24
 a12:	19 f0       	breq	.+6      	; 0xa1a <TIMER0_init+0xd6>
 a14:	81 30       	cpi	r24, 0x01	; 1
 a16:	a9 f0       	breq	.+42     	; 0xa42 <TIMER0_init+0xfe>
 a18:	24 c0       	rjmp	.+72     	; 0xa62 <TIMER0_init+0x11e>
 a1a:	88 81       	ld	r24, Y
 a1c:	88 23       	and	r24, r24
 a1e:	19 f0       	breq	.+6      	; 0xa26 <TIMER0_init+0xe2>
 a20:	81 30       	cpi	r24, 0x01	; 1
 a22:	41 f0       	breq	.+16     	; 0xa34 <TIMER0_init+0xf0>
 a24:	20 c0       	rjmp	.+64     	; 0xa66 <TIMER0_init+0x122>
 a26:	0e 94 8a 04 	call	0x914	; 0x914 <MCU_vEnableInterrupt>
 a2a:	89 b7       	in	r24, 0x39	; 57
 a2c:	81 60       	ori	r24, 0x01	; 1
 a2e:	89 bf       	out	0x39, r24	; 57
 a30:	87 e0       	ldi	r24, 0x07	; 7
 a32:	1c c0       	rjmp	.+56     	; 0xa6c <TIMER0_init+0x128>
 a34:	0e 94 8a 04 	call	0x914	; 0x914 <MCU_vEnableInterrupt>
 a38:	89 b7       	in	r24, 0x39	; 57
 a3a:	82 60       	ori	r24, 0x02	; 2
 a3c:	89 bf       	out	0x39, r24	; 57
 a3e:	87 e0       	ldi	r24, 0x07	; 7
 a40:	15 c0       	rjmp	.+42     	; 0xa6c <TIMER0_init+0x128>
 a42:	88 81       	ld	r24, Y
 a44:	88 23       	and	r24, r24
 a46:	19 f0       	breq	.+6      	; 0xa4e <TIMER0_init+0x10a>
 a48:	81 30       	cpi	r24, 0x01	; 1
 a4a:	31 f0       	breq	.+12     	; 0xa58 <TIMER0_init+0x114>
 a4c:	0e c0       	rjmp	.+28     	; 0xa6a <TIMER0_init+0x126>
 a4e:	89 b7       	in	r24, 0x39	; 57
 a50:	8e 7f       	andi	r24, 0xFE	; 254
 a52:	89 bf       	out	0x39, r24	; 57
 a54:	87 e0       	ldi	r24, 0x07	; 7
 a56:	0a c0       	rjmp	.+20     	; 0xa6c <TIMER0_init+0x128>
 a58:	89 b7       	in	r24, 0x39	; 57
 a5a:	8d 7f       	andi	r24, 0xFD	; 253
 a5c:	89 bf       	out	0x39, r24	; 57
 a5e:	87 e0       	ldi	r24, 0x07	; 7
 a60:	05 c0       	rjmp	.+10     	; 0xa6c <TIMER0_init+0x128>
 a62:	88 e0       	ldi	r24, 0x08	; 8
 a64:	03 c0       	rjmp	.+6      	; 0xa6c <TIMER0_init+0x128>
 a66:	88 e0       	ldi	r24, 0x08	; 8
 a68:	01 c0       	rjmp	.+2      	; 0xa6c <TIMER0_init+0x128>
 a6a:	88 e0       	ldi	r24, 0x08	; 8
 a6c:	87 30       	cpi	r24, 0x07	; 7
 a6e:	89 f4       	brne	.+34     	; 0xa92 <TIMER0_init+0x14e>
 a70:	88 81       	ld	r24, Y
 a72:	88 23       	and	r24, r24
 a74:	19 f0       	breq	.+6      	; 0xa7c <TIMER0_init+0x138>
 a76:	81 30       	cpi	r24, 0x01	; 1
 a78:	31 f0       	breq	.+12     	; 0xa86 <TIMER0_init+0x142>
 a7a:	0a c0       	rjmp	.+20     	; 0xa90 <TIMER0_init+0x14c>
 a7c:	8c 81       	ldd	r24, Y+4	; 0x04
 a7e:	9d 81       	ldd	r25, Y+5	; 0x05
 a80:	0e 94 8e 04 	call	0x91c	; 0x91c <timer0_set_ovf_isr>
 a84:	06 c0       	rjmp	.+12     	; 0xa92 <TIMER0_init+0x14e>
 a86:	8e 81       	ldd	r24, Y+6	; 0x06
 a88:	9f 81       	ldd	r25, Y+7	; 0x07
 a8a:	0e 94 98 04 	call	0x930	; 0x930 <timer0_set_ctc_isr>
 a8e:	01 c0       	rjmp	.+2      	; 0xa92 <TIMER0_init+0x14e>
 a90:	8f e0       	ldi	r24, 0x0F	; 15
 a92:	8b 30       	cpi	r24, 0x0B	; 11
 a94:	11 f0       	breq	.+4      	; 0xa9a <TIMER0_init+0x156>
 a96:	8d 30       	cpi	r24, 0x0D	; 13
 a98:	31 f4       	brne	.+12     	; 0xaa6 <TIMER0_init+0x162>
 a9a:	83 b7       	in	r24, 0x33	; 51
 a9c:	88 7f       	andi	r24, 0xF8	; 248
 a9e:	83 bf       	out	0x33, r24	; 51
 aa0:	80 e0       	ldi	r24, 0x00	; 0
 aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <TIMER0_init+0x162>
 aa4:	82 e0       	ldi	r24, 0x02	; 2
 aa6:	df 91       	pop	r29
 aa8:	cf 91       	pop	r28
 aaa:	08 95       	ret

00000aac <TIMER0_start>:
 aac:	00 97       	sbiw	r24, 0x00	; 0
 aae:	09 f4       	brne	.+2      	; 0xab2 <TIMER0_start+0x6>
 ab0:	41 c0       	rjmp	.+130    	; 0xb34 <TIMER0_start+0x88>
 ab2:	dc 01       	movw	r26, r24
 ab4:	11 96       	adiw	r26, 0x01	; 1
 ab6:	ec 91       	ld	r30, X
 ab8:	8e 2f       	mov	r24, r30
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	88 30       	cpi	r24, 0x08	; 8
 abe:	91 05       	cpc	r25, r1
 ac0:	a8 f5       	brcc	.+106    	; 0xb2c <TIMER0_start+0x80>
 ac2:	fc 01       	movw	r30, r24
 ac4:	e6 5b       	subi	r30, 0xB6	; 182
 ac6:	ff 4f       	sbci	r31, 0xFF	; 255
 ac8:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__tablejump2__>
 acc:	83 b7       	in	r24, 0x33	; 51
 ace:	88 7f       	andi	r24, 0xF8	; 248
 ad0:	83 bf       	out	0x33, r24	; 51
 ad2:	89 e0       	ldi	r24, 0x09	; 9
 ad4:	2c c0       	rjmp	.+88     	; 0xb2e <TIMER0_start+0x82>
 ad6:	83 b7       	in	r24, 0x33	; 51
 ad8:	89 7f       	andi	r24, 0xF9	; 249
 ada:	81 60       	ori	r24, 0x01	; 1
 adc:	83 bf       	out	0x33, r24	; 51
 ade:	89 e0       	ldi	r24, 0x09	; 9
 ae0:	26 c0       	rjmp	.+76     	; 0xb2e <TIMER0_start+0x82>
 ae2:	83 b7       	in	r24, 0x33	; 51
 ae4:	8b 7f       	andi	r24, 0xFB	; 251
 ae6:	82 60       	ori	r24, 0x02	; 2
 ae8:	8e 7f       	andi	r24, 0xFE	; 254
 aea:	83 bf       	out	0x33, r24	; 51
 aec:	89 e0       	ldi	r24, 0x09	; 9
 aee:	1f c0       	rjmp	.+62     	; 0xb2e <TIMER0_start+0x82>
 af0:	83 b7       	in	r24, 0x33	; 51
 af2:	8b 7f       	andi	r24, 0xFB	; 251
 af4:	83 60       	ori	r24, 0x03	; 3
 af6:	83 bf       	out	0x33, r24	; 51
 af8:	89 e0       	ldi	r24, 0x09	; 9
 afa:	19 c0       	rjmp	.+50     	; 0xb2e <TIMER0_start+0x82>
 afc:	83 b7       	in	r24, 0x33	; 51
 afe:	84 60       	ori	r24, 0x04	; 4
 b00:	8c 7f       	andi	r24, 0xFC	; 252
 b02:	83 bf       	out	0x33, r24	; 51
 b04:	89 e0       	ldi	r24, 0x09	; 9
 b06:	13 c0       	rjmp	.+38     	; 0xb2e <TIMER0_start+0x82>
 b08:	83 b7       	in	r24, 0x33	; 51
 b0a:	84 60       	ori	r24, 0x04	; 4
 b0c:	8d 7f       	andi	r24, 0xFD	; 253
 b0e:	81 60       	ori	r24, 0x01	; 1
 b10:	83 bf       	out	0x33, r24	; 51
 b12:	89 e0       	ldi	r24, 0x09	; 9
 b14:	0c c0       	rjmp	.+24     	; 0xb2e <TIMER0_start+0x82>
 b16:	83 b7       	in	r24, 0x33	; 51
 b18:	86 60       	ori	r24, 0x06	; 6
 b1a:	8e 7f       	andi	r24, 0xFE	; 254
 b1c:	83 bf       	out	0x33, r24	; 51
 b1e:	89 e0       	ldi	r24, 0x09	; 9
 b20:	06 c0       	rjmp	.+12     	; 0xb2e <TIMER0_start+0x82>
 b22:	83 b7       	in	r24, 0x33	; 51
 b24:	87 60       	ori	r24, 0x07	; 7
 b26:	83 bf       	out	0x33, r24	; 51
 b28:	89 e0       	ldi	r24, 0x09	; 9
 b2a:	01 c0       	rjmp	.+2      	; 0xb2e <TIMER0_start+0x82>
 b2c:	8a e0       	ldi	r24, 0x0A	; 10
 b2e:	89 30       	cpi	r24, 0x09	; 9
 b30:	21 f4       	brne	.+8      	; 0xb3a <TIMER0_start+0x8e>
 b32:	02 c0       	rjmp	.+4      	; 0xb38 <TIMER0_start+0x8c>
 b34:	82 e0       	ldi	r24, 0x02	; 2
 b36:	08 95       	ret
 b38:	80 e0       	ldi	r24, 0x00	; 0
 b3a:	08 95       	ret

00000b3c <TIMER0_stop>:
 b3c:	83 b7       	in	r24, 0x33	; 51
 b3e:	88 7f       	andi	r24, 0xF8	; 248
 b40:	83 bf       	out	0x33, r24	; 51
 b42:	80 e0       	ldi	r24, 0x00	; 0
 b44:	08 95       	ret

00000b46 <TIMER0_sync_delay_ms>:


void TIMER0_sync_delay_ms(Uint32_t arg_delay_in_ms)
{
 b46:	0f 93       	push	r16
 b48:	1f 93       	push	r17
	Uint32_t l_u32_timer_tick = 0;
	Uint32_t l_u32_max_delay = 0;
	Uint32_t l_u32_preload_time = 0;
	Uint32_t l_u64_required_time_in_micro_sec = (arg_delay_in_ms * 1000);
 b4a:	dc 01       	movw	r26, r24
 b4c:	cb 01       	movw	r24, r22
 b4e:	88 0f       	add	r24, r24
 b50:	99 1f       	adc	r25, r25
 b52:	aa 1f       	adc	r26, r26
 b54:	bb 1f       	adc	r27, r27
 b56:	88 0f       	add	r24, r24
 b58:	99 1f       	adc	r25, r25
 b5a:	aa 1f       	adc	r26, r26
 b5c:	bb 1f       	adc	r27, r27
 b5e:	88 0f       	add	r24, r24
 b60:	99 1f       	adc	r25, r25
 b62:	aa 1f       	adc	r26, r26
 b64:	bb 1f       	adc	r27, r27
 b66:	8c 01       	movw	r16, r24
 b68:	9d 01       	movw	r18, r26
 b6a:	00 0f       	add	r16, r16
 b6c:	11 1f       	adc	r17, r17
 b6e:	22 1f       	adc	r18, r18
 b70:	33 1f       	adc	r19, r19
 b72:	00 0f       	add	r16, r16
 b74:	11 1f       	adc	r17, r17
 b76:	22 1f       	adc	r18, r18
 b78:	33 1f       	adc	r19, r19
 b7a:	80 0f       	add	r24, r16
 b7c:	91 1f       	adc	r25, r17
 b7e:	a2 1f       	adc	r26, r18
 b80:	b3 1f       	adc	r27, r19
 b82:	ac 01       	movw	r20, r24
 b84:	bd 01       	movw	r22, r26
 b86:	44 0f       	add	r20, r20
 b88:	55 1f       	adc	r21, r21
 b8a:	66 1f       	adc	r22, r22
 b8c:	77 1f       	adc	r23, r23
 b8e:	44 0f       	add	r20, r20
 b90:	55 1f       	adc	r21, r21
 b92:	66 1f       	adc	r22, r22
 b94:	77 1f       	adc	r23, r23
 b96:	84 0f       	add	r24, r20
 b98:	95 1f       	adc	r25, r21
 b9a:	a6 1f       	adc	r26, r22
 b9c:	b7 1f       	adc	r27, r23
 b9e:	ac 01       	movw	r20, r24
 ba0:	bd 01       	movw	r22, r26
 ba2:	44 0f       	add	r20, r20
 ba4:	55 1f       	adc	r21, r21
 ba6:	66 1f       	adc	r22, r22
 ba8:	77 1f       	adc	r23, r23
 baa:	44 0f       	add	r20, r20
 bac:	55 1f       	adc	r21, r21
 bae:	66 1f       	adc	r22, r22
 bb0:	77 1f       	adc	r23, r23
 bb2:	84 0f       	add	r24, r20
 bb4:	95 1f       	adc	r25, r21
 bb6:	a6 1f       	adc	r26, r22
 bb8:	b7 1f       	adc	r27, r23
	
		g_u64_polling_counter = 0;
 bba:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <g_u64_polling_counter>
 bbe:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <g_u64_polling_counter+0x1>
 bc2:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <g_u64_polling_counter+0x2>
 bc6:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <g_u64_polling_counter+0x3>
	l_u32_timer_tick = DELAY_IN_MS_RESCALER / MCU_FREQ;
	l_u32_max_delay = l_u32_timer_tick * TIMER_RESOLUTION;
	
	g_u32_number_of_ovf = l_u64_required_time_in_micro_sec / l_u32_max_delay;
 bca:	49 2f       	mov	r20, r25
 bcc:	5a 2f       	mov	r21, r26
 bce:	6b 2f       	mov	r22, r27
 bd0:	77 27       	eor	r23, r23
 bd2:	40 93 3f 01 	sts	0x013F, r20	; 0x80013f <g_u32_number_of_ovf>
 bd6:	50 93 40 01 	sts	0x0140, r21	; 0x800140 <g_u32_number_of_ovf+0x1>
 bda:	60 93 41 01 	sts	0x0141, r22	; 0x800141 <g_u32_number_of_ovf+0x2>
 bde:	70 93 42 01 	sts	0x0142, r23	; 0x800142 <g_u32_number_of_ovf+0x3>
	
	l_u32_preload_time = TIMER_RESOLUTION - (l_u64_required_time_in_micro_sec % TIMER_RESOLUTION);
 be2:	99 27       	eor	r25, r25
 be4:	aa 27       	eor	r26, r26
 be6:	bb 27       	eor	r27, r27
 be8:	40 e0       	ldi	r20, 0x00	; 0
 bea:	51 e0       	ldi	r21, 0x01	; 1
 bec:	60 e0       	ldi	r22, 0x00	; 0
 bee:	70 e0       	ldi	r23, 0x00	; 0
 bf0:	8a 01       	movw	r16, r20
 bf2:	9b 01       	movw	r18, r22
 bf4:	08 1b       	sub	r16, r24
 bf6:	19 0b       	sbc	r17, r25
 bf8:	2a 0b       	sbc	r18, r26
 bfa:	3b 0b       	sbc	r19, r27
	
	TCNT0_REG = l_u32_preload_time;
 bfc:	02 bf       	out	0x32, r16	; 50
	g_u32_number_of_ovf++;
 bfe:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <g_u32_number_of_ovf>
 c02:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <g_u32_number_of_ovf+0x1>
 c06:	a0 91 41 01 	lds	r26, 0x0141	; 0x800141 <g_u32_number_of_ovf+0x2>
 c0a:	b0 91 42 01 	lds	r27, 0x0142	; 0x800142 <g_u32_number_of_ovf+0x3>
 c0e:	01 96       	adiw	r24, 0x01	; 1
 c10:	a1 1d       	adc	r26, r1
 c12:	b1 1d       	adc	r27, r1
 c14:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <g_u32_number_of_ovf>
 c18:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <g_u32_number_of_ovf+0x1>
 c1c:	a0 93 41 01 	sts	0x0141, r26	; 0x800141 <g_u32_number_of_ovf+0x2>
 c20:	b0 93 42 01 	sts	0x0142, r27	; 0x800142 <g_u32_number_of_ovf+0x3>
	

	while(g_u64_polling_counter != 1);
 c24:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <g_u64_polling_counter>
 c28:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <g_u64_polling_counter+0x1>
 c2c:	a0 91 39 01 	lds	r26, 0x0139	; 0x800139 <g_u64_polling_counter+0x2>
 c30:	b0 91 3a 01 	lds	r27, 0x013A	; 0x80013a <g_u64_polling_counter+0x3>
 c34:	01 97       	sbiw	r24, 0x01	; 1
 c36:	a1 05       	cpc	r26, r1
 c38:	b1 05       	cpc	r27, r1
 c3a:	a1 f7       	brne	.-24     	; 0xc24 <TIMER0_sync_delay_ms+0xde>
	g_u64_polling_counter = 0;
 c3c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <g_u64_polling_counter>
 c40:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <g_u64_polling_counter+0x1>
 c44:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <g_u64_polling_counter+0x2>
 c48:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <g_u64_polling_counter+0x3>
	
}
 c4c:	1f 91       	pop	r17
 c4e:	0f 91       	pop	r16
 c50:	08 95       	ret

00000c52 <__vector_11>:


ISR(TIM0_OVF_INT)
{
 c52:	1f 92       	push	r1
 c54:	0f 92       	push	r0
 c56:	0f b6       	in	r0, 0x3f	; 63
 c58:	0f 92       	push	r0
 c5a:	11 24       	eor	r1, r1
 c5c:	2f 93       	push	r18
 c5e:	3f 93       	push	r19
 c60:	4f 93       	push	r20
 c62:	5f 93       	push	r21
 c64:	6f 93       	push	r22
 c66:	7f 93       	push	r23
 c68:	8f 93       	push	r24
 c6a:	9f 93       	push	r25
 c6c:	af 93       	push	r26
 c6e:	bf 93       	push	r27
 c70:	ef 93       	push	r30
 c72:	ff 93       	push	r31
	if (enable_delay_ms == TIMER0_DELAY_ENABLE)
	{
			if(g_u32_isr_ovf_counter == g_u32_number_of_ovf)
 c74:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <g_u32_isr_ovf_counter>
 c78:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <g_u32_isr_ovf_counter+0x1>
 c7c:	a0 91 35 01 	lds	r26, 0x0135	; 0x800135 <g_u32_isr_ovf_counter+0x2>
 c80:	b0 91 36 01 	lds	r27, 0x0136	; 0x800136 <g_u32_isr_ovf_counter+0x3>
 c84:	40 91 3f 01 	lds	r20, 0x013F	; 0x80013f <g_u32_number_of_ovf>
 c88:	50 91 40 01 	lds	r21, 0x0140	; 0x800140 <g_u32_number_of_ovf+0x1>
 c8c:	60 91 41 01 	lds	r22, 0x0141	; 0x800141 <g_u32_number_of_ovf+0x2>
 c90:	70 91 42 01 	lds	r23, 0x0142	; 0x800142 <g_u32_number_of_ovf+0x3>
 c94:	84 17       	cp	r24, r20
 c96:	95 07       	cpc	r25, r21
 c98:	a6 07       	cpc	r26, r22
 c9a:	b7 07       	cpc	r27, r23
 c9c:	e1 f4       	brne	.+56     	; 0xcd6 <__vector_11+0x84>
			{
				ptr_func_overflow_isr();
 c9e:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <ptr_func_overflow_isr>
 ca2:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <ptr_func_overflow_isr+0x1>
 ca6:	09 95       	icall
				g_u32_isr_ovf_counter = 0;
 ca8:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <g_u32_isr_ovf_counter>
 cac:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <g_u32_isr_ovf_counter+0x1>
 cb0:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <g_u32_isr_ovf_counter+0x2>
 cb4:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <g_u32_isr_ovf_counter+0x3>
				g_u64_polling_counter = 1;
 cb8:	81 e0       	ldi	r24, 0x01	; 1
 cba:	90 e0       	ldi	r25, 0x00	; 0
 cbc:	a0 e0       	ldi	r26, 0x00	; 0
 cbe:	b0 e0       	ldi	r27, 0x00	; 0
 cc0:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <g_u64_polling_counter>
 cc4:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <g_u64_polling_counter+0x1>
 cc8:	a0 93 39 01 	sts	0x0139, r26	; 0x800139 <g_u64_polling_counter+0x2>
 ccc:	b0 93 3a 01 	sts	0x013A, r27	; 0x80013a <g_u64_polling_counter+0x3>
				TIMER0_stop();
 cd0:	0e 94 9e 05 	call	0xb3c	; 0xb3c <TIMER0_stop>
 cd4:	0b c0       	rjmp	.+22     	; 0xcec <__vector_11+0x9a>
			}
			else
			{
				g_u32_isr_ovf_counter++;
 cd6:	01 96       	adiw	r24, 0x01	; 1
 cd8:	a1 1d       	adc	r26, r1
 cda:	b1 1d       	adc	r27, r1
 cdc:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <g_u32_isr_ovf_counter>
 ce0:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <g_u32_isr_ovf_counter+0x1>
 ce4:	a0 93 35 01 	sts	0x0135, r26	; 0x800135 <g_u32_isr_ovf_counter+0x2>
 ce8:	b0 93 36 01 	sts	0x0136, r27	; 0x800136 <g_u32_isr_ovf_counter+0x3>

	else if (enable_delay_ms == TIMER0_DELAY_DISABLE)
	{
		ptr_func_overflow_isr();	
	}
}
 cec:	ff 91       	pop	r31
 cee:	ef 91       	pop	r30
 cf0:	bf 91       	pop	r27
 cf2:	af 91       	pop	r26
 cf4:	9f 91       	pop	r25
 cf6:	8f 91       	pop	r24
 cf8:	7f 91       	pop	r23
 cfa:	6f 91       	pop	r22
 cfc:	5f 91       	pop	r21
 cfe:	4f 91       	pop	r20
 d00:	3f 91       	pop	r19
 d02:	2f 91       	pop	r18
 d04:	0f 90       	pop	r0
 d06:	0f be       	out	0x3f, r0	; 63
 d08:	0f 90       	pop	r0
 d0a:	1f 90       	pop	r1
 d0c:	18 95       	reti

00000d0e <__vector_10>:

ISR(TIM0_COMP_INT)
{
 d0e:	1f 92       	push	r1
 d10:	0f 92       	push	r0
 d12:	0f b6       	in	r0, 0x3f	; 63
 d14:	0f 92       	push	r0
 d16:	11 24       	eor	r1, r1
 d18:	2f 93       	push	r18
 d1a:	3f 93       	push	r19
 d1c:	4f 93       	push	r20
 d1e:	5f 93       	push	r21
 d20:	6f 93       	push	r22
 d22:	7f 93       	push	r23
 d24:	8f 93       	push	r24
 d26:	9f 93       	push	r25
 d28:	af 93       	push	r26
 d2a:	bf 93       	push	r27
 d2c:	ef 93       	push	r30
 d2e:	ff 93       	push	r31
	ptr_func_ctc_isr();
 d30:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <ptr_func_ctc_isr>
 d34:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <ptr_func_ctc_isr+0x1>
 d38:	09 95       	icall
}
 d3a:	ff 91       	pop	r31
 d3c:	ef 91       	pop	r30
 d3e:	bf 91       	pop	r27
 d40:	af 91       	pop	r26
 d42:	9f 91       	pop	r25
 d44:	8f 91       	pop	r24
 d46:	7f 91       	pop	r23
 d48:	6f 91       	pop	r22
 d4a:	5f 91       	pop	r21
 d4c:	4f 91       	pop	r20
 d4e:	3f 91       	pop	r19
 d50:	2f 91       	pop	r18
 d52:	0f 90       	pop	r0
 d54:	0f be       	out	0x3f, r0	; 63
 d56:	0f 90       	pop	r0
 d58:	1f 90       	pop	r1
 d5a:	18 95       	reti

00000d5c <__tablejump2__>:
 d5c:	ee 0f       	add	r30, r30
 d5e:	ff 1f       	adc	r31, r31
 d60:	05 90       	lpm	r0, Z+
 d62:	f4 91       	lpm	r31, Z
 d64:	e0 2d       	mov	r30, r0
 d66:	09 94       	ijmp

00000d68 <_exit>:
 d68:	f8 94       	cli

00000d6a <__stop_program>:
 d6a:	ff cf       	rjmp	.-2      	; 0xd6a <__stop_program>
